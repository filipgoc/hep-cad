<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg id="svg20523" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" version="1.1" xmlns:ns1="http://sozi.baierouge.fr" height="337.35529" width="2003.918" xmlns="http://www.w3.org/2000/svg" xmlns:cc="http://creativecommons.org/ns#" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 2003.918 337.35529" xmlns:dc="http://purl.org/dc/elements/1.1/">
 <defs id="defs20525">
  <filter id="filter20323" style="color-interpolation-filters:sRGB" height="1.0352756" width="1.0367548" y="-.017637789" x="-.018377399">
   <feGaussianBlur id="feGaussianBlur20325" stdDeviation="6.4935139"/>
  </filter>
  <filter id="filter20315" style="color-interpolation-filters:sRGB" height="1.0351751" width="1.0368645" y="-.017587541" x="-.018432269">
   <feGaussianBlur id="feGaussianBlur20317" stdDeviation="6.4750147"/>
  </filter>
  <filter id="filter17752" style="color-interpolation-filters:sRGB" height="1.3325443" width="1.147128" y="-.16627213" x="-.073563993">
   <feGaussianBlur id="feGaussianBlur17754" stdDeviation="3.9308127"/>
  </filter>
  <filter id="filter20024" style="color-interpolation-filters:sRGB" height="2.0080867" width="1.3755174" y="-.50404334" x="-.18775868">
   <feGaussianBlur id="feGaussianBlur20026" stdDeviation="5.442832"/>
  </filter>
  <filter id="filter6707" style="color-interpolation-filters:sRGB" height="1.3752494" width="1.146955" y="-.18762468" x="-.073477522">
   <feGaussianBlur id="feGaussianBlur6709" stdDeviation="4.3473307"/>
  </filter>
  <linearGradient id="linearGradient3860" y2="110.77772" gradientUnits="userSpaceOnUse" y1="-179.42419" gradientTransform="matrix(1.3209847,0,0,1.3209847,-19.760119,-48.350485)" x2="334.47815" x1="254.28662">
   <stop id="stop3856" stop-color="#8db5f1" offset="0"/>
   <stop id="stop3858" stop-color="#c9ecef" offset="1"/>
  </linearGradient>
  <radialGradient id="radialGradient21370" gradientUnits="userSpaceOnUse" cx="176.47154" cy="50.859001" r="179.56973" gradientTransform="matrix(1.001153 -.02511106 -.00853694 .89953286 .2307036 50.18508)">
   <stop id="stop20386" stop-color="#ff5d5d" offset="0"/>
   <stop id="stop20388" stop-color="#d90000" offset="1"/>
  </radialGradient>
  <radialGradient id="radialGradient21372" gradientUnits="userSpaceOnUse" cx="72.433289" cy="556.45813" r="7.4287047" gradientTransform="matrix(0.99999981,0,1.8664562e-8,1.3747661,3.863301e-6,-208.8022)">
   <stop id="stop20394" stop-color="#2f2f2f" offset="0"/>
   <stop id="stop20396" offset="1"/>
  </radialGradient>
  <filter id="filter10393" style="color-interpolation-filters:sRGB" height="1.2468805" width="1.0636249" y="-.12344026" x="-.031812411">
   <feGaussianBlur id="feGaussianBlur10395" stdDeviation="13.158746"/>
  </filter>
  <filter id="filter10469" style="color-interpolation-filters:sRGB" height="1.9185383" width="1.3777517" y="-.45926914" x="-.18887582">
   <feGaussianBlur id="feGaussianBlur10471" stdDeviation="31.437324"/>
  </filter>
  <filter id="filter10497" style="color-interpolation-filters:sRGB" height="1.9020795" width="1.3337182" y="-.45103976" x="-.16685908">
   <feGaussianBlur id="feGaussianBlur10499" stdDeviation="7.2871844"/>
  </filter>
  <clipPath id="clipPath3719" clipPathUnits="userSpaceOnUse">
   <path id="path3721" d="m620.7832-133.53125c-0.17253 0.07948-0.33686 0.18784-0.45508 0.3418-0.10316 0.13501-0.16192 0.3027-0.17187 0.47461-0.0119 0.2052 0.0332 0.41165 0.0996 0.60351 0.0874 0.25412 0.21087 0.49297 0.3457 0.72266 0.38264 0.65254 0.85807 1.24738 1.33594 1.82617 0.66158 0.80213 1.3532 1.57644 2.04492 2.34766 1.87606 2.09199 3.76088 4.17338 5.54492 6.32421 2.27774 2.74584 4.41602 5.59817 6.33789 8.57618 4.73154 7.33358 8.11226 15.500839 9.60743 23.949216-7.88315-14.297816-17.56422-33.485576-35.14063-31.167966 11.68299 37.36343 25.98057 31.683346 35.4375 36.384762-0.37334-0.552391-14.54975-11.588568-18.6875-18.773442 8.91429 9.811485 15.8672 14.483029 18.80664 16.216802 0.94832 7.18455 0.57714 14.486926-0.76562 21.621094-0.29469-0.314145-0.58371-0.63312-0.88282-0.94336-10.49673-10.870524-23.56046-19.200412-37.89452-23.861328-8.9636-2.911425-18.39829-4.369894-27.7832-4.251953-5.63095 0.07076-11.2574 0.733798-16.75977 1.941406-3.74772 0.824082-7.42732 1.920736-11.00781 3.267578-9.30876-4.030579-19.56413-5.738-29.61133-4.890625-18.37732 1.617262-35.00694 11.348025-47.79882 24.015625-4.23683 4.180156-8.06151 8.616736-12.375 12.423831-4.31763 3.79082-9.196 7.05191-14.66993 8.36328-2.73356 0.66151-5.59353 0.84688-8.35156 0.38281-2.75526-0.46351-5.42507-1.57217-7.5957-3.32226-2.16828-1.74707-3.85394-4.14633-4.60547-6.83204-0.75212-2.680878-0.56753-5.668438 0.66016-8.183589 0.8508-1.766648 2.20703-3.296272 3.57617-4.820313 1.37535-1.519591 2.79607-3.080709 3.78125-4.941406 0.49191-0.931298 0.86341-1.937344 1.03515-2.984375 0.0597-0.363348 0.0854-0.730807 0.0918-1.099609 0.0755-1.101677 0.16938-2.195225 0.48438-3.21875 0.18941-0.617666 0.45257-1.20944 0.8125-1.726563 0.35971-0.516653 0.81622-0.960765 1.3496-1.253906 0.53274-0.292832 1.14495-0.43669 1.74024-0.363281 0.59442 0.07303-0.48075 1.309448 0.14062 2.273437 0.86867 1.377795 1.32582 0.874824 1.01368 2.351563 0.38821-0.259866 0.83676-1.29058 1.0332-1.738282 0.26243-0.746681-0.0405-1.392812-0.48828-2.158203-0.41968-0.525271-1.02996-0.860531-1.67188-0.958984-0.64126-0.09811-1.30396 0.0302-1.88867 0.330078-0.58416 0.299627-1.09017 0.759968-1.49023 1.302734-0.39989 0.542348-0.69931 1.163-0.91602 1.808594-0.15675 0.468438-0.26418 0.948194-0.35351 1.431641-0.0125-0.04516-0.0177-0.09182-0.0312-0.136719-0.30811-1.02071-0.8966-1.961035-1.71875-2.638672-0.32169-0.264956-0.68669-0.471138-1.06641-0.640625-0.25848-0.86152-0.30453-1.723904 0.0332-2.414062 0.19024-1.028235 2.22912 0.976583 3.97461-0.0039 2.49271-1.367532 1.66708-2.217982 4.20703-1.517578-0.41164-0.703962-2.15872-1.594639-2.91797-1.984375-1.27319-0.536382-2.43145-0.07791-3.8125 0.621094-0.9597 0.675563-1.61197 1.702507-1.85156 2.810547-0.2854 0.693928-0.25985 1.505142-0.0605 2.3125-0.46787-0.153859-0.95716-0.238238-1.44921-0.222657-1.36434 0.247941-2.43244 0.549174-2.98829 1.640626-0.28994 0.70191-0.95988 2.314114-0.82421 3.054687 1.32864-1.907256 1.26554-0.832953 3.79101-1.203125 1.11694-0.151969 1.61611-1.222026 2.01563-1.841797 0.67913 1.379061 1.69311 2.520116 2.34179 2.679688 0.13695 0.793807 0.11983 1.615797-0.0332 2.410156-0.18745 0.972383-0.5681 1.904187-1.05859 2.773437-0.97962 1.740421-2.40687 3.204186-3.82422 4.689454-1.42359 1.4808-2.87078 3.029643-3.8711 4.923828-1.41954 2.720063-1.73493 5.968617-0.98632 8.958987 0.74944 2.98656 2.50511 5.68304 4.85156 7.68359 2.34459 1.99794 5.23114 3.31287 8.24805 3.90625 3.01446 0.59289 6.13745 0.49609 9.12695-0.14062 5.97167-1.28496 11.30177-4.56046 15.89453-8.4082 4.59763-3.83212 8.604-8.200044 12.8418-12.140632 12.81073-11.865908 28.98696-20.714508 45.98242-21.578125 7.52856-0.412167 15.12535 0.743093 22.1875 3.285156-7.68538 3.773662-14.74744 8.768899-20.7832 14.83789-10.54371 10.611543-17.76919 24.399561-20.26758 39.052741-2.49189 14.65994-0.17203 30.05136 6.72851 43.0957 6.90948 13.04494 18.36236 23.54015 31.91016 29.0625 8.43241 3.42924 17.61901 4.83584 26.625 4.29297 9.00614-0.53994 17.87007-3.03495 25.71875-7.38867 7.84723-4.35649 14.61692-10.53168 19.77344-17.79297 5.15731-7.26072 8.73312-15.63668 10.23828-24.35547-1.76939 8.66903-5.59392 16.8529-10.89844 23.86133-5.30531 7.00786-12.14786 12.88663-19.89844 16.88281-7.7491 3.99895-16.38735 6.13992-25.05664 6.39844-8.66941 0.25557-17.36774-1.38803-25.22265-4.8711-12.64796-5.59508-23.1026-15.85807-29.14453-28.15234-6.05179-12.29658-7.75726-26.63578-5.07618-39.96094 2.67492-13.33356 9.72326-25.71594 19.52539-35.00586 7.26095-6.888797 16.06915-12.119563 25.51368-15.384765 0.0355 0.02125 0.0719 0.04117 0.10742 0.0625l0.0742-0.126954c3.24802-1.11324 6.56915-1.996501 9.92968-2.630859 13.20963-2.499841 27.1091-1.209345 39.71289 3.302734 12.61233 4.509725 23.99326 12.287898 32.98243 22.166014 8.95508 9.82435 15.47772 21.90213 19.32031 34.67579 3.8507 12.84565 5.035 26.43687 3.50781 39.67187-1.87339 16.4688-7.96706 32.44903-16.92578 46.48242-9.03133 14.11578-21.00725 26.34917-34.79883 35.70703-17.94242 12.23762-39.02684 19.76271-60.72461 23.57227-22.02356 3.84576-44.75539 3.84047-67.24609 1.36133-32.24829-3.57367-63.92037-12.0858-94.24414-24.02539-5.20112-2.04845-10.4034-4.23328-15.61524-6.46094 6.73754-1.86226 13.17146-4.77911 18.95704-8.71094 7.29773-5.01921 13.14929-11.06632 19.24804-16.15039 6.21657-5.16569 13.01061-9.63101 20.31836-12.9707 10.14374-4.53746 21.56785-7.09534 31.85352-4.05859 7.80946 2.24759 14.9584 7.73672 18.33984 15.13867 2.71702 5.90168 3.08679 13.09803 0.40625 19.04687-1.33256 2.98732-3.38834 5.68462-5.97851 7.70313-2.58727 2.0184-5.72807 3.38362-9 3.8164-3.26928 0.43453-6.70123-0.0554-9.70704-1.47265-3.00467-1.4142-5.61238-3.76849-7.26757-6.6836-1.65633-2.91188-2.37172-6.40873-1.90235-9.76367 0.46652-3.35327 2.12535-6.58371 4.66992-8.88281 3.65807-1.73317 2.73354 0.97875 9.98633 3.00781 2.96548 1.06093 10.29497-3.13894 12.49414 0.70703-2.04179-3.93178-6.63786-9.21781-11.06445-10.10937-4.4271-0.88875-8.58556 2.63826-12.12109 5.58203-2.83741 2.36841-4.79051 5.77665-5.45508 9.45703-0.66179 3.67921-0.0478 7.57117 1.68554 10.92578 1.73468 3.35172 4.54245 6.12758 7.91797 7.88477 3.3747 1.75417 7.25991 2.48752 11.07227 2.13476 3.80996-0.35452 7.50352-1.76659 10.62695-4.00976 3.12068-2.24321 5.65254-5.27368 7.36133-8.73047 3.39831-6.93119 3.41267-15.27644 0.43164-22.42774-3.73407-8.89816-11.65452-15.69292-20.83984-18.68945-11.99616-3.83881-25.04282-1.75036-36.30078 2.9707-8.09031 3.32162-15.64364 7.83735-22.54493 13.13086-6.78233 5.18634-12.6979 10.86996-19.18554 14.8711-7.74033 4.84052-16.78619 7.56978-25.88672 8.14062-2.27747 0.13819-4.56176 0.14143-6.83399 0.01-3.56252-1.56268-7.13922-3.12861-10.74414-4.6836-15.27017-6.6101-31.03987-12.99737-47.7207-17.83398-40.45923-11.62263-83.7232-12.48558-124.875-3.4668-41.16449 8.96435-80.444652 27.87316-112.86133 55.72852-2.11725 1.72693-4.164946 3.48492-6.146167 5.27117l0.395082 51.09386c28.070252-40.28516 73.243195-67.79594 125.5889-82.12504 36.12154-9.0251 74.66326-9.55361 110.7578-0.28906 15.03306 3.81631 29.97362 9.35581 45.07813 15.31641 15.1257 5.99204 30.40028 12.47254 46.31641 18.20507 32.39617 11.6718 66.30052 19.61497 100.76562 22.41407 24.15644 1.97681 48.7659 1.13965 72.7793-3.75586 18.36131-3.72599 36.37419-10.07904 52.81054-19.39063 0.14852-0.007 0.29675-0.0179 0.44532-0.0234 9.1127-0.32258 18.38168 1.50865 26.55859 5.56836 6.84809 3.34698 13.29147 8.42618 20.54883 12.92383 7.38623 4.59267 15.34415 8.34552 23.7207 10.85938 11.66596 3.59656 24.85511 4.39875 36.41797-0.59571 8.84794-3.88113 16.0649-11.41972 18.91016-20.64062 2.26679-7.40872 1.43536-15.71202-2.625-22.27734-2.0389-3.27296-4.85444-6.04174-8.17969-7.96875-3.32798-1.92671-7.14239-2.96929-10.96875-2.94922-3.8286 0.0221-7.62178 1.13099-10.80859 3.20703-3.18734 2.07911-5.71106 5.11764-7.10938 8.62304-1.39672 3.50816-1.62611 7.44229-0.60742 11.03907 1.02158 3.59767 3.29791 6.7976 6.35352 8.87695 3.80665 2.58361 9.07177 5.6127 13.39062 4.29492 4.31807-1.32051 7.59305-6.95757 9.24023-11.07031-1.8122 4.04274-8.01277 1.62773-12.21679 2.72656-4.20324 1.10158-6.37109 5.70759-9.79297 3.16992-2.75737-2.03903-4.72512-5.0913-5.51758-8.38281-0.79547-3.29288-0.42392-6.84233 0.93945-9.90234 1.36195-3.06313 3.72628-5.66182 6.57813-7.36328 2.85265-1.70473 6.21952-2.52653 9.51562-2.41407 3.29858 0.11044 6.55768 1.16052 9.33008 2.91602 2.7753 1.75531 5.08654 4.23948 6.70508 7.08203 3.24989 5.65794 3.58536 12.85488 1.45898 18.99414-2.64076 7.69737-9.21752 13.8602-16.76953 16.86133-9.93906 4.02884-21.55855 2.60102-32.09765-0.92187-7.59954-2.60843-14.79793-6.38747-21.49024-10.91993-6.56705-4.46277-12.98237-9.90662-20.73633-14.1875-5.43303-2.96009-11.29289-5.08152-17.33984-6.35937 0.0833-0.0598 0.1688-0.11584 0.25195-0.17578 15.35109-11.11318 28.33805-25.30243 38.01953-41.48828 6.28909-10.4922 11.1308-21.88323 14.19727-33.74024 8.15416-3.67049 17.24183-5.40801 26.22852-4.91601 16.99543 0.86361 33.16971 9.71221 45.98047 21.57812 4.23778 3.94059 8.24611 8.3085 12.84374 12.14063 4.59276 3.84774 9.92095 7.12324 15.89258 8.4082 2.98951 0.63671 6.11252 0.73351 9.12696 0.14062 3.0169-0.59338 5.90348-1.90831 8.24804-3.90625 2.34647-2.00055 4.10407-4.69703 4.85352-7.68359 0.7486-2.99036 0.43126-6.23892-0.98828-8.95898-1.00028-1.89419-2.44755-3.44303-3.8711-4.92383-1.41737-1.48527-2.84457-2.94903-3.82422-4.68946-0.49044-0.86925-0.8711-1.80105-1.05859-2.77343-0.18705-0.97166-0.18465-1.98612 0.0742-2.9375 0.25844-0.95027 0.77632-1.84291 1.51953-2.49024 0.74172-0.64664 0.95038 1.93723 2.73242 2.17969 2.52547 0.37017 2.46236-0.70414 3.79102 1.20313 0.13564-0.74058-0.53426-2.35278-0.82422-3.05469-0.55583-1.09145-1.62392-1.39269-2.98828-1.64063-1.0609-0.0336-2.12011 0.361-2.94336 1.03906-0.82218 0.67764-1.4107 1.61797-1.71875 2.63868-0.30783 1.0198-0.34787 2.10858-0.17578 3.15625 0.17173 1.04703 0.54322 2.05308 1.03515 2.98437 0.98514 1.8607 2.40784 3.42182 3.78321 4.94141 1.36912 1.52404 2.72535 3.05366 3.57617 4.82031 1.2277 2.51515 1.41029 5.50271 0.6582 8.18359-0.75157 2.68571-2.4372 5.08497-4.60547 6.83204-2.17065 1.75009-4.84043 2.85875-7.5957 3.32226-2.758 0.46407-5.61607 0.2787-8.34961-0.38281-5.47391-1.31137-10.35427-4.57246-14.67187-8.36328-4.31353-3.80709-8.13624-8.24367-12.37305-12.42383-12.7919-12.6676-29.4215-22.39837-47.79883-24.01563-8.43767-0.71163-17.02413 0.37793-25.07226 3.13086 0.85603-4.26693 1.49034-8.58128 1.86328-12.92773 0.23267-2.75686 0.35736-5.52044 0.38476-8.2832 2.58028-5.17514 6.11688-9.87711 10.44922-13.68555 9.09711-8.10444 21.42517-12.18391 33.83985-14.73828 12.44054-2.51196 25.39616-3.58102 38.07031-6.8125 15.8486-4.02293 31.17525-11.78781 42.02148-24.17383 5.00052-5.72526 8.93351-12.407999 11.3125-19.632812-0.94884 0.101793-1.90084 0.159874-2.85547 0.173828-2.38843 6.427214-6.11458 12.353724-10.71289 17.458984-10.47082 11.6569-25.33328 18.79357-40.67773 22.48242-12.30405 2.94382-25.17582 3.78202-37.99805 6.15235-12.84515 2.32734-25.95747 6.52888-36.31445 15.25976-2.77465 2.36765-5.26748 5.0477-7.45117 7.96094-0.65382-8.68625-2.31438-17.27919-4.94922-25.55469 3.83746-12.88119 9.27184-25.35112 18.09961-35.472655 2.83511-3.256875 6.02668-6.228673 9.57617-8.746094 2.13733-1.517263 4.43785-2.826099 6.75-4.107422-2.41234 1.080937-4.81782 2.19069-7.11524 3.542969-3.80056 2.238502-7.31751 4.985843-10.50781 8.080078-8.43945 8.198914-14.65943 18.457504-19.4414 29.330074-3.8249-9.55779-9.04369-18.55299-15.55664-26.535152 1.69993-9.855336 1.71333-20.007958-0.59376-29.693359-2.1444-8.925151-6.23488-17.240089-11.60742-24.496099-2.1568-2.91341-4.50636-5.6621-6.97851-8.28125-1.93847-2.05372-3.95603-4.01373-5.96094-5.98046-0.73916-0.7252-1.47573-1.45071-2.18164-2.20313-0.51096-0.54531-1.01114-1.09631-1.42578-1.71094-0.14573-0.21621-0.28169-0.43919-0.38086-0.67773-0.0745-0.18037-0.1302-0.36983-0.13086-0.5625-0.00057-0.15954 0.0428-0.32061 0.13281-0.45508 0.10304-0.15469 0.25868-0.27294 0.42578-0.36328zm185 64.572266c0.0842-0.226677 0.15155-0.459593 0.23242-0.6875-1.79204 0.01126-3.58097-0.129256-5.34179-0.44336-4.87675-0.869514-9.53304-2.974519-13.33594-6.107422-3.80268-3.131905-6.75146-7.297615-8.35742-11.923828-1.68711-4.887231-1.8537-10.416526 0.26562-15.017576 1.05359-2.30387 2.6527-4.36291 4.66407-5.84961 2.00855-1.48572 4.44046-2.41327 6.90039-2.5332 2.09532-0.10981 4.22214 0.36161 6.14062 1.25585 1.92071 0.89514 3.64027 2.22905 5.08399 3.81055 2.89801 3.15713 4.6104 7.3158 5.62695 11.589846 1.78716 7.610828 1.33055 15.699359-0.95313 23.175781-0.21006 0.687904-0.45291 1.36545-0.69336 2.042969 0.94699-0.006 1.89428-0.05598 2.8379-0.150391 0.12045-0.383099 0.25763-0.76045 0.36914-1.146484 2.28906-7.926588 2.61034-16.446977 0.60351-24.449219-1.1176-4.508457-3.07415-8.952672-6.31836-12.425782-1.6276-1.73384-3.57827-3.18565-5.76758-4.16992-2.19132-0.98508-4.6193-1.47261-7.03515-1.31445-2.83844 0.19478-5.56496 1.28246-7.79297 2.99414-2.22549 1.71092-3.95012 4.00487-5.05859 6.54882-2.2032 5.090933-1.94439 10.956945-0.0645 16.064458 1.76774 4.826837 4.90992 9.107309 8.90821 12.291015 3.9983 3.182893 8.8266 5.266373 13.8457 6.076172 1.73315 0.279496 3.48881 0.394741 5.24023 0.369141zm3.07032-0.837891c-0.0698 0.221998-0.14208 0.443081-0.21485 0.664063 5.221-0.560119 10.29545-2.426037 14.5625-5.451172 0.26405-0.187256 0.51979-0.386271 0.77735-0.582032 2.93485-1.752641 7.57154-5.120496 9.89453-10.066406 10.72272-27.619548-10.73378-20.949358-2.07227-3.511719 0.95786 1.312252 0.66312 3.03432-0.25781 4.839844-2.21192 3.548084-5.12737 6.649996-8.5625 9.001953-4.18148 2.86388-9.10097 4.602599-14.12695 5.105469zm-355.27149-57.710935c-1.26727 25.52508 29.5238 31.436133 49.19922 37.85156 0 0-6.03557-9.774054-24.42578-21.3418 9.82182 3.22579 25.73514 18.359806 26.49609 18.679691-7.13989-10.896271-1.23202-31.215541-51.26953-35.189451zm216.70508 35.511716c-29.99387 33.664594-10.81987 41.151934-7.33203 51.650394 0.26104-0.65501-0.63028-19.008428 3.41797-26.964847-3.42283 17.945117-0.0508 27.128907-0.0508 27.128907 8.14459-15.91288 23.99529-38.538799 3.96484-51.814454zm-237.83008 7.652344c0.0802-0.0093 0.16509 0.02073 0.25781 0.101562 0.74318 0.647325 1.2591 1.539966 1.51758 2.490235 0.009 0.03151 0.0115 0.06406 0.0195 0.0957-0.69069-0.479265-1.46855-1.455622-1.99414-2.572266 0.0651-0.0592 0.13053-0.107308 0.19922-0.115234zm-48.78515 98.92773c-46.35497 36.78296-29.10938 53.457-29.875 69.14844 0.55804-0.82169 7.44605-26.54357 15.16015-36.23633-11.31366 23.73717-11.64258 37.57227-11.64258 37.57227 15.47951-19.36976 42.0417-45.50837 26.35743-70.48438z" fill-rule="evenodd" fill="#9acd58"/>
  </clipPath>
 </defs>
 <g id="layer1" transform="translate(721.15779,-208.54839)">
  <g id="g21682" transform="matrix(.98711443 0 0 .94960149 1.5888281 7.3514473)">
   <rect id="rect3084" style="color:#000000" transform="matrix(2.4564932,0,0,1,-825.3353,383.57551)" height="355.25986" width="825.69531" y="-171.70038" x="38.638767" fill="url(#linearGradient3860)"/>
   <g id="g20471" transform="matrix(1.2410823,0,0,1,-780.15174,384.38689)">
    <path id="path3862-7-8" d="m729.32082 78.546617c-16.98432 0.450812-38.95162 16.537618-62.49911 30.630333-35.90445 20.53401-94.98842 12.07585-134.74044 8.17359-27.19542-2.66963-46.3772-24.82811-73.63312-26.41779-28.74091-1.67628-62.94736 40.30192-91.47672 44.74334-28.52934 4.44144-81.56694-15.04514-109.52081-23.11412-44.43403-20.361058-83.43588-34.985718-123.65214-17.461595-14.52246 6.547035-16.41527 15.231085-31.61519 19.071555-21.041017 5.31627-43.325819 3.28996-63.531112-5.40778v62.78806l815.17145-4.66474-2.72453-38.06087c-28.75759-20.53039-96.82259-49.858432-120.16835-50.279983-0.53737-0.01863-1.06207-0.01453-1.60993 0z" transform="matrix(1.9786084,0,0,1,-37.825346,0)" fill="#3b6550"/>
    <path id="path3862-7" d="m715.65246 115.07906c-36.74023 23.41818-49.09241 56.11707-133.04353 7.26646s-131.44275-13.48381-166.98073-3.92167-64.38598 5.30899-85.78145-0.8669-20.02297-6.98358-43.30353-17.668183c-23.28056-10.684602-67.42448-8.569074-89.7444 1.444833-22.31992 10.01391-22.5062 12.39085-44.04657 17.83331s-61.542926 2.45693-86.060842-14.73742v72.24154l798.66852-4.54089v-75.750235c-71.1724-46.352077-112.96725-4.719023-149.70747 18.699155z" transform="matrix(1.9786084,0,0,1,-37.825346,0)" fill="#597138"/>
    <path id="path3862" d="m133.84226 115.57062c-33.23032 0.12604-65.792817-24.939024-95.190082-9.36588v76.49029l826.70775 0.05307v-76.44986c-24.56465 17.19433-69.77149 21.89458-97.70545 14.85013-15.22893-3.84048-29.62181-11.28626-44.17194-17.83329-14.55011-6.547025-29.67524-12.283125-45.24727-12.508075-15.30136-0.22104-30.28348 4.90736-44.66825 11.063255-14.38474 6.15589-28.47938 13.38539-43.34473 17.66816-28.00718 8.06899-57.40263 5.30833-85.98638 0.86691-28.58375-4.44143-57.23202-10.51038-86.02773-8.83409-27.30789 1.58967-54.02411 10.08611-81.27139 12.75576-39.82783 3.90225-80.4954-5.01879-116.46831-25.552803-26.42965-11.725406-58.39121 16.895163-86.62622 16.796423z" transform="matrix(1.9786084,0,0,1,-37.825346,0)" fill="#499841"/>
   </g>
  </g>
  <rect id="baseframe" opacity=".1" style="color:#000000" height="337.35529" width="2002.179" y="208.54839" x="-720.28827" stroke-width="0" fill="none"/>
 </g>
 <g id="layer3" transform="translate(-1.1524484,10.725312)">
  <g id="g11790" transform="translate(-869.77401,341.06265)">
   <path id="path5989" style="color-rendering:auto;color:#000000;isolation:auto;mix-blend-mode:normal;shape-rendering:auto;solid-color:#000000;image-rendering:auto" d="m28.792214 715.74914c5.86564-1.2151-1.966711-0.75556-4.907853-7.14327 3.776674 0.12001-10.4183-2.33828-20.419299-2.82976-2.0781524 6.57811-5.6037006 2.27784 3.334791 3.44958 7.234681 5.92714 2.7261521 6.5412-4.8349512 12.35259 6.6358794 7.64485-1.2211266 17.30038 5.2071842 17.68583 4.215408-1.28805 13.844662-3.28342 11.10051 2.71563 4.751908-2.59961-12.56181 3.54151-0.722126 2.71788 7.368258-3.35024 22.649888 3.00247 19.182966-1.02571-6.959805 0.68558 16.767732 0.39287 12.072995-3.55225 10.117345-2.96918 9.167616-5.55354 2.625691-4.26836-3.883708-0.33193-3.986153-8.47478 2.949122-3.21464-5.43556 1.65563 6.478128 7.04596 12.960214 12.67877 13.467233 0.9436 6.460842-2.41679 20.157724-8.0985 7.96873 2.83651 14.499478-1.68319 19.932698 6.39932-4.02178-1.25984 20.77855 9.02182 21.75455 6.00046-4.23686 1.00318-11.46731 1.20903-1.35376 1.1728-6.04421 0.11303-3.66403-8.16135 2.92804-6.7385 8.56379-4.01759 4.97606-6.96066 10.29233-11.61605 5.28452-4.94786-8.41587-0.59495-8.01493-5.41533-7.10794 3.05643 7.85641-3.94516-1.84638-12.1858 0.17199-0.77911-12.04824-6.88386-6.38276-7.83821-4.21216-7.34837 2.52621-12.31111-3.76846-11.15047-8.2586-6.25637-8.79637-10.16515-12.84259-3.0807-7.26251 6.47955-9.707634 14.07848-5.18919 11.47336 2.02072 6.39867-0.4553-2.31345-13.17997-3.59502-1.770678 2.10542-30.507887 0.80292-25.469786-0.21848-11.665255-2.08587-7.85912 2.77091-19.654773-0.44271-6.306399 5.00726-1.643885-6.40877-1.772646 0.52146 1.664421 6.39222-4.136966-2.64677-10.443392 1.76792-7.122944-0.17863 5.718366 10.12853-5.43062 13.48037-7.176113-1.54771-0.299222-8.72912-6.451778-5.96996" transform="translate(49.0625,-161.88959)" filter="url(#filter6707)" fill="#fff"/>
   <path id="path6013" style="color-rendering:auto;color:#000000;isolation:auto;mix-blend-mode:normal;shape-rendering:auto;solid-color:#000000;image-rendering:auto" d="m80.644531 541.13086 3.53711 2.57617c1.370709 1.00338 2.511373 2.28788 3.345703 3.76758 0.467459 0.15972 0.935644 0.31801 1.421875 0.41211 1.144536-1.64233 1.982271-3.45781 2.148437-4.73047 0.583958-4.47251-0.261515-3.52081 0.195313-2.1543 0.416925 1.24715 1.235957 3.54321 1.378906 6.95508 1.216725-0.12211 2.44943-0.27817 3.300781-0.63672 1.885287-0.79399 2.833589-1.65511 3.529297-2.37304l1.804687-3.5c-0.31543-1.31517-0.49371-2.72817-0.3125-4.16407 0.12089-0.95797 0.50742-1.64335 0.80078-2.4375-0.0147-0.0405-0.0123-0.0585-0.0273-0.0996-7.357094 5.14547-14.966267 4.47265-21.123089 6.38476zm27.423829 8.66016c-0.16919 0.0557-0.20251 0.15485-1.22461 0.43945-1.55957 0.43426-4.8144 0.75342-8.689453 0.52539-2.086909 1.24553-4.312203 1.96247-5.880859 2.0332-0.09249 0.004-0.102055-0.0186-0.191407-0.0156-0.968416 3.35222-2.965315 6.96994-5.873047 9.17383-0.883988 0.66519-1.856191 1.2042-2.888672 1.60156-0.490566 0.30158-1.00232 0.56724-1.53125 0.79492 1.742988-0.73462 0.561727 0.10275-2.234374 0.94336-1.931855 0.58056-3.979363 0.66187-5.951172 0.23633-2.125158-0.45835-4.489713-1.49822-6.601563-3.00977-0.47568 0.55494-1.00418 1.27996-1.439453 1.70703 2.435994 0.0608 5.43193 0.29794 9.216797 3.50586 0.653729 0.55408 1.18106 1.40162 1.757812 2.15625 1.856574 0.24863 3.579857 0.55172 5.015625 0.76563 0.377908 0.0563 0.245274 0.0393 0.59961 0.0879 1.178824-0.39699 2.412474-0.60721 3.65625-0.62305 0.03869-0.00033 0.176031-0.0205 0.220703-0.0215 0.07489-1.97632 0.449686-4.06216 1.771484-6.33203 2.128659-3.65546 7.239118-6.56872 11.330078-6.69922 5.457431-0.17416 8.620421 1.98128 11.521481 4.18164 2.053 1.56401 3.54355 3.75151 4.24805 6.23437 1.56829 1.05338 3.25258 2.3546 5.39844 3.94922 1.79271-1.57167 5.40792-4.51069 11.6914-7.11719 2.73135-1.13327 5.78622-1.21192 8.57227-0.2207 1.12805 0.40154 2.83536 0.22266 7.76172 0.57227 4.02634 0.28573 10.41004 2.68393 15.11914 7.18164 0.7461 0.30527 1.26488 0.53159 2.31641 0.93164 0.78084 0.29706 1.45477 0.43827 2.33398 0.74804 0.70156-0.50118 1.50311-0.84188 2.2832-1.23828-1.10615-1.7381-1.96458-3.61209-2.13281-5.21484-0.26003-2.47729 0.21127-4.04469 0.56836-5.10156 0.44095-1.3051 0.69504-1.49201 1.00586-1.9668-0.67958-0.46131-1.16922-0.7626-1.9707-1.36328-1.60596-1.2036-3.47546-1.55866-5.97461-6.62891-1.13602 1.4387-2.62291 2.80785-4.50391 3.61719-3.96578 1.70637-7.00051 0.87108-8.52344 0.36914s-2.18679-0.94934-2.69336-1.26562c-1.01313-0.63257-1.28862-0.90973-1.55468-1.12696-0.53214-0.43445-0.71301-0.59615-0.96094-0.79101-0.76817-0.60376-2.02666-1.27499-4.13477-1.75977-0.11135 0.0202-0.27313 0.0767-0.38281 0.0957-1.73825 0.30133-3.30285 0.42365-5.00586 0.51758-3.40601 0.18786-7.21475 0.18005-10.8457 0.0781-3.63095-0.10192-6.92249-0.28273-9.61133-0.59375-1.34442-0.15551-1.43238 0.39506-5.28906-1.22852-0.0734-0.0309-0.21798-0.10004-0.29883-0.1289zm60.26562 2.98242c-0.008 0.29892-0.00042 0.57149 0.0137 0.84961-0.0146-0.28295-0.0192-0.56633-0.0137-0.84961zm0.11133 1.77929c0.06 0.43027 0.11977 0.78663 0.2168 1.15821-0.0913-0.38226-0.16365-0.76881-0.2168-1.15821zm-56.53515 10.77344c0.0794 0.0861 0.15754 0.17333 0.23437 0.26172 0.12689 0.0979 0.49367 0.33154 0.64844 0.44336-0.50292-0.74189-0.91861-0.74112-0.88281-0.70508zm-28.451176 5.54297c-0.02987 0.004-0.08635 0.0366-0.117187 0.041 0.709346 0.0921 2.16344 0.27223 1.798828 0.26367-0.181808-0.004-0.636162-0.42878-1.681641-0.30469z" transform="translate(4.193759,6.9895984)" filter="url(#filter10497)" fill="#dcdcdc"/>
  </g>
  <g id="g19980" transform="matrix(1.1013442 -.13504793 .10990794 1.1021931 -217.42343 325.28307)">
   <path id="path11867" style="color-rendering:auto;color:#000000;isolation:auto;mix-blend-mode:normal;shape-rendering:auto;solid-color:#000000;image-rendering:auto" d="m71.230953 732.52062c3.281637-1.43991 1.002025-3.3504 4.337776-4.86658-0.775201-1.48952 1.085526-0.60868 0.718477-1.1941 3.882545-0.0265 6.620485 0.22101 9.550233-0.33611 3.075403 2.52182 4.682432 1.72616 3.735758 1.72038 4.993139 1.24042 3.049682 4.37971 9.183617 3.2523 4.868826 0.88231 10.571526-0.35901 13.028956-0.96647 0.79908-1.38804 1.42202-3.49812 1.36444-0.94743-0.99152 1.86278 2.73405 1.73147 1.68501 2.74982-0.0002 2.10239 7.16169-2.57765 10.2494-1.68066 3.62285-2.61933 7.66052-3.00711 11.8613 1.42165 1.3506 2.64147 2.86242 5.98134 6.06733 8.63393 1.61813 5.56623 3.4474 11.62717 0.23673 12.11749-2.82047 0.003-0.78136 0.54777-3.02616-0.80712-2.15843 1.79452-4.09282 1.37042-6.39508 1.7296-1.77742 0.17467 0.6182 5.32037 2.50696 9.10828 2.27193 2.56665-0.0706 4.56808-1.72433 5.53708-1.88031 3.61442-1.12621 10.56399-4.16061 9.31562-1.43079 1.15423-13.38387 0.26827-14.00454-0.9249-7.88997-2.53262-12.84962-4.63761-12.5599-3.16496 0.68398 2.36853-2.60488 5.21037-4.437729 5.75117-2.550069-1.76791-5.996269 4.29138-12.020011 1.598-5.771781-2.75238-8.959256-1.74536-13.684155-5.08199-1.157705-0.97935-9.047581-5.26277-14.313756-3.20775-6.220844 1.41068-8.685133 4.21868-14.090273 2.25772-6.035881-1.20885-0.31632-5.59794-4.376467-9.46668-0.674443-4.78362-2.675691-3.51583-6.946512-6.23439 1.262054 0.96686-7.901311-3.02611-13.572822-7.32088-6.532506-0.94718-7.426096-2.88658-0.344618-11.03522 4.892073-2.68583 8.191671 0.53145 9.991477 3.76444 6.053579 3.14401 6.579055 5.7221 11.934309 1.01789 1.984002-0.51059-1.022115-8.37762 0.553705-12.42911 0.860344-5.32718-5.510397-4.13511-4.320767-6.68099 2.066452-0.99021 9.439457 0.73929 15.359757 0.5756 8.049319 2.29468 14.024386 1.98918 14.569782 3.22886-1.385633 1.39811 2.260709 1.14221 2.020062-0.64699" transform="translate(49.0625,-159.09375)" filter="url(#filter17752)" fill="#fff"/>
   <path id="path11869" style="color-rendering:auto;color:#000000;isolation:auto;mix-blend-mode:normal;shape-rendering:auto;solid-color:#000000;image-rendering:auto" d="m131.88086 581.52148c-0.0746 0.002-0.17417 0.0214-0.24805 0.0234-1.69269 2.02671-3.63068 3.9987-5.63672 4.87891-4.10242 1.79395-8.81079 1.54709-12.70312-0.66602-1.18459-0.37197-2.52226-1.16415-4-2.29883-1.04787-0.15287-2.06642-0.29351-3.45313-0.54687 0.0489 0.71009 0.16434 1.00026 0.13868 2.02344-0.034 1.35406-0.0114 3.11366-1.2168 6.07226-0.57963 1.42267-1.83491 3.23924-3.5 4.88672 0.0678 0.10846 0.1799 0.18719 0.24414 0.29688 0.77869 1.32951 1.26481 2.58425 1.65039 3.78906 0.77748-0.21945 1.30166-0.43514 2.19922-0.63867l-2.02149 0.61914c7.98097-3.11441 14.01863-1.2355 18.39649 0.24218 2.18893 0.73885 4.02953 1.56425 5.5918 2.36915 1.56226 0.80489 2.18898 0.90216 4.65039 2.98437l-0.97852-0.75781c0.58465 0.41287-0.0838 0.15142 1.59375 0.55664 1.22868 0.29679 3.8383 1.00521 6.78516 2.08203 0.61582-0.33046 0.71807-0.48599 2.20898-1.02344 1.04485-1.89331 2.27576-3.63193 3.87891-4.65234 4.68828-2.98411 7.3507-2.37999 8.98828-2.29102 3.27515 0.17795 4.33751 0.70309 5.79883 1.14258 2.92264 0.87898 5.91795 1.98096 9.59765 3.16211 0.10134 0.0366 0.20226 0.0744 0.30274 0.11328-0.27137-0.67336-0.54101-1.06912-0.79883-1.81836-0.54051-1.57074-1.2479-3.069-1.27539-6.74609-0.0137-1.83855 0.037-4.60921 2.23242-8.19531 0.13476-0.22012 0.37062-0.4114 0.52734-0.62696-0.77485 0.26143-1.77617 0.538-3.26367 0.80469-1.50091 0.26909-3.65038 1.05941-8.30273-0.66992-0.31222-0.11606-0.61477-0.44562-0.92774-0.61328-2.83736 0.46973-6.1497 0.6484-10.27734 0.21484-1.9345 0.22121-3.98007 0.30717-6.4082-0.18945-3.23408-0.66146-6.40452-2.66743-7.91016-3.91602-0.62837-0.18719-1.26494-0.36353-1.86328-0.61133z" transform="matrix(1.1552699,0,0,1.1189673,-22.774156,-61.02793)" filter="url(#filter20024)" fill="#dcdcdc"/>
  </g>
  <g id="g10504" transform="translate(-719.80092,814.98229)">
   <path id="path3986" style="color-rendering:auto;color:#000000;isolation:auto;mix-blend-mode:normal;shape-rendering:auto;solid-color:#000000;image-rendering:auto" d="m687.5916 943.23912c58.2165-86.39398 13.57497 30.62044 67.93437-18.62171 9.83162-1.84895 0.64902 58.70103 16.90319 59.78066 36.55683 23.94563 69.08123 12.15443 95.86953 28.81183 14.22045 11.8272 34.09099-27.13572 44.25995-16.75033 19.69423-11.19058 46.86418 3.38052 73.52175-6.93593 19.69191-12.39345 3.40207-18.15287 23.28751-31.85966 36.9903-19.35848 105.2571 38.35228 141.1463-1.88819 27.9079-30.40834 26.6571-82.94071 35.613-70.03297 32.4832 33.51159 202.1851 40.82515 176.3994 2.03846-53.4352-56.8465-138.0063-75.00881-153.4301-90.93305-60.9168-49.20975-184.6689-24.24572-259.94917-37.21908-38.03236 0.0407-17.30086 20.95964-49.02103 11.78482-7.18505-12.77576-53.38057-15.32465-63.63197-3.43224-5.85105 18.47837 9.47406 6.19506 8.7777 3.65578-19.61231 17.36001-60.41076 17.126-67.39513 26.73752-8.86974-1.13443 50.64661 29.16014 26.18938 29.61363-37.69691 30.20355-152.83862 1.62915-167.68861 7.30229-27.98409 31.26715-108.67664 12.78106-83.68815 24.68931 11.08726-6.75877-216.26135-0.85456-175.2857 28.46276 162.63678 100.9424 164.21351-56.84464 312.50831 56.83639-4.71983 8.02019 1.07268-2.63977 2.49784 8.40163" transform="matrix(.30980786 0 0 .33175961 1173.3626 -195.33424)" filter="url(#filter10393)" fill="#fff"/>
   <path id="path9522" style="color-rendering:auto;color:#000000;isolation:auto;mix-blend-mode:normal;shape-rendering:auto;solid-color:#000000;image-rendering:auto" d="m866.4668 803.90625c0.0203-0.0172 0.05-0.053 0.0703-0.0703-6.46304-8.27556-6.1558-5.987-0.0703 0.0703zm83.03906 2.94141c-5.90063 4.73297-14.19408 10.19416-23.82617 12.27343-16.36135 3.53191-27.35757 0.41077-38.53516-2.82226-5.62435-1.64224-10.88969-4.32759-15.52148-7.91602-3.61239 4.14224-7.92721 7.61473-12.7461 10.25781-0.88532 0.48232-1.69664 0.7636-2.57226 1.21485 0.91955 10.915-2.53513 26.74628-10.93164 36.74023-10.20183 12.14272-19.00064 16.2326-26.24219 17.58789-11.37389 6.72369-22.80984 10.91056-34.16211 13.30274 9.09917 6.72181 13.01763 13.68232 15.44141 18.65625 4.96144 10.18157 5.17594 15.39685 5.87304 20.2793 1.39421 9.76488 1.48286 17.27735 1.91407 23.99609 0.002 0.0236 0.002 0.0174 0.004 0.041 6.09534 2.33951 12.51422 3.50517 21.96485 4.75782 9.92858 1.31599 23.92733 2.2902 39.61914 7.52539 2.66686-2.08536 5.86225-4.36858 10.39453-6.95703 5.55907-3.17488 13.6194-7.39569 26.67773-7.80469 0.41153-0.0129 0.85643 0.0433 1.27539 0.0449 17.59965-4.92406 32.62921-2.67206 42.10938-1.95312 3.66596 0.27801 5.45459 0.22862 7.91797 0.29296 0.58795-1.17375 1.05636-2.32809 1.75195-3.50195 5.87938-9.92191 14.25289-17.68373 22.9375-23.66992 1.55647-1.07316 3.17664-2.05087 4.85156-2.92774 22.92893-11.9996 45.20353-10.32977 62.07813-7.47265s30.9024 7.48876 42.6094 10.60937c11.7069 3.12062 20.8378 4.39071 23.9941 4.2461 0.049-0.002 0.027 0.0112 0.072 0.01 4.5947-5.34787 10.2164-18.32325 13.9824-31.75586 1.9312-6.88809 2.3485-12.04644 7.5078-23.76562 2.5797-5.85959 3.6508-20.73564 31.9258-29.13086 4.6504-1.38076 9.6436-1.75432 14.5644-1.52734-1.7253-1.38963-3.5277-2.97684-5.3984-4.7461-15.7544-12.1821-51.6151-19.96459-96.0215-21.38281-42.3509-1.35258-89.12053 1.83425-133.50974-4.50195zm-77.19531 1.05078c0.85263 0.20326 1.40794 0.20958 1.39453 0.20508-0.01-0.003-1.13244-0.14758-1.39453-0.20508z" transform="matrix(.40571132 0 0 .3125656 1079.6688 -163.15297)" filter="url(#filter10469)" fill="#dcdcdc"/>
  </g>
  <rect id="clouds_1" opacity=".1" style="color:#000000" height="333.43729" width="2e3" stroke="#000" y="819.35883" x="-908.40369" stroke-width="3.9180002" fill="none"/>
  <rect id="clouds_2" opacity=".1" style="color:#000000" height="333.43729" width="2e3" stroke="#000" y="819.35883" x="-889.40369" stroke-width="3.9180002" fill="none"/>
  <g id="g10510" transform="translate(1130.226,341.06265)">
   <path id="path10512" style="color-rendering:auto;color:#000000;isolation:auto;mix-blend-mode:normal;shape-rendering:auto;solid-color:#000000;image-rendering:auto" d="m28.792214 715.74914c5.86564-1.2151-1.966711-0.75556-4.907853-7.14327 3.776674 0.12001-10.4183-2.33828-20.419299-2.82976-2.0781524 6.57811-5.6037006 2.27784 3.334791 3.44958 7.234681 5.92714 2.7261521 6.5412-4.8349512 12.35259 6.6358794 7.64485-1.2211266 17.30038 5.2071842 17.68583 4.215408-1.28805 13.844662-3.28342 11.10051 2.71563 4.751908-2.59961-12.56181 3.54151-0.722126 2.71788 7.368258-3.35024 22.649888 3.00247 19.182966-1.02571-6.959805 0.68558 16.767732 0.39287 12.072995-3.55225 10.117345-2.96918 9.167616-5.55354 2.625691-4.26836-3.883708-0.33193-3.986153-8.47478 2.949122-3.21464-5.43556 1.65563 6.478128 7.04596 12.960214 12.67877 13.467233 0.9436 6.460842-2.41679 20.157724-8.0985 7.96873 2.83651 14.499478-1.68319 19.932698 6.39932-4.02178-1.25984 20.77855 9.02182 21.75455 6.00046-4.23686 1.00318-11.46731 1.20903-1.35376 1.1728-6.04421 0.11303-3.66403-8.16135 2.92804-6.7385 8.56379-4.01759 4.97606-6.96066 10.29233-11.61605 5.28452-4.94786-8.41587-0.59495-8.01493-5.41533-7.10794 3.05643 7.85641-3.94516-1.84638-12.1858 0.17199-0.77911-12.04824-6.88386-6.38276-7.83821-4.21216-7.34837 2.52621-12.31111-3.76846-11.15047-8.2586-6.25637-8.79637-10.16515-12.84259-3.0807-7.26251 6.47955-9.707634 14.07848-5.18919 11.47336 2.02072 6.39867-0.4553-2.31345-13.17997-3.59502-1.770678 2.10542-30.507887 0.80292-25.469786-0.21848-11.665255-2.08587-7.85912 2.77091-19.654773-0.44271-6.306399 5.00726-1.643885-6.40877-1.772646 0.52146 1.664421 6.39222-4.136966-2.64677-10.443392 1.76792-7.122944-0.17863 5.718366 10.12853-5.43062 13.48037-7.176113-1.54771-0.299222-8.72912-6.451778-5.96996" transform="translate(49.0625,-161.88959)" filter="url(#filter6707)" fill="#fff"/>
   <path id="path10514" style="color-rendering:auto;color:#000000;isolation:auto;mix-blend-mode:normal;shape-rendering:auto;solid-color:#000000;image-rendering:auto" d="m80.644531 541.13086 3.53711 2.57617c1.370709 1.00338 2.511373 2.28788 3.345703 3.76758 0.467459 0.15972 0.935644 0.31801 1.421875 0.41211 1.144536-1.64233 1.982271-3.45781 2.148437-4.73047 0.583958-4.47251-0.261515-3.52081 0.195313-2.1543 0.416925 1.24715 1.235957 3.54321 1.378906 6.95508 1.216725-0.12211 2.44943-0.27817 3.300781-0.63672 1.885287-0.79399 2.833589-1.65511 3.529297-2.37304l1.804687-3.5c-0.31543-1.31517-0.49371-2.72817-0.3125-4.16407 0.12089-0.95797 0.50742-1.64335 0.80078-2.4375-0.0147-0.0405-0.0123-0.0585-0.0273-0.0996-7.357094 5.14547-14.966267 4.47265-21.123089 6.38476zm27.423829 8.66016c-0.16919 0.0557-0.20251 0.15485-1.22461 0.43945-1.55957 0.43426-4.8144 0.75342-8.689453 0.52539-2.086909 1.24553-4.312203 1.96247-5.880859 2.0332-0.09249 0.004-0.102055-0.0186-0.191407-0.0156-0.968416 3.35222-2.965315 6.96994-5.873047 9.17383-0.883988 0.66519-1.856191 1.2042-2.888672 1.60156-0.490566 0.30158-1.00232 0.56724-1.53125 0.79492 1.742988-0.73462 0.561727 0.10275-2.234374 0.94336-1.931855 0.58056-3.979363 0.66187-5.951172 0.23633-2.125158-0.45835-4.489713-1.49822-6.601563-3.00977-0.47568 0.55494-1.00418 1.27996-1.439453 1.70703 2.435994 0.0608 5.43193 0.29794 9.216797 3.50586 0.653729 0.55408 1.18106 1.40162 1.757812 2.15625 1.856574 0.24863 3.579857 0.55172 5.015625 0.76563 0.377908 0.0563 0.245274 0.0393 0.59961 0.0879 1.178824-0.39699 2.412474-0.60721 3.65625-0.62305 0.03869-0.00033 0.176031-0.0205 0.220703-0.0215 0.07489-1.97632 0.449686-4.06216 1.771484-6.33203 2.128659-3.65546 7.239118-6.56872 11.330078-6.69922 5.457431-0.17416 8.620421 1.98128 11.521481 4.18164 2.053 1.56401 3.54355 3.75151 4.24805 6.23437 1.56829 1.05338 3.25258 2.3546 5.39844 3.94922 1.79271-1.57167 5.40792-4.51069 11.6914-7.11719 2.73135-1.13327 5.78622-1.21192 8.57227-0.2207 1.12805 0.40154 2.83536 0.22266 7.76172 0.57227 4.02634 0.28573 10.41004 2.68393 15.11914 7.18164 0.7461 0.30527 1.26488 0.53159 2.31641 0.93164 0.78084 0.29706 1.45477 0.43827 2.33398 0.74804 0.70156-0.50118 1.50311-0.84188 2.2832-1.23828-1.10615-1.7381-1.96458-3.61209-2.13281-5.21484-0.26003-2.47729 0.21127-4.04469 0.56836-5.10156 0.44095-1.3051 0.69504-1.49201 1.00586-1.9668-0.67958-0.46131-1.16922-0.7626-1.9707-1.36328-1.60596-1.2036-3.47546-1.55866-5.97461-6.62891-1.13602 1.4387-2.62291 2.80785-4.50391 3.61719-3.96578 1.70637-7.00051 0.87108-8.52344 0.36914s-2.18679-0.94934-2.69336-1.26562c-1.01313-0.63257-1.28862-0.90973-1.55468-1.12696-0.53214-0.43445-0.71301-0.59615-0.96094-0.79101-0.76817-0.60376-2.02666-1.27499-4.13477-1.75977-0.11135 0.0202-0.27313 0.0767-0.38281 0.0957-1.73825 0.30133-3.30285 0.42365-5.00586 0.51758-3.40601 0.18786-7.21475 0.18005-10.8457 0.0781-3.63095-0.10192-6.92249-0.28273-9.61133-0.59375-1.34442-0.15551-1.43238 0.39506-5.28906-1.22852-0.0734-0.0309-0.21798-0.10004-0.29883-0.1289zm60.26562 2.98242c-0.008 0.29892-0.00042 0.57149 0.0137 0.84961-0.0146-0.28295-0.0192-0.56633-0.0137-0.84961zm0.11133 1.77929c0.06 0.43027 0.11977 0.78663 0.2168 1.15821-0.0913-0.38226-0.16365-0.76881-0.2168-1.15821zm-56.53515 10.77344c0.0794 0.0861 0.15754 0.17333 0.23437 0.26172 0.12689 0.0979 0.49367 0.33154 0.64844 0.44336-0.50292-0.74189-0.91861-0.74112-0.88281-0.70508zm-28.451176 5.54297c-0.02987 0.004-0.08635 0.0366-0.117187 0.041 0.709346 0.0921 2.16344 0.27223 1.798828 0.26367-0.181808-0.004-0.636162-0.42878-1.681641-0.30469z" transform="translate(4.193759,6.9895984)" filter="url(#filter10497)" fill="#dcdcdc"/>
  </g>
  <g id="g10516" transform="matrix(1.1013442 -.13504793 .10990794 1.1021931 1782.5766 325.28307)">
   <path id="path10518" style="color-rendering:auto;color:#000000;isolation:auto;mix-blend-mode:normal;shape-rendering:auto;solid-color:#000000;image-rendering:auto" d="m71.230953 732.52062c3.281637-1.43991 1.002025-3.3504 4.337776-4.86658-0.775201-1.48952 1.085526-0.60868 0.718477-1.1941 3.882545-0.0265 6.620485 0.22101 9.550233-0.33611 3.075403 2.52182 4.682432 1.72616 3.735758 1.72038 4.993139 1.24042 3.049682 4.37971 9.183617 3.2523 4.868826 0.88231 10.571526-0.35901 13.028956-0.96647 0.79908-1.38804 1.42202-3.49812 1.36444-0.94743-0.99152 1.86278 2.73405 1.73147 1.68501 2.74982-0.0002 2.10239 7.16169-2.57765 10.2494-1.68066 3.62285-2.61933 7.66052-3.00711 11.8613 1.42165 1.3506 2.64147 2.86242 5.98134 6.06733 8.63393 1.61813 5.56623 3.4474 11.62717 0.23673 12.11749-2.82047 0.003-0.78136 0.54777-3.02616-0.80712-2.15843 1.79452-4.09282 1.37042-6.39508 1.7296-1.77742 0.17467 0.6182 5.32037 2.50696 9.10828 2.27193 2.56665-0.0706 4.56808-1.72433 5.53708-1.88031 3.61442-1.12621 10.56399-4.16061 9.31562-1.43079 1.15423-13.38387 0.26827-14.00454-0.9249-7.88997-2.53262-12.84962-4.63761-12.5599-3.16496 0.68398 2.36853-2.60488 5.21037-4.437729 5.75117-2.550069-1.76791-5.996269 4.29138-12.020011 1.598-5.771781-2.75238-8.959256-1.74536-13.684155-5.08199-1.157705-0.97935-9.047581-5.26277-14.313756-3.20775-6.220844 1.41068-8.685133 4.21868-14.090273 2.25772-6.035881-1.20885-0.31632-5.59794-4.376467-9.46668-0.674443-4.78362-2.675691-3.51583-6.946512-6.23439 1.262054 0.96686-7.901311-3.02611-13.572822-7.32088-6.532506-0.94718-7.426096-2.88658-0.344618-11.03522 4.892073-2.68583 8.191671 0.53145 9.991477 3.76444 6.053579 3.14401 6.579055 5.7221 11.934309 1.01789 1.984002-0.51059-1.022115-8.37762 0.553705-12.42911 0.860344-5.32718-5.510397-4.13511-4.320767-6.68099 2.066452-0.99021 9.439457 0.73929 15.359757 0.5756 8.049319 2.29468 14.024386 1.98918 14.569782 3.22886-1.385633 1.39811 2.260709 1.14221 2.020062-0.64699" transform="translate(49.0625,-159.09375)" filter="url(#filter17752)" fill="#fff"/>
   <path id="path10520" style="color-rendering:auto;color:#000000;isolation:auto;mix-blend-mode:normal;shape-rendering:auto;solid-color:#000000;image-rendering:auto" d="m131.88086 581.52148c-0.0746 0.002-0.17417 0.0214-0.24805 0.0234-1.69269 2.02671-3.63068 3.9987-5.63672 4.87891-4.10242 1.79395-8.81079 1.54709-12.70312-0.66602-1.18459-0.37197-2.52226-1.16415-4-2.29883-1.04787-0.15287-2.06642-0.29351-3.45313-0.54687 0.0489 0.71009 0.16434 1.00026 0.13868 2.02344-0.034 1.35406-0.0114 3.11366-1.2168 6.07226-0.57963 1.42267-1.83491 3.23924-3.5 4.88672 0.0678 0.10846 0.1799 0.18719 0.24414 0.29688 0.77869 1.32951 1.26481 2.58425 1.65039 3.78906 0.77748-0.21945 1.30166-0.43514 2.19922-0.63867l-2.02149 0.61914c7.98097-3.11441 14.01863-1.2355 18.39649 0.24218 2.18893 0.73885 4.02953 1.56425 5.5918 2.36915 1.56226 0.80489 2.18898 0.90216 4.65039 2.98437l-0.97852-0.75781c0.58465 0.41287-0.0838 0.15142 1.59375 0.55664 1.22868 0.29679 3.8383 1.00521 6.78516 2.08203 0.61582-0.33046 0.71807-0.48599 2.20898-1.02344 1.04485-1.89331 2.27576-3.63193 3.87891-4.65234 4.68828-2.98411 7.3507-2.37999 8.98828-2.29102 3.27515 0.17795 4.33751 0.70309 5.79883 1.14258 2.92264 0.87898 5.91795 1.98096 9.59765 3.16211 0.10134 0.0366 0.20226 0.0744 0.30274 0.11328-0.27137-0.67336-0.54101-1.06912-0.79883-1.81836-0.54051-1.57074-1.2479-3.069-1.27539-6.74609-0.0137-1.83855 0.037-4.60921 2.23242-8.19531 0.13476-0.22012 0.37062-0.4114 0.52734-0.62696-0.77485 0.26143-1.77617 0.538-3.26367 0.80469-1.50091 0.26909-3.65038 1.05941-8.30273-0.66992-0.31222-0.11606-0.61477-0.44562-0.92774-0.61328-2.83736 0.46973-6.1497 0.6484-10.27734 0.21484-1.9345 0.22121-3.98007 0.30717-6.4082-0.18945-3.23408-0.66146-6.40452-2.66743-7.91016-3.91602-0.62837-0.18719-1.26494-0.36353-1.86328-0.61133z" transform="matrix(1.1552699,0,0,1.1189673,-22.774156,-61.02793)" filter="url(#filter20024)" fill="#dcdcdc"/>
  </g>
  <g id="g10522" transform="translate(1280.1991,814.98229)">
   <path id="path10524" style="color-rendering:auto;color:#000000;isolation:auto;mix-blend-mode:normal;shape-rendering:auto;solid-color:#000000;image-rendering:auto" d="m687.5916 943.23912c58.2165-86.39398 13.57497 30.62044 67.93437-18.62171 9.83162-1.84895 0.64902 58.70103 16.90319 59.78066 36.55683 23.94563 69.08123 12.15443 95.86953 28.81183 14.22045 11.8272 34.09099-27.13572 44.25995-16.75033 19.69423-11.19058 46.86418 3.38052 73.52175-6.93593 19.69191-12.39345 3.40207-18.15287 23.28751-31.85966 36.9903-19.35848 105.2571 38.35228 141.1463-1.88819 27.9079-30.40834 26.6571-82.94071 35.613-70.03297 32.4832 33.51159 202.1851 40.82515 176.3994 2.03846-53.4352-56.8465-138.0063-75.00881-153.4301-90.93305-60.9168-49.20975-184.6689-24.24572-259.94917-37.21908-38.03236 0.0407-17.30086 20.95964-49.02103 11.78482-7.18505-12.77576-53.38057-15.32465-63.63197-3.43224-5.85105 18.47837 9.47406 6.19506 8.7777 3.65578-19.61231 17.36001-60.41076 17.126-67.39513 26.73752-8.86974-1.13443 50.64661 29.16014 26.18938 29.61363-37.69691 30.20355-152.83862 1.62915-167.68861 7.30229-27.98409 31.26715-108.67664 12.78106-83.68815 24.68931 11.08726-6.75877-216.26135-0.85456-175.2857 28.46276 162.63678 100.9424 164.21351-56.84464 312.50831 56.83639-4.71983 8.02019 1.07268-2.63977 2.49784 8.40163" transform="matrix(.30980786 0 0 .33175961 1173.3626 -195.33424)" filter="url(#filter10393)" fill="#fff"/>
   <path id="path10526" style="color-rendering:auto;color:#000000;isolation:auto;mix-blend-mode:normal;shape-rendering:auto;solid-color:#000000;image-rendering:auto" d="m866.4668 803.90625c0.0203-0.0172 0.05-0.053 0.0703-0.0703-6.46304-8.27556-6.1558-5.987-0.0703 0.0703zm83.03906 2.94141c-5.90063 4.73297-14.19408 10.19416-23.82617 12.27343-16.36135 3.53191-27.35757 0.41077-38.53516-2.82226-5.62435-1.64224-10.88969-4.32759-15.52148-7.91602-3.61239 4.14224-7.92721 7.61473-12.7461 10.25781-0.88532 0.48232-1.69664 0.7636-2.57226 1.21485 0.91955 10.915-2.53513 26.74628-10.93164 36.74023-10.20183 12.14272-19.00064 16.2326-26.24219 17.58789-11.37389 6.72369-22.80984 10.91056-34.16211 13.30274 9.09917 6.72181 13.01763 13.68232 15.44141 18.65625 4.96144 10.18157 5.17594 15.39685 5.87304 20.2793 1.39421 9.76488 1.48286 17.27735 1.91407 23.99609 0.002 0.0236 0.002 0.0174 0.004 0.041 6.09534 2.33951 12.51422 3.50517 21.96485 4.75782 9.92858 1.31599 23.92733 2.2902 39.61914 7.52539 2.66686-2.08536 5.86225-4.36858 10.39453-6.95703 5.55907-3.17488 13.6194-7.39569 26.67773-7.80469 0.41153-0.0129 0.85643 0.0433 1.27539 0.0449 17.59965-4.92406 32.62921-2.67206 42.10938-1.95312 3.66596 0.27801 5.45459 0.22862 7.91797 0.29296 0.58795-1.17375 1.05636-2.32809 1.75195-3.50195 5.87938-9.92191 14.25289-17.68373 22.9375-23.66992 1.55647-1.07316 3.17664-2.05087 4.85156-2.92774 22.92893-11.9996 45.20353-10.32977 62.07813-7.47265s30.9024 7.48876 42.6094 10.60937c11.7069 3.12062 20.8378 4.39071 23.9941 4.2461 0.049-0.002 0.027 0.0112 0.072 0.01 4.5947-5.34787 10.2164-18.32325 13.9824-31.75586 1.9312-6.88809 2.3485-12.04644 7.5078-23.76562 2.5797-5.85959 3.6508-20.73564 31.9258-29.13086 4.6504-1.38076 9.6436-1.75432 14.5644-1.52734-1.7253-1.38963-3.5277-2.97684-5.3984-4.7461-15.7544-12.1821-51.6151-19.96459-96.0215-21.38281-42.3509-1.35258-89.12053 1.83425-133.50974-4.50195zm-77.19531 1.05078c0.85263 0.20326 1.40794 0.20958 1.39453 0.20508-0.01-0.003-1.13244-0.14758-1.39453-0.20508z" transform="matrix(.40571132 0 0 .3125656 1079.6688 -163.15297)" filter="url(#filter10469)" fill="#dcdcdc"/>
  </g>
  <rect id="clouds_3" opacity=".1" style="color:#000000" height="333.43729" width="2e3" stroke="#000" y="819.35883" x="-849.40369" stroke-width="3.9180002" fill="none"/>
  <rect id="clouds_4" opacity=".1" style="color:#000000" height="333.43729" width="2e3" stroke="#000" y="819.35883" x="-829.40369" stroke-width="3.9180002" fill="none"/>
  <rect id="clouds_5" opacity=".1" style="color:#000000" height="333.43729" width="2e3" stroke="#000" y="819.35883" x="-809.40369" stroke-width="3.9180002" fill="none"/>
  <rect id="clouds_6" opacity=".1" style="color:#000000" height="333.43729" width="2e3" stroke="#000" y="819.35883" x="-789.40369" stroke-width="3.9180002" fill="none"/>
  <rect id="clouds_7" opacity=".1" style="color:#000000" height="333.43729" width="2e3" stroke="#000" y="819.35883" x="-769.40369" stroke-width="3.9180002" fill="none"/>
  <rect id="clouds_8" opacity=".1" style="color:#000000" height="333.43729" width="2e3" stroke="#000" y="819.35883" x="1060.5963" stroke-width="3.9180002" fill="none"/>
  <rect id="clouds_3a" opacity=".1" style="color:#000000" height="333.43729" width="2e3" stroke="#000" y="819.35883" x="-869.40369" stroke-width="3.9180002" fill="none"/>
 </g>
 <g id="layer4" transform="translate(-1.1524484,10.725312)">
  <g id="g20345" fill-rule="evenodd" transform="translate(-47.08523,155.11319)" clip-path="url(#clipPath3719)">
   <path id="path3879" d="m571.7207 25.5625c-0.17253 0.07948-0.33686 0.187837-0.45508 0.341797-0.10316 0.135015-0.16192 0.302703-0.17187 0.474609-0.0119 0.205205 0.0332 0.411657 0.0996 0.603516 0.0874 0.254118 0.21087 0.492971 0.3457 0.722656 0.38264 0.652545 0.85807 1.247385 1.33594 1.826172 0.66158 0.802132 1.3532 1.576444 2.04492 2.347656 1.87606 2.091997 3.76088 4.173384 5.54492 6.324219 2.27774 2.745833 4.41602 5.598168 6.33789 8.576172 4.73154 7.333585 8.11226 15.500842 9.60743 23.949219-7.88315-14.297812-17.56422-33.485574-35.14063-31.167969 11.68299 37.363433 25.98057 31.683349 35.4375 36.384765-0.37334-0.552391-14.54975-11.588568-18.6875-18.773437 8.91429 9.81148 15.8672 14.483024 18.80664 16.216797 0.94832 7.18455 0.57714 14.486926-0.76562 21.621094-0.29469-0.314145-0.58371-0.63312-0.88282-0.94336-10.49674-10.870524-23.56046-19.200412-37.89452-23.861328-8.9636-2.911425-18.39829-4.369894-27.7832-4.251953-5.63095 0.07076-11.2574 0.733798-16.75977 1.941406-3.74772 0.824082-7.42732 1.920736-11.00781 3.267578-9.30876-4.030579-19.56413-5.738-29.61133-4.890625-18.37732 1.617262-35.00694 11.348025-47.79882 24.015625-4.23683 4.180156-8.06151 8.616736-12.375 12.423831-4.31763 3.79082-9.196 7.05191-14.66993 8.36328-2.73356 0.66151-5.59353 0.84688-8.35156 0.38281-2.75526-0.46351-5.42507-1.57217-7.5957-3.32226-2.16828-1.74707-3.85394-4.14633-4.60547-6.83204-0.75212-2.680878-0.56753-5.668438 0.66016-8.183589 0.8508-1.766648 2.20703-3.296272 3.57617-4.820313 1.37535-1.519591 2.79607-3.080709 3.78125-4.941406 0.49191-0.931298 0.86341-1.937344 1.03515-2.984375 0.0597-0.363348 0.0854-0.730807 0.0918-1.099609 0.0755-1.101677 0.16938-2.195225 0.48438-3.21875 0.18941-0.617666 0.45257-1.20944 0.8125-1.726563 0.35971-0.516653 0.81623-0.960765 1.3496-1.253906 0.53274-0.292832 1.14495-0.43669 1.74024-0.363281 0.59442 0.07303-0.48075 1.309448 0.14062 2.273437 0.86867 1.377795 1.32582 0.874824 1.01368 2.351563 0.38821-0.259866 0.83676-1.29058 1.0332-1.738282 0.26243-0.746681-0.0405-1.392812-0.48828-2.158203-0.41968-0.525271-1.02996-0.860531-1.67188-0.958984-0.64126-0.09811-1.30396 0.0302-1.88867 0.330078-0.58416 0.299627-1.09017 0.759968-1.49023 1.302734-0.39989 0.542348-0.69931 1.163-0.91602 1.808594-0.15675 0.468438-0.26418 0.948194-0.35351 1.431641-0.0125-0.04516-0.0177-0.09182-0.0312-0.136719-0.30811-1.02071-0.8966-1.961035-1.71875-2.638672-0.32169-0.264956-0.68669-0.471138-1.06641-0.640625-0.25848-0.86152-0.30453-1.723904 0.0332-2.414062 0.19024-1.028235 2.22912 0.97659 3.97461-0.0039 2.49271-1.367532 1.66708-2.217982 4.20703-1.517578-0.41164-0.703962-2.15872-1.594639-2.91797-1.984375-1.27319-0.536382-2.43145-0.07791-3.8125 0.621094-0.9597 0.675563-1.61197 1.702507-1.85156 2.810547-0.2854 0.693928-0.2598 1.505142-0.0605 2.3125-0.46788-0.153859-0.95716-0.238237-1.44921-0.222657-1.36434 0.247941-2.43243 0.549175-2.98829 1.640626-0.28995 0.70191-0.95988 2.314114-0.82421 3.054687 1.32864-1.907256 1.26554-0.832953 3.79101-1.203125 1.11694-0.151969 1.61611-1.222026 2.01563-1.841797 0.67913 1.379061 1.69311 2.520116 2.34179 2.679688 0.13695 0.793807 0.11983 1.615797-0.0332 2.410156-0.18745 0.972383-0.5681 1.904187-1.05859 2.773437-0.97962 1.740421-2.40687 3.204187-3.82422 4.689454-1.42359 1.4808-2.87078 3.029643-3.8711 4.923828-1.41954 2.720063-1.73493 5.96862-0.98632 8.958987 0.74944 2.98656 2.50511 5.68304 4.85156 7.68359 2.34459 1.99794 5.23114 3.31287 8.24805 3.90625 3.01446 0.59289 6.13745 0.49609 9.12695-0.14062 5.97167-1.28496 11.30177-4.56046 15.89453-8.4082 4.59763-3.83212 8.604-8.200044 12.8418-12.140632 12.81073-11.865908 28.98696-20.714508 45.98242-21.578125 7.52856-0.412167 15.12535 0.743093 22.1875 3.285156-7.68538 3.773662-14.74744 8.768899-20.7832 14.83789-10.54371 10.611543-17.76919 24.399561-20.26758 39.052741-2.49189 14.65994-0.17203 30.05136 6.72851 43.0957 6.90948 13.04494 18.36236 23.54015 31.91016 29.0625 8.43241 3.42924 17.61901 4.83584 26.625 4.29297 9.00614-0.53994 17.87007-3.03495 25.71875-7.38867 7.84723-4.35649 14.61692-10.53168 19.77344-17.79297 5.15731-7.26072 8.73312-15.63668 10.23828-24.35547-1.76939 8.66903-5.59392 16.8529-10.89844 23.86133-5.30531 7.00786-12.14786 12.88663-19.89844 16.88281-7.7491 3.99895-16.38735 6.13992-25.05664 6.39844-8.66941 0.25557-17.36774-1.38803-25.22265-4.8711-12.64796-5.59508-23.10259-15.85807-29.14453-28.15234-6.05179-12.29658-7.75726-26.63578-5.07618-39.96094 2.67492-13.33356 9.72326-25.71594 19.52539-35.00586 7.26095-6.888797 16.06915-12.119564 25.51368-15.384765 0.0355 0.02125 0.0719 0.04117 0.10742 0.0625l0.0742-0.126954c3.24802-1.11324 6.56915-1.996501 9.92968-2.630859 13.20963-2.499841 27.1091-1.209345 39.71289 3.302734 12.61233 4.509725 23.99326 12.287901 32.98243 22.166014 8.95508 9.82435 15.47772 21.90213 19.32031 34.67579 3.8507 12.84565 5.035 26.43687 3.50781 39.67187-1.87339 16.4688-7.96706 32.44903-16.92578 46.48242-9.03133 14.11578-21.00725 26.34917-34.79883 35.70703-17.94242 12.23762-39.02684 19.76271-60.72461 23.57227-22.02356 3.84576-44.75539 3.84047-67.24609 1.36133-32.24829-3.57367-63.92037-12.0858-94.24414-24.02539-5.20112-2.04845-10.4034-4.23328-15.61524-6.46094 6.73754-1.86226 13.17146-4.77911 18.95704-8.71094 7.29774-5.01921 13.14929-11.06632 19.24804-16.15039 6.21657-5.16569 13.01061-9.63101 20.31836-12.9707 10.14374-4.53746 21.56785-7.09534 31.85352-4.05859 7.80946 2.24759 14.9584 7.73672 18.33984 15.13867 2.71702 5.90168 3.08679 13.09803 0.40625 19.04687-1.33256 2.98732-3.38833 5.68462-5.97851 7.70313-2.58727 2.0184-5.72808 3.38362-9 3.8164-3.26928 0.43453-6.70123-0.0554-9.70704-1.47265-3.00467-1.4142-5.61238-3.76849-7.26757-6.6836-1.65633-2.91188-2.37172-6.40873-1.90235-9.76367 0.46652-3.35327 2.12535-6.58371 4.66992-8.88281 3.65807-1.73317 2.73354 0.97875 9.98633 3.00781 2.96548 1.06093 10.29497-3.13894 12.49414 0.70703-2.04179-3.93178-6.63786-9.21781-11.06445-10.10937-4.4271-0.88875-8.58556 2.63826-12.12109 5.58203-2.83741 2.36841-4.79051 5.77665-5.45508 9.45703-0.66179 3.67921-0.0478 7.57117 1.68554 10.92578 1.73468 3.35172 4.54245 6.12758 7.91797 7.88477 3.3747 1.75417 7.25991 2.48752 11.07227 2.13476 3.80996-0.35452 7.50352-1.76659 10.62695-4.00976 3.12068-2.24321 5.65254-5.27368 7.36133-8.73047 3.39831-6.93119 3.41267-15.27644 0.43164-22.42774-3.73407-8.89816-11.65452-15.69292-20.83984-18.68945-11.99616-3.83881-25.04282-1.75036-36.30078 2.9707-8.09031 3.32162-15.64364 7.83735-22.54493 13.13086-6.78233 5.18634-12.6979 10.86996-19.18554 14.8711-7.74033 4.84052-16.78619 7.56978-25.88672 8.14062-2.27747 0.13819-4.56176 0.14166-6.83399 0.01-3.56252-1.56268-7.13922-3.12861-10.74414-4.6836-15.27017-6.6101-31.03987-12.99737-47.7207-17.83398-40.45923-11.62263-83.7232-12.48558-124.875-3.4668-41.164486 8.96435-80.444652 27.87316-112.86133 55.72852-2.1443761 1.74906-4.2174046 3.52997-6.2222846 5.33984l-1.0957964 4.50391v46.79758h2.9453124l-1.2766945-0.42462c28.077586-40.20543 73.204694-67.6649 125.48727-81.97672 36.12155-9.0251 74.66327-9.55361 110.75781-0.28906 15.03305 3.81631 29.97362 9.35581 45.07813 15.31641 15.1257 5.99204 30.40028 12.47254 46.31641 18.20507 32.39617 11.6718 66.30052 19.61497 100.76562 22.41407 24.15644 1.97681 48.7659 1.13965 72.7793-3.75586 18.36131-3.72599 36.3742-10.07904 52.81054-19.39063 0.14852-0.007 0.29675-0.0179 0.44532-0.0234 9.1127-0.32258 18.38168 1.50865 26.55859 5.56836 6.84809 3.34698 13.29147 8.42618 20.54883 12.92383 7.38623 4.59267 15.34415 8.34552 23.7207 10.85938 11.66596 3.59656 24.85511 4.39875 36.41797-0.59571 8.84794-3.88113 16.0649-11.41972 18.91016-20.64062 2.26679-7.40872 1.43536-15.71202-2.625-22.27734-2.0389-3.27296-4.85444-6.04174-8.17969-7.96875-3.32798-1.92671-7.14239-2.96929-10.96875-2.94922-3.8286 0.0221-7.62178 1.13099-10.80859 3.20703-3.18734 2.07911-5.71106 5.11763-7.10938 8.62304-1.39672 3.50816-1.62611 7.44229-0.60742 11.03907 1.02158 3.59767 3.29791 6.7976 6.35352 8.87695 3.80665 2.58361 9.07177 5.6127 13.39062 4.29492 4.31807-1.32051 7.59305-6.95757 9.24023-11.07031-1.8122 4.04274-8.01277 1.62773-12.21679 2.72656-4.20324 1.10158-6.37109 5.70759-9.79297 3.16992-2.75737-2.03903-4.72512-5.0913-5.51758-8.38281-0.79547-3.29288-0.42392-6.84233 0.93945-9.90234 1.36195-3.06313 3.72628-5.66182 6.57813-7.36328 2.85265-1.70473 6.21952-2.52653 9.51562-2.41407 3.29858 0.11044 6.55768 1.16052 9.33008 2.91602 2.7753 1.75531 5.08654 4.23948 6.70508 7.08203 3.24989 5.65794 3.58536 12.85488 1.45898 18.99414-2.64076 7.69737-9.21752 13.8602-16.76953 16.86133-9.93906 4.02884-21.55855 2.60102-32.09765-0.92187-7.59954-2.60843-14.79793-6.38747-21.49024-10.91993-6.56705-4.46277-12.98237-9.90662-20.73633-14.1875-5.43303-2.96009-11.29289-5.08152-17.33984-6.35937 0.0833-0.0598 0.1688-0.11584 0.25195-0.17578 15.35109-11.11318 28.33805-25.30243 38.01953-41.48828 6.28909-10.4922 11.1308-21.88323 14.19727-33.74024 8.15416-3.67049 17.24183-5.40801 26.22852-4.91601 16.99543 0.86361 33.16971 9.71221 45.98047 21.57812 4.23778 3.94059 8.24611 8.3085 12.84374 12.14063 4.59276 3.84774 9.92095 7.12324 15.89258 8.4082 2.98951 0.63671 6.11252 0.73351 9.12696 0.14062 3.0169-0.59338 5.90348-1.90831 8.24804-3.90625 2.34647-2.00055 4.10407-4.69703 4.85352-7.68359 0.7486-2.99036 0.43126-6.23892-0.98828-8.95898-1.00028-1.89419-2.44755-3.44303-3.8711-4.92383-1.41737-1.48527-2.84457-2.94903-3.82422-4.68946-0.49044-0.86925-0.8711-1.80105-1.05859-2.77343-0.18705-0.97166-0.18467-1.98612 0.0742-2.9375 0.25844-0.95027 0.77632-1.84291 1.51953-2.49024 0.74172-0.64664 0.95038 1.93723 2.73242 2.17969 2.52547 0.37017 2.46236-0.70414 3.79102 1.20313 0.13564-0.74058-0.53426-2.35278-0.82422-3.05469-0.55583-1.09145-1.62392-1.39269-2.98828-1.64063-1.0609-0.0336-2.12011 0.361-2.94336 1.03906-0.82218 0.67764-1.4107 1.61797-1.71875 2.63868-0.30783 1.0198-0.34787 2.10858-0.17578 3.15625 0.17173 1.04703 0.54322 2.05308 1.03515 2.98437 0.98514 1.8607 2.40784 3.42182 3.78321 4.94141 1.36912 1.52404 2.72535 3.05366 3.57617 4.82031 1.2277 2.51515 1.41029 5.50271 0.6582 8.18359-0.75157 2.68571-2.4372 5.08497-4.60547 6.83204-2.17065 1.75009-4.84043 2.85875-7.5957 3.32226-2.758 0.46407-5.61607 0.2787-8.34961-0.38281-5.47391-1.31137-10.35427-4.57246-14.67187-8.36328-4.31353-3.80709-8.13624-8.24367-12.37305-12.42383-12.7919-12.6676-29.4215-22.39837-47.79883-24.01563-8.43767-0.71163-17.02413 0.37793-25.07226 3.13086 0.85603-4.26693 1.49034-8.58128 1.86328-12.92773 0.23267-2.75686 0.35736-5.52044 0.38476-8.2832 2.58028-5.17514 6.11688-9.87711 10.44922-13.68555 9.09711-8.10444 21.42517-12.18391 33.83985-14.73828 12.44054-2.51196 25.39616-3.58102 38.07031-6.8125 15.8486-4.02293 31.17525-11.78781 42.02148-24.17383 5.00052-5.72526 8.93351-12.407998 11.3125-19.632812-0.94884 0.101793-1.90084 0.159874-2.85547 0.173828-2.38843 6.427214-6.11458 12.353724-10.71289 17.458984-10.47082 11.6569-25.33328 18.79357-40.67773 22.48242-12.30405 2.94382-25.17582 3.78202-37.99805 6.15235-12.84515 2.32734-25.95747 6.52888-36.31445 15.25976-2.77465 2.36765-5.26748 5.0477-7.45117 7.96094-0.65382-8.68625-2.31438-17.27919-4.94922-25.55469 3.83746-12.88119 9.27184-25.35112 18.09961-35.472655 2.83511-3.256875 6.02668-6.228673 9.57617-8.746094 2.13733-1.517263 4.43785-2.826099 6.75-4.107422-2.41234 1.080937-4.81782 2.19069-7.11524 3.542969-3.80056 2.238502-7.31751 4.985843-10.50781 8.080078-8.43945 8.198914-14.65943 18.457504-19.4414 29.330074-3.8249-9.55779-9.04369-18.55299-15.55664-26.535152 1.69993-9.855336 1.71333-20.007958-0.59376-29.693359-2.1444-8.925151-6.23488-17.240085-11.60742-24.496094-2.1568-2.913419-4.50636-5.662102-6.97851-8.28125-1.93847-2.05372-3.95603-4.013734-5.96094-5.980469-0.73916-0.725199-1.47573-1.450702-2.18164-2.203125-0.51096-0.545315-1.01114-1.096309-1.42578-1.710937-0.14573-0.216212-0.28169-0.439191-0.38086-0.677735-0.0745-0.18037-0.1302-0.369827-0.13086-0.5625-0.00057-0.15954 0.0428-0.320607 0.13281-0.455078 0.10304-0.154687 0.25868-0.272939 0.42578-0.363281zm185 64.572266c0.0842-0.226677 0.15155-0.459593 0.23242-0.6875-1.79204 0.01126-3.58097-0.129256-5.34179-0.44336-4.87675-0.869514-9.53304-2.974519-13.33594-6.107422-3.80268-3.131905-6.75146-7.297615-8.35742-11.923828-1.68711-4.887231-1.8537-10.416526 0.26562-15.017578 1.05359-2.303867 2.6527-4.362906 4.66407-5.849609 2.00855-1.485718 4.44046-2.413265 6.90039-2.533203 2.09532-0.109801 4.22214 0.361613 6.14062 1.255859 1.92071 0.895139 3.64027 2.229048 5.08399 3.810547 2.89801 3.157124 4.6104 7.315798 5.62695 11.589844 1.78716 7.610828 1.33055 15.699359-0.95313 23.175781-0.21006 0.687904-0.45291 1.36545-0.69336 2.042969 0.94698-0.006 1.89428-0.05598 2.8379-0.150391 0.12045-0.383099 0.25763-0.76045 0.36914-1.146484 2.28906-7.926588 2.61034-16.446977 0.60351-24.449219-1.1176-4.508457-3.07415-8.952671-6.31836-12.425781-1.6276-1.733838-3.57827-3.18565-5.76758-4.169922-2.19132-0.985081-4.6193-1.472612-7.03515-1.314453-2.83844 0.194781-5.56496 1.282462-7.79297 2.99414-2.22549 1.710928-3.95012 4.004872-5.05859 6.548828-2.2032 5.090929-1.94443 10.956941-0.0645 16.064454 1.76774 4.826837 4.90992 9.107309 8.90821 12.291015 3.9983 3.182893 8.8266 5.266373 13.8457 6.076172 1.73315 0.279496 3.48881 0.394741 5.24023 0.369141zm3.07032-0.837891c-0.0698 0.221998-0.14208 0.443081-0.21485 0.664063 5.221-0.560119 10.29545-2.426037 14.5625-5.451172 0.26405-0.187256 0.51979-0.386271 0.77735-0.582032 2.93485-1.752641 7.57154-5.120496 9.89453-10.066406 10.72272-27.619544-10.73378-20.94936-2.07227-3.511719 0.95786 1.312252 0.66312 3.03432-0.25781 4.839844-2.21192 3.548084-5.12737 6.649996-8.5625 9.001953-4.18148 2.86388-9.10097 4.602599-14.12695 5.105469zm-355.27149-57.710937c-1.26727 25.525082 29.5238 31.436135 49.19922 37.851562 0 0-6.03557-9.774054-24.42578-21.341797 9.82182 3.225789 25.73514 18.359803 26.49609 18.679688-7.13989-10.896266-1.23202-31.215539-51.26953-35.189453zm216.70508 35.511718c-29.99387 33.664594-10.81987 41.151934-7.33203 51.650394 0.26104-0.65501-0.63028-19.008428 3.41797-26.964847-3.42283 17.945117-0.0508 27.128907-0.0508 27.128907 8.14459-15.91288 23.99529-38.538799 3.96484-51.814454zm-237.83008 7.652344c0.0802-0.0093 0.16509 0.02073 0.25781 0.101562 0.74318 0.647325 1.2591 1.539966 1.51758 2.490235 0.009 0.03151 0.0115 0.06406 0.0195 0.0957-0.69069-0.479265-1.46855-1.455622-1.99414-2.572266 0.0651-0.0592 0.13053-0.107308 0.19922-0.115234zm-48.78515 98.92773c-46.35497 36.78296-29.10938 53.457-29.875 69.14844 0.55804-0.82169 7.44605-26.54357 15.16015-36.23633-11.31366 23.73717-11.64258 37.57227-11.64258 37.57227 15.47951-19.36976 42.0417-45.50837 26.35743-70.48438z" transform="translate(49.0625,-159.09375)" fill="#9acd58"/>
   <path id="path20215" d="m571.7207 25.5625c-0.17253 0.07948-0.33686 0.187837-0.45508 0.341797-0.10316 0.135015-0.16192 0.302703-0.17187 0.474609-0.0119 0.205205 0.0332 0.411657 0.0996 0.603516 0.0874 0.254118 0.21087 0.492971 0.3457 0.722656 0.38264 0.652545 0.85807 1.247385 1.33594 1.826172 0.66158 0.802132 1.3532 1.576444 2.04492 2.347656 1.87606 2.091997 3.76088 4.173384 5.54492 6.324219 2.27774 2.745833 4.41602 5.598168 6.33789 8.576172 3.63307 5.631012 6.45965 11.755241 8.25782 18.119141 1.5254 2.664964 2.96758 5.323472 4.34961 7.830078-1.49517-8.448377-4.87589-16.615634-9.60743-23.949219-1.92187-2.978004-4.06015-5.830339-6.33789-8.576172-0.99631-1.201148-2.02631-2.379008-3.0664-3.550781-1.67948-1.739342-3.39851-3.431231-5.11719-5.117188-0.73916-0.725199-1.47573-1.450702-2.18164-2.203125-0.51096-0.545315-1.01114-1.096309-1.42578-1.710937-0.14573-0.216212-0.28169-0.439191-0.38086-0.677735-0.0745-0.18037-0.1302-0.369827-0.13086-0.5625-0.00057-0.15954 0.0428-0.320607 0.13281-0.455078 0.10304-0.154687 0.25868-0.272939 0.42579-0.363281zm-167.20117 6.023438c-0.58289 11.740447 5.62383 19.325578 14.4043 24.724609-7.15582-5.242265-11.91842-12.369276-11.4043-22.724609 16.73789 1.329301 27.19582 4.4929 33.99609 8.515624-6.5989-4.961663-17.5715-8.972948-36.99609-10.515624zm159.95508 7.785156c-1.03833-0.01672-2.10655 0.0446-3.20508 0.189453 6.09543 19.493834 12.90127 27.260498 19.36133 30.908203-5.53567-4.313382-11.20336-12.412478-16.36133-28.908203 4.94337-0.651827 9.26185 0.397382 13.0918 2.560547-3.74837-2.854924-7.98799-4.671135-12.88672-4.75zm178.07422 6.390625c-0.30188-0.000119-0.60427 0.0095-0.90625 0.0293-2.83844 0.194781-5.56496 1.282462-7.79297 2.99414-2.22549 1.710928-3.95012 4.004872-5.05859 6.548828-2.2032 5.090929-1.94443 10.956941-0.0645 16.064454 1.76774 4.826836 4.90992 9.107309 8.90821 12.291015 1.11228 0.885444 2.29449 1.675191 3.52148 2.386719-0.17235-0.130905-0.35207-0.251853-0.52148-0.386719-2.11878-1.687109-3.98801-3.688976-5.54883-5.910156-2.26183-2.584703-4.04747-5.578864-5.16797-8.806641-1.68711-4.887231-1.8537-10.416526 0.26562-15.017578 1.05359-2.303867 2.6527-4.362906 4.66407-5.849609 2.00855-1.485718 4.44046-2.413265 6.90039-2.533203 0.97042-0.05085 1.94614 0.036 2.90625 0.21875 2.41198-0.155823 4.83565 0.330962 7.02343 1.314453 0.32147 0.144526 0.62659 0.318321 0.9375 0.482422-1.19998-0.98628-2.51179-1.841454-3.9375-2.482422-1.9174-0.861946-4.01578-1.34292-6.1289-1.34375zm-310.25586 4.333984c0.53329 0.335451 1.02053 0.663855 1.5332 0.996094-0.45258-0.311344-0.88643-0.618559-1.35742-0.933594-0.0579-0.01969-0.11828-0.04362-0.17578-0.0625zm318.99414 0.945313c0.59198 0.498926 1.16244 1.024625 1.68555 1.597656 2.89801 3.157124 4.6104 7.315798 5.62695 11.589844 1.78716 7.610828 1.33055 15.699359-0.95313 23.175781-0.21006 0.687904-0.45291 1.36545-0.69336 2.042969 0.94698-0.006 1.89428-0.05598 2.8379-0.150391 0.12045-0.383099 0.25763-0.76045 0.36914-1.146484 2.28906-7.926588 2.61034-16.446977 0.60351-24.449219-0.17007-0.686063-0.36567-1.368936-0.57617-2.048828-1.01003-2.590664-2.37142-5.005424-4.21484-7.013672-1.3412-1.469188-2.92813-2.709089-4.68555-3.597656zm8.50391 38.255859c-0.0698 0.221998-0.14208 0.443081-0.21485 0.664063 0.30996-0.03325 0.61699-0.08648 0.92578-0.128907 0.0465-0.143148 0.10057-0.283774 0.14453-0.427734 0.0231-0.07549 0.0398-0.152901 0.0625-0.228516-0.30603 0.03991-0.61099 0.09038-0.91796 0.121094zm-0.21485 0.664063c-0.94884 0.101793-1.90084 0.159874-2.85547 0.173828-0.13849 0.372692-0.29595 0.738158-0.44336 1.107422 0.91947 0.107348 1.84267 0.170417 2.76954 0.191406 0.17763-0.490335 0.36611-0.977086 0.52929-1.472656zm-2.85547 0.173828c0.0842-0.226677 0.15155-0.459593 0.23242-0.6875-1.79204 0.01126-3.58097-0.129256-5.34179-0.44336-3.35536-0.598253-6.59858-1.79377-9.53906-3.49414 1.81019 1.383116 3.78882 2.545587 5.88281 3.46289 1.15916 0.332507 2.33631 0.601119 3.52539 0.792969 1.73315 0.279496 3.48881 0.394741 5.24023 0.369141zm-316.88867-36.203125c7.8738 5.521767 15.43817 12.625633 15.95703 12.84375-0.23147-0.353254-0.4479-0.71766-0.65429-1.089844-3.69319-3.180347-9.60855-8.137132-15.30274-11.753906zm345.26172 1.269531c-3.05838-0.340739-6.9569 5.884691-2.35547 15.148437 0.95786 1.312252 0.66312 3.03432-0.25781 4.839844-2.21192 3.548084-5.12737 6.649996-8.5625 9.001953-3.13559 2.147553-6.68548 3.662553-10.38477 4.498047-0.0534 0.208377-0.10408 0.417357-0.16015 0.625 3.85937-0.899108 7.54271-2.519799 10.76562-4.804687 0.26405-0.187256 0.51979-0.386271 0.77735-0.582032 2.93485-1.752641 7.57154-5.120496 9.89453-10.066406 0.26489-0.68232 0.49414-1.327929 0.7207-1.96875-3.88813-8.24732-1.032-13.975163 1.78906-14.626953-0.51734-1.302815-1.33493-1.965114-2.22656-2.064453zm-204.07422 3.970703c0.7992 1.387742 1.97711 2.920385 3.35352 4.492187 5.38285 5.079479 9.53984 7.939121 11.87695 9.369141-3.61688-2.574203-8.91337-6.908433-15.23047-13.861328zm-51.51953 6.78125c-5.63095 0.07076-11.2574 0.733798-16.75977 1.941406-3.74772 0.824082-7.42732 1.920736-11.00781 3.267578-9.30876-4.030579-19.56413-5.738-29.61133-4.890625-5.67897 0.499768-11.18914 1.777244-16.47265 3.673828 0.70692 0.926949 1.07031 1.492188 1.07031 1.492188-0.87915-0.286659-1.80297-0.572935-2.72266-0.859375-11.15498 4.316507-21.25033 11.367329-29.67382 19.708984-4.23683 4.180156-8.06151 8.616734-12.375 12.423831-4.31763 3.79082-9.196 7.05191-14.66993 8.36328-2.73356 0.66151-5.59353 0.84688-8.35156 0.38281-1.70567-0.28694-3.3779-0.82297-4.91992-1.60351 0.10869 0.093 0.21293 0.19157 0.32422 0.28125 2.17063 1.75009 4.84044 2.85875 7.5957 3.32226 0.35702 0.0601 0.71623 0.10975 1.07617 0.14844 1.58939-0.0187 3.17721-0.20085 4.72852-0.53125 5.97167-1.28496 11.30177-4.56046 15.89453-8.4082 4.59763-3.83212 8.604-8.200041 12.8418-12.140629 2.54998-2.361919 5.23856-4.598 8.03515-6.681641 11.58529-9.422241 25.50916-16.242539 40.61914-17.572266 10.0472-0.847375 20.30257 0.860046 29.61133 4.890625 3.58049-1.346842 7.26009-2.443496 11.00781-3.267578 5.50237-1.207608 11.12882-1.870646 16.75977-1.941406 9.38491-0.117941 18.8196 1.340528 27.7832 4.251953 7.27217 2.364644 14.21516 5.677199 20.66407 9.783203-7.27735-5.037319-15.24861-9.046801-23.66407-11.783203-8.9636-2.911425-18.39829-4.369894-27.7832-4.251953zm91.72461 1.144531c-18.08168 20.294564-18.28885 31.069872-14.8418 38.732424 2.79688 3.79823 5.32719 7.78888 7.56446 11.93945 0.009-0.5864 0.0109-1.39103 0.0195-2.40234-5.75573-8.51379-14.45474-18.442708 10.10547-46.093752-0.86136-0.74765-1.79413-1.477528-2.84766-2.175782zm-234.04883 0.69336c-0.92762-0.06458-1.83726 0.323401-2.87305 0.847656-0.9597 0.675563-1.61197 1.702507-1.85156 2.810547-0.2854 0.693928-0.2598 1.505142-0.0605 2.3125-0.46788-0.153859-0.95716-0.238236-1.44921-0.222657-1.36434 0.247941-2.43242 0.549175-2.98829 1.640626-0.28995 0.701909-0.95988 2.314114-0.82421 3.054687 1.32864-1.907256 1.26554-0.832953 3.79101-1.203125 0.0531-0.0072 0.0981-0.0259 0.14844-0.03711 0.32822-0.528479 0.80799-0.841098 1.38476-1.060547 0.18296-0.264944 0.34453-0.530219 0.48243-0.744141 0.0875 0.177604 0.19198 0.335785 0.28906 0.503906 0.12112-0.02848 0.24772-0.05451 0.375-0.08008-0.14508-0.239807-0.28219-0.488621-0.4043-0.748047 0.0651-0.0592 0.13053-0.107308 0.19922-0.115234 0.0802-0.0093 0.16509 0.02073 0.25781 0.101562 0.24186 0.210665 0.4499 0.45478 0.64258 0.710938 0.17847 0.01122 0.35562 0.0262 0.53125 0.06055-0.26818-0.38676-0.57774-0.745179-0.9414-1.044922-0.32169-0.264956-0.68669-0.471138-1.06641-0.640625-0.25848-0.86152-0.30453-1.723905 0.0332-2.414062 0.16834-0.909829 1.78414 0.552483 3.36328 0.222656 0.29774-0.421602 0.6561-0.803466 1.08789-1.107422 0.5858-0.296493 1.12876-0.527311 1.66016-0.679688 0.26863-0.174751 0.57112-0.235182 1.08203-0.166015 0.32178 0.0078 0.6463 0.06636 0.97656 0.193359-0.42737-0.701571-2.15237-1.581771-2.90625-1.96875-0.31829-0.134095-0.63024-0.205037-0.93945-0.226562zm3.85156 4.929687c-0.17383 0.139049-0.38496 0.290353-0.63281 0.451172-0.10296 0.461745-0.40484 1.181401 0.002 1.8125 0.0852 0.135079 0.16332 0.239235 0.24024 0.341797 0.23446-0.200193 0.48699-0.376716 0.75781-0.515625 0.33214-0.170342 0.69045-0.276602 1.05469-0.326172-0.1016-0.337262-0.27889-0.676956-0.49414-1.044922-0.2511-0.314272-0.57423-0.550536-0.92774-0.71875zm205.80664 0.734375c0.0966 0.738276 0.17305 1.478316 0.24219 2.21875 1.51224 1.281483 2.535 2.129652 2.63086 2.271484-0.80637-0.400877-1.65911-0.7111-2.53125-0.99414 0.41428 5.718805 0.0392 11.479344-0.95898 17.144531 0.66291 0.64744 1.31704 1.303883 1.96093 1.970703 0.29911 0.31024 0.58813 0.629215 0.88282 0.94336 1.34276-7.134168 1.71394-14.436544 0.76562-21.621094-0.74734-0.440804-1.75971-1.0768-2.99219-1.933594zm-209.43164 0.0918c-0.17835 0.176227-0.34802 0.362869-0.49804 0.566406-0.39989 0.542348-0.69931 1.163-0.91602 1.808594-0.01 0.0296-0.0159 0.06016-0.0254 0.08984 0.1204 0.05755 0.2398 0.117177 0.35547 0.183593 0.0133-0.04642 0.021-0.09449 0.0352-0.140624 0.18941-0.617666 0.45257-1.20944 0.8125-1.726563 0.17188-0.246871 0.36812-0.474498 0.58203-0.679687-0.11901-0.03198-0.23337-0.06559-0.34571-0.101563zm5.09375 1.191406c-0.34072 0.05685-0.67398 0.167478-0.98047 0.335938-0.24551 0.134936-0.47259 0.304828-0.68359 0.496093 0.57146 0.658994 0.83201 0.564509 0.57813 1.765626 0.38821-0.259867 0.83676-1.29058 1.0332-1.738282 0.10472-0.297956 0.10135-0.579474 0.0527-0.859375zm100.85743 0.15625c-7.18579 3.690666-13.80369 8.448107-19.5 14.175781-10.54371 10.611543-17.76919 24.399555-20.26758 39.052735-2.49189 14.65994-0.17203 30.05136 6.72851 43.0957 5.25437 9.92012 13.13981 18.35816 22.57227 24.26367-8.10351-5.74599-14.88549-13.41514-19.57227-22.26367-6.90054-13.04434-9.2204-28.43576-6.72851-43.0957 2.49839-14.65318 9.72387-28.4412 20.26758-39.052735 6.03576-6.06899 13.09782-11.064228 20.7832-14.83789-1.40677-0.506373-2.83878-0.943001-4.2832-1.337891zm-107.41797 2.294922c-0.17253 0.26764-0.37358 0.61602-0.625 0.941406 0.0922 0.712043 0.0699 1.440792-0.0664 2.148438-0.18745 0.972383-0.5681 1.904187-1.05859 2.773437-0.97962 1.740421-2.40687 3.204187-3.82422 4.689454-1.42359 1.4808-2.87078 3.029643-3.8711 4.923828-1.41954 2.720063-1.73493 5.96862-0.98632 8.958981 0.74944 2.98656 2.50511 5.68304 4.85156 7.68359 0.96071 0.81867 2.01452 1.51686 3.12891 2.10352-0.0423-0.0353-0.0869-0.0677-0.12891-0.10352-1.59195-1.35727-2.90197-3.03896-3.82031-4.91015-1.29024-1.47561-2.28348-3.21214-2.81055-5.09571-0.75212-2.680871-0.56753-5.668435 0.66016-8.183586 0.8508-1.766648 2.20703-3.296272 3.57617-4.820313 1.37535-1.519591 2.79607-3.080709 3.78125-4.941406 0.49191-0.931298 0.86341-1.937344 1.03515-2.984375 0.0597-0.363348 0.0854-0.730807 0.0918-1.099609 0.0431-0.629469 0.0984-1.254573 0.19141-1.867188-0.0396-0.07492-0.0873-0.140289-0.125-0.216797zm267.10742 8.378906c-2.41234 1.080937-4.81782 2.19069-7.11524 3.542969-3.80056 2.238502-7.31751 4.985843-10.50781 8.080078-2.39278 2.32458-4.60052 4.820591-6.6543 7.443361-2.70938 5.75222-5.9779 11.33824-8.50585 16.27734 0 0-0.25525-0.75643-0.55274-2.12891-0.92192 1.75199-1.78818 3.537-2.62305 5.33594 0.66055 1.45486 1.30079 2.91868 1.89454 4.40234 1.88881-4.29451 4.0069-8.49005 6.39257-12.5039 3.02295-6.32389 6.71386-12.28503 11.34571-17.595702 2.83511-3.256875 6.02668-6.228673 9.57617-8.746094 2.13733-1.517263 4.43785-2.826099 6.75-4.107422zm-80.14649 3.541016c5.19503 3.607339 9.98356 7.799719 14.23243 12.468742 8.95508 9.82435 15.47772 21.90213 19.32031 34.67579 3.8507 12.84565 5.035 26.43687 3.50781 39.67187-1.87339 16.4688-7.96706 32.44903-16.92578 46.48242-9.03133 14.11578-21.00725 26.34917-34.79883 35.70703-17.94242 12.23762-39.02684 19.76271-60.72461 23.57227-22.02356 3.84576-44.75539 3.84047-67.24609 1.36133-32.24829-3.57367-63.92037-12.0858-94.24414-24.02539-3.86301-1.52144-7.72797-3.1301-11.5957-4.76367-0.34018 0.0999-0.67777 0.20826-1.01954 0.30273 5.21184 2.22766 10.41412 4.41249 15.61524 6.46094 30.32377 11.93959 61.99585 20.45172 94.24414 24.02539 22.4907 2.47914 45.22253 2.48443 67.24609-1.36133 21.69777-3.80956 42.78219-11.33465 60.72461-23.57227 13.79158-9.35786 25.7675-21.59125 34.79883-35.70703 8.95872-14.03339 15.05239-30.01362 16.92578-46.48242 1.52719-13.235 0.34289-26.82622-3.50781-39.67187-3.84259-12.77366-10.36523-24.85144-19.32031-34.67579-5.05641-5.556428-10.869-10.449141-17.23243-14.468742zm183.08985 2.853516c-2.38752 5.72231-5.82058 11.014516-9.97852 15.630856-10.47082 11.6569-25.33328 18.79357-40.67773 22.48242-12.30405 2.94382-25.17582 3.78202-37.99805 6.15235-12.84515 2.32734-25.95747 6.52888-36.31445 15.25976-1.7744 1.51412-3.42029 3.16709-4.95703 4.91602 0.20256 1.67756 0.37893 3.35868 0.50586 5.04492 2.18369-2.91324 4.67652-5.59329 7.45117-7.96094 10.35698-8.73088 23.4693-12.93242 36.31445-15.25976 12.82223-2.37033 25.694-3.20853 37.99805-6.15235 9.29565-2.2347 18.4078-5.74428 26.48047-10.74805 4.95012-3.32851 9.50116-7.22137 13.45312-11.73437 4.49557-5.14712 8.11675-11.07182 10.53321-17.464841-0.93836-0.01318-1.87658-0.06608-2.81055-0.166015zm-135.67578 1.820312c-3.14337 6.177955-3.30864 18.529634-3.34766 24.091794 0.16512 0.61982 0.29688 1.03711 0.29688 1.03711 0.58974-1.15225 1.22686-2.34791 1.88085-3.56445-0.53621-4.49937-0.71175-11.69928 1.16993-21.564454zm-45.73047 61.253904c-1.76939 8.66903-5.59392 16.8529-10.89844 23.86133-5.30531 7.00786-12.14786 12.88663-19.89844 16.88281-7.7491 3.99895-16.38735 6.13992-25.05664 6.39844-8.66941 0.25557-17.36774-1.38803-25.22265-4.8711-2.3715-1.04907-4.6665-2.26313-6.86914-3.62304 3.09659 2.18599 6.39575 4.08652 9.86914 5.62304 7.85491 3.48307 16.55324 5.12667 25.22265 4.8711 0.67119-0.02 1.34131-0.0727 2.01172-0.11524 7.30316-1.02075 14.40808-3.31657 20.83008-6.8789 7.84723-4.35649 14.61692-10.53168 19.77344-17.79297 5.15731-7.26072 8.73312-15.63668 10.23828-24.35547zm-239.9707 18.64062c-46.35497 36.78296-29.10938 53.457-29.875 69.14844 0.16894-0.24876 0.97189-2.92021 2.14843-6.59765-2.48654-13.51991-7.21326-29.94113 29.42969-59.49414-0.50221-1.02047-1.06439-2.0395-1.70312-3.05665zm305.75195 13.20899c-5.10892 0.10879-10.20709 0.87001-15.14844 2.23437-0.18001 1.03373-0.3718 2.06532-0.57812 3.09375 8.04813-2.75293 16.63459-3.84249 25.07226-3.13086 11.55602 1.01697 22.41806 5.24638 32.07227 11.39258-10.38077-7.22188-22.30261-12.26881-35.07227-13.39258-2.10942-0.1779-4.22842-0.24235-6.3457-0.19726zm97.52539 7.46484c-1.0609-0.0336-2.12011 0.361-2.94336 1.03906-0.82218 0.67764-1.4107 1.61797-1.71875 2.63868-0.30783 1.0198-0.34787 2.10858-0.17578 3.15625 0.17173 1.04703 0.54322 2.05308 1.03515 2.98437 0.98514 1.8607 2.40784 3.42182 3.78321 4.94141 1.36912 1.52404 2.72535 3.05366 3.57617 4.82031 1.2277 2.51515 1.41029 5.50271 0.6582 8.18359-0.75157 2.68571-2.4372 5.08497-4.60547 6.83204-2.17065 1.75009-4.84043 2.85875-7.5957 3.32226-2.758 0.46407-5.61607 0.2787-8.34961-0.38281-2.77683-0.66524-5.39964-1.83502-7.875-3.31836 3.32837 2.42458 6.94663 4.37725 10.875 5.31836 0.91778 0.2221 1.84975 0.38595 2.78711 0.49414 0.96731-0.0543 1.93152-0.16603 2.88477-0.35352 3.0169-0.59338 5.90348-1.90831 8.24804-3.90625 2.34647-2.00055 4.10407-4.69703 4.85352-7.68359 0.7486-2.99036 0.43126-6.23892-0.98828-8.95898-1.00028-1.89419-2.44755-3.44303-3.8711-4.92383-1.41737-1.48527-2.84457-2.94903-3.82422-4.68946-0.49044-0.86925-0.8711-1.80105-1.05859-2.77343-0.18705-0.97166-0.18467-1.98612 0.0742-2.9375 0.25844-0.95027 0.77632-1.84291 1.51953-2.49024 0.69056-0.60204 0.92033 1.59394 2.38672 2.09571 0.12364-0.12645 0.24407-0.2564 0.38086-0.36915 0.82325-0.67806 1.88246-1.07266 2.94336-1.03906 0.0477 0.009 0.0878 0.0205 0.13476 0.0293-0.0472-0.1163-0.10927-0.29859-0.14648-0.38867-0.55583-1.09145-1.62392-1.39269-2.98828-1.64063zm0.54687 3.21094c-0.0802-0.009-0.16509 0.0207-0.25781 0.10156-0.0658 0.0573-0.11943 0.12651-0.18164 0.1875 0.32009 0.0434 0.59693 0.0661 0.83984 0.0723-0.13496-0.19706-0.26151-0.34532-0.40039-0.36133zm-339.78711 5.75195c-7.74048 0.0896-15.47549 2.01223-22.51171 4.96289-8.09031 3.32162-15.64364 7.83735-22.54493 13.13086-6.78233 5.18634-12.6979 10.86996-19.18554 14.8711-6.45155 4.03456-13.81037 6.59613-21.35157 7.66992-0.60517 0.74057-1.22365 1.49072-1.80078 2.21289 0 0 0.0394-0.76341 0.17578-2.00391-0.96848 0.11004-1.9389 0.2008-2.91015 0.26172-0.21603 0.0131-0.4323 0.0186-0.64844 0.0293-0.0331 0.0831-0.1159 0.34917-0.13476 0.37695 0.006-0.1234 0.002-0.24756 0.006-0.37109-2.01965 0.0953-4.04279 0.0915-6.05664-0.0254-3.56252-1.56268-7.13922-3.12861-10.74414-4.6836-15.27017-6.6101-31.03987-12.99737-47.7207-17.83398-40.45923-11.62263-83.7232-12.48558-124.875-3.4668-41.164486 8.96435-80.444652 27.87316-112.86133 55.72852-2.1055924 1.71743-4.1423947 3.46556-6.1134355 5.24167l-1.2046455 4.60208v5.28125l1.175517-5.08841c2.896105-2.74336 5.9409219-5.42517 9.1425659-8.03659 32.416676-27.85536 71.696842-46.76417 112.86133-55.72852 41.1518-9.01878 84.41577-8.15583 124.875 3.4668 16.68083 4.83661 32.45053 11.22388 47.7207 17.83398 3.60492 1.55499 7.18162 3.12092 10.74414 4.6836 2.27223 0.13166 4.55652 0.12842 6.83399-0.01 9.10053-0.57084 18.14639-3.3001 25.88672-8.14062 6.48764-4.00114 12.40321-9.68476 19.18554-14.8711 6.90129-5.29351 14.45462-9.80924 22.54493-13.13086 11.25796-4.72106 24.30462-6.80951 36.30078-2.9707 2.49268 0.81319 4.88677 1.91514 7.13476 3.25391-3.06054-2.27445-6.49534-4.06662-10.13476-5.25391-4.49856-1.43955-9.14478-2.04593-13.78907-1.99219zm283.38477 1.68164c3.62981 2.535 7.08759 5.34028 10.32813 8.3418 4.23778 3.94059 8.24612 8.3085 12.84374 12.14063 1.86609 1.56337 3.86016 3.02148 5.9629 4.30078-1.01611-0.73683-2.00936-1.50194-2.9629-2.30078-4.59762-3.83213-8.60597-8.20004-12.84374-12.14063-4.12141-3.81743-8.59513-7.31436-13.32813-10.3418zm-359.13672 3.59375c-6.65601 8.36328-12.67401 28.58699-14.56445 34.52539-0.0525 0.62411-0.0781 1.04688-0.0781 1.04688 1.24133-1.55329 2.56942-3.16453 3.92578-4.80078 1.22248-6.31026 4.06293-16.81101 10.7168-30.77149zm97.88086 7.07813c3.55813 2.67801 6.50849 6.1252 8.34375 10.14258 2.71702 5.90168 3.08679 13.09803 0.40625 19.04687-1.33256 2.98732-3.38833 5.68462-5.97851 7.70313-2.58727 2.0184-5.72808 3.38362-9 3.8164-3.26928 0.43453-6.70123-0.0554-9.70704-1.47265-0.1941-0.0914-0.38162-0.19778-0.57226-0.29688 1.0925 0.9137 2.29296 1.69475 3.57226 2.29688 3.00581 1.41725 6.43775 1.90718 9.70704 1.47265 1.56664-0.20722 3.1004-0.63417 4.56054-1.23828 1.17775-0.56212 2.31153-1.22062 3.375-1.98437 2.58045-1.85488 4.74977-4.2531 6.39258-6.98047 0.23095-0.43239 0.45115-0.86975 0.65039-1.31641 2.68054-5.94884 2.31077-13.14519-0.40625-19.04687-2.3305-5.10145-6.45126-9.2933-11.34375-12.14258zm-10.66601 7.375c-3.81012 0.11994-7.38103 3.14295-10.47461 5.71875-2.83741 2.36841-4.79051 5.77665-5.45508 9.45703-0.66179 3.67921-0.0478 7.57117 1.68554 10.92578 1.70501 3.29438 4.44952 6.0278 7.74805 7.78906-1.95654-1.59013-3.59338-3.55803-4.74805-5.78906-0.42888-0.83003-0.78867-1.69366-1.07812-2.57812-0.0701-0.1162-0.14781-0.22765-0.21484-0.34571-1.65633-2.91188-2.37172-6.40873-1.90235-9.76367 0.46652-3.35327 2.12535-6.58371 4.66992-8.88281 1.81886-0.86176 2.50546-0.62178 3.62696 0.084 3.23028-2.64111 6.90661-5.25792 10.78906-4.47851 0.71059 0.14312 1.42476 0.41003 2.13281 0.75586-1.62839-1.36146-3.39095-2.40503-5.13281-2.75586-0.55339-0.1111-1.10218-0.15386-1.64648-0.13672zm248.54687 32.76758c-3.8286 0.0221-7.62178 1.13099-10.80859 3.20703-3.18734 2.07911-5.71106 5.11763-7.10938 8.62304-1.39672 3.50816-1.62611 7.44229-0.60742 11.03907 1.02158 3.59767 3.29791 6.7976 6.35352 8.87695 0.70407 0.47786 1.46916 0.96729 2.25781 1.44531-1.60131-1.2396-2.96117-2.78945-3.99219-4.54687-1.51759-1.7795-2.62024-3.90949-3.16211-6.16016-0.79547-3.29288-0.42392-6.84233 0.93945-9.90234 1.36195-3.06313 3.72628-5.66182 6.57813-7.36328 1.9799-1.18318 4.20855-1.93072 6.48828-2.2461 1.95227-0.6237 4.00048-0.96075 6.0625-0.97265 3.70417-0.0194 7.39322 0.96504 10.64453 2.77539-0.84922-0.66823-1.73985-1.28379-2.67578-1.82617-3.32798-1.92671-7.14239-2.96929-10.96875-2.94922zm11.11523 7.03515c1.96961 1.59669 3.63544 3.57346 4.88477 5.76758 3.24989 5.65794 3.58536 12.85488 1.45898 18.99414-2.64076 7.69737-9.21752 13.8602-16.76953 16.86133-9.93906 4.02884-21.55855 2.60102-32.09765-0.92187-6.74604-2.31548-13.17441-5.55531-19.21485-9.42383 0.24134 0.16678 0.48294 0.33967 0.72461 0.5039 6.69231 4.53246 13.8907 8.31149 21.49024 10.91993 10.5391 3.52289 22.15859 4.95071 32.09765 0.92187 7.55201-3.00113 14.12877-9.16396 16.76953-16.86133 2.12638-6.13926 1.79091-13.3362-1.45898-18.99414-1.61854-2.84255-3.92978-5.32672-6.70508-7.08203-0.38405-0.24318-0.77815-0.47006-1.17969-0.68555zm-97.81054 10.29297c-0.34375 0.25372-0.68118 0.51503-1.02735 0.76563-0.0831 0.0599-0.16865 0.11598-0.25195 0.17578 6.04695 1.27785 11.90681 3.39928 17.33984 6.35937 1.64217 0.90662 3.21377 1.87271 4.75 2.86328-2.463-1.70181-5.0202-3.35619-7.75-4.86328-4.1406-2.25593-8.53023-4.02125-13.06054-5.30078zm97.15429 7.64258c-1.8122 4.04274-8.01277 1.62773-12.21679 2.72656-3.56276 0.93372-5.66539 4.36871-8.30664 3.85352 0.47583 0.47031 0.97459 0.91776 1.51367 1.3164 3.42188 2.53767 5.58973-2.06834 9.79297-3.16992 2.09853-0.5485 4.69479-0.2221 6.99414-0.25976 0.90713-1.51404 1.66544-3.07553 2.22265-4.4668zm-76.34765 12.93164c1.66786 1.12548 3.34674 2.2567 5.07031 3.39258-1.70645-1.15157-3.39896-2.29331-5.07031-3.39258z" transform="translate(49.0625,-159.09375)" filter="url(#filter20323)" fill="#c6e3a0"/>
   <path id="path20183" d="m571.7207 25.5625c-0.072 0.03318-0.14062 0.07468-0.20703 0.119141 0.004 0.0041 0.008 0.0076 0.0117 0.01172 0.0622-0.04748 0.12625-0.09352 0.19531-0.130859zm-0.39258 0.28125c-0.0199 0.02128-0.0446 0.03723-0.0625 0.06055-0.10316 0.135015-0.16192 0.302703-0.17187 0.474609-0.0119 0.205205 0.0332 0.411657 0.0996 0.603516 0.0874 0.254118 0.21087 0.492971 0.3457 0.722656 0.38264 0.652545 0.85807 1.247385 1.33594 1.826172 0.66158 0.802132 1.3532 1.576444 2.04492 2.347656 1.87606 2.091997 3.76088 4.173384 5.54492 6.324219 2.27774 2.745833 4.41602 5.598168 6.33789 8.576172 2.80806 4.352313 5.12637 9.002097 6.8711 13.826172-1.80648-5.899508-4.48507-11.578047-7.8711-16.826172-1.26936-1.966926-2.64016-3.873523-4.07617-5.736328-0.16258-0.174555-0.3207-0.353935-0.48437-0.527344-1.93847-2.05372-3.95603-4.013734-5.96094-5.980469-0.73916-0.725199-1.47573-1.450702-2.18164-2.203125-0.51096-0.545315-1.01114-1.096309-1.42578-1.710937-0.14573-0.216212-0.28169-0.439191-0.38086-0.677735-0.0745-0.18037-0.1302-0.369827-0.13086-0.5625-0.00057-0.15954 0.0428-0.320607 0.13281-0.455078 0.0143-0.02144 0.0365-0.03658 0.0527-0.05664-0.007-0.0085-0.013-0.01692-0.01949-0.025394zm-166.01757 13.808594c4.63855 17.771992 28.14837 23.480192 45.41406 28.839844 0.5924-0.252173 1.19033-0.48998 1.78906-0.726563-0.40009-0.51609-0.92472-1.156903-1.55078-1.880859-16.36623-5.167343-39.11908-10.393281-45.65234-26.232422zm156.30859 0.980468c11.44914 35.628321 25.31232 30.816163 34.67383 35.123047-0.003-0.06584-0.0106-0.131436-0.0137-0.197265-0.70179-0.623323-2.46089-2.08013-4.79883-4.115235-8.76819-2.339408-20.09855-2.721944-29.86133-30.810547zm-133.32617 4.462891c7.56253 4.756958 13.00857 9.195672 16.83203 12.791016 5.4152 4.260514 9.7349 8.227308 10.47852 8.740234 0.0267-0.0092 0.0534-0.01822 0.0801-0.02734-0.69763-1.094868-1.27102-2.281505-1.78515-3.535156-3.53868-3.013556-16.92892-15.119101-25.60547-17.96875zm314.25586 0.666016c-0.30188-0.000119-0.60427 0.0095-0.90625 0.0293-2.83844 0.194781-5.56496 1.282462-7.79297 2.99414-2.22549 1.710928-3.95012 4.004872-5.05859 6.548828-0.47528 1.098223-0.82941 2.233707-1.08399 3.388672-0.26626 3.08632 0.18764 6.285701 1.21094 9.25 0.13182 0.379735 0.2859 0.751788 0.43555 1.125-1.12889-4.390919-1.02214-9.121416 0.83007-13.142578 1.05359-2.303867 2.6527-4.362906 4.66407-5.849609 2.00855-1.485718 4.44046-2.413265 6.90039-2.533203 2.09532-0.109801 4.22214 0.361613 6.14062 1.255859 1.92071 0.895139 3.64027 2.229048 5.08399 3.810547 1.85255 2.018192 3.217 4.447485 4.22851 7.052734-1.04779-3.723705-2.67943-7.275734-5.22851-10.052734-0.62156-0.680872-1.30364-1.303119-2.02149-1.876953-0.41713-0.232124-0.83664-0.459875-1.27344-0.65625-1.9174-0.861946-4.01578-1.34292-6.1289-1.343753zm-165.5293 8.410156c3.52084 6.113658 14.24043 14.957483 17.60938 17.816406 0.55063 0.368473 1.04193 0.688658 1.47656 0.957031-0.0759-0.853457-0.16702-1.706011-0.2793-2.55664-2.93944-1.733773-9.89235-6.405317-18.80664-16.216797zm209.78125 2.142578c0.34168 2.992014-0.33893 7.717657-2.99023 14.546875-0.15913 0.338794-0.33022 0.668215-0.50977 0.992188 0.10702 1.016916-0.21898 2.156999-0.82031 3.335937-2.21192 3.548084-5.12737 6.649996-8.5625 9.001953-4.18148 2.86388-9.10097 4.602599-14.12695 5.105469-0.0698 0.221998-0.14208 0.443081-0.21485 0.664063 5.221-0.56012 10.29545-2.426037 14.5625-5.451172 0.26405-0.187256 0.51979-0.386271 0.77735-0.582032 2.93485-1.752641 7.57154-5.120496 9.89453-10.066406 3.84302-9.898846 3.54613-15.374213 1.99023-17.546875zm-27.22461 33.646485c-0.71811 0.07704-1.43865 0.121653-2.16015 0.148437-2.41 6.018199-5.8875 11.601415-10.15235 16.484375-10.84623 12.38602-26.17288 20.1509-42.02148 24.17383-12.67415 3.23148-25.62977 4.30054-38.07031 6.8125-12.41468 2.55437-24.74274 6.63384-33.83985 14.73828-4.33234 3.80844-7.86894 8.51041-10.44922 13.68555-0.0274 2.76276-0.15209 5.52634-0.38476 8.2832-0.37294 4.34645-1.00725 8.6608-1.86328 12.92773 0.54491-0.18639 1.0988-0.34452 1.64843-0.51562 0.53135-3.11678 0.94401-6.2556 1.21485-9.41211 0.23267-2.75686 0.35736-5.52044 0.38476-8.2832 2.58028-5.17514 6.11688-9.87711 10.44922-13.68555 9.09711-8.10444 21.42517-12.18391 33.83985-14.73828 12.44054-2.51196 25.39616-3.58102 38.07031-6.8125 15.8486-4.02293 31.17525-11.78781 42.02148-24.17383 5.00052-5.72526 8.93351-12.407999 11.3125-19.632812zm0.21485-0.664063c0.12045-0.383099 0.25763-0.76045 0.36914-1.146484 0.1396-0.483428 0.24816-0.975298 0.37304-1.462891-0.64936 0.111151-1.30174 0.203136-1.95703 0.273438-0.27315 0.829542-0.57333 1.650222-0.88672 2.464843 0.70138-0.02136 1.4026-0.05897 2.10157-0.128906zm-1.21485-2.335937c0.0728-0.220982 0.14505-0.442065 0.21485-0.664063-0.28658 0.02867-0.57419 0.04396-0.86133 0.06445-0.0626 0.222779-0.11587 0.448155-0.18164 0.669922 0.27607-0.02218 0.55257-0.04075 0.82812-0.070309zm0.21485-0.664063c0.63751-0.06379 1.27345-0.148626 1.90625-0.251953 1.77045-7.318078 1.89707-15.043939 0.0664-22.34375-0.35085-1.415335-0.79608-2.820696-1.32617-4.195313 0.11258 0.398065 0.22709 0.795606 0.32617 1.195313 2.00683 8.002242 1.68555 16.522631-0.60351 24.449219-0.11151 0.386034-0.24869 0.763385-0.36914 1.146484zm-161.02735-22.837891c0.39033 1.266026 0.75379 2.54098 1.06445 3.833985 2.3071 9.685401 2.29368 19.838023 0.59376 29.693359 0.41615 0.510037 0.81123 1.036496 1.21679 1.554688 1.45929-9.400879 1.3841-19.034658-0.81055-28.248047-0.55811-2.322897-1.2544-4.601667-2.06445-6.833985zm183.33399 2.476563c0.26892 1.096181 0.67569 2.262919 1.21875 3.482422 0.0338-0.755545-0.13224-1.457503-0.57813-2.06836-0.23893-0.481017-0.44622-0.949925-0.64062-1.414062zm-393.92188 1.855469c-0.0809-0.0056-0.16146 0.000898-0.24219 0.002-0.28356 0.220039-0.62028 0.459311-1.10742 0.726562-0.54021 0.303454-1.1038 0.306829-1.63672 0.216797-0.85263 0.644405-1.44194 1.566677-1.69336 2.572266 0.11885 0.0758 0.2374 0.151984 0.34766 0.240234 0.004-0.008 0.004-0.01745 0.008-0.02539 0.14254-0.770421 1.32346 0.16208 2.64063 0.265624 0.12659-0.23254 0.25592-0.463951 0.41211-0.675781 0.40006-0.542766 0.90607-1.003107 1.49023-1.302734 0.58471-0.299878 1.24741-0.428188 1.88867-0.330078 0.32644 0.05007 0.64443 0.163689 0.9336 0.330078 0.22734 0.04105 0.49461 0.102669 0.8164 0.191406-0.41164-0.703962-2.15872-1.594639-2.91797-1.984375-0.31829-0.134095-0.63024-0.205037-0.93945-0.226562zm87.09961 0.07422c-0.94202 0.0029-1.8851 0.03051-2.82617 0.08203-16.99546 0.863617-33.17169 9.712217-45.98242 21.578125-2.35129 2.186386-4.63896 4.500171-6.98828 6.785156-2.12876 2.221084-4.26319 4.398593-6.53125 6.400393-4.31763 3.79082-9.196 7.05191-14.66993 8.36328-2.73356 0.66151-5.59353 0.84688-8.35156 0.38281-2.75526-0.46351-5.42507-1.57217-7.5957-3.32226-0.59089-0.4761-1.14228-1.00475-1.65235-1.57032-0.10662-0.0863-0.21775-0.1668-0.32226-0.25586-1.67023-1.42401-3.0314-3.20464-3.95313-5.1875 0.035 0.16768 0.06 0.3377 0.10157 0.50391 0.74944 2.98656 2.50511 5.68304 4.85156 7.68359 2.34459 1.99794 5.23114 3.31287 8.24805 3.90625 3.01446 0.59289 6.13745 0.49609 9.12695-0.14062 5.97167-1.28496 11.30177-4.56046 15.89453-8.4082 4.59763-3.83212 8.604-8.200041 12.8418-12.140629 12.81073-11.865908 28.98696-20.714508 45.98242-21.578125 6.05137-0.331296 12.14229 0.366536 17.96875 1.966796 1.06112-0.582316 2.13153-1.147798 3.21875-1.68164-6.17938-2.224305-12.76716-3.387429-19.36133-3.367186zm253.75 1.265625c0.20185 0.767774 0.42859 1.527022 0.70117 2.267579 1.76774 4.826836 4.90992 9.107309 8.90821 12.291015 3.9983 3.182893 8.8266 5.266373 13.8457 6.076172 1.00198 0.161584 2.01158 0.262048 3.02344 0.318359 0.10463-0.234737 0.21535-0.466858 0.3164-0.703125-1.07594-0.06799-2.14798-0.187687-3.20898-0.376953-4.87675-0.869514-9.53304-2.974519-13.33594-6.107422-1.8668-1.537503-3.5245-3.326953-4.92187-5.294922-2.25843-2.475153-4.07943-5.348676-5.32813-8.470703zm-339.2168 0.564453c-0.44829 0.02322-0.8934 0.159283-1.29297 0.378907-0.53338 0.293141-0.98989 0.737253-1.3496 1.253906-0.0965 0.138668-0.16891 0.294896-0.25196 0.443359 0.30591-0.02287 0.61265-0.08374 0.91211-0.251953 1.67973-0.921517 1.86682-1.59486 2.57813-1.730469-0.0289-0.04155-0.0753-0.06914-0.14844-0.07812-0.14882-0.01835-0.29783-0.02336-0.44727-0.01563zm-6.41406 2.054686c-0.0128 0.0015-0.0245 0.01741-0.0371 0.02148-0.0238 0.0883-0.0529 0.174609-0.0684 0.265625 0.10299 0.2055 0.20712 0.409498 0.32422 0.601563 0.001-0.251136 0.0427-0.4892 0.10547-0.71875-0.0235-0.02142-0.0424-0.04745-0.0664-0.06836-0.0927-0.08083-0.17761-0.110862-0.25781-0.101562zm143.56445 0.109375c-4.20215 0.05826-8.39738 0.4688-12.52539 1.25-3.36053 0.634358-6.68166 1.517619-9.92968 2.630859l-0.0742 0.126954c-0.0355-0.02133-0.0719-0.04125-0.10742-0.0625-9.44453 3.265202-18.25273 8.495968-25.51368 15.384765-9.80213 9.289917-16.85047 21.672297-19.52539 35.005857-2.24803 11.1729-1.40009 23.05471 2.4961 33.85157-3.02766-9.97309-3.53766-20.70484-1.4961-30.85157 2.67492-13.33356 9.72326-25.71594 19.52539-35.005857 7.26095-6.888797 16.06915-12.119564 25.51368-15.384765 0.0355 0.02125 0.0719 0.04117 0.10742 0.0625l0.0742-0.126954c3.24802-1.11324 6.56915-1.996501 9.92968-2.630859 13.20963-2.499841 27.1091-1.209345 39.71289 3.302734 12.61233 4.509725 23.99326 12.287903 32.98243 22.166011 7.94838 8.71994 13.9753 19.21709 17.91797 30.39844-3.88709-12.29972-10.26243-23.90271-18.91797-33.398435-8.98917-9.878118-20.3701-17.656291-32.98243-22.166016-8.6651-3.102054-17.94276-4.6809-27.1875-4.552734zm-136.2246 0.595703c-0.46245 0.01853-0.92091 0.140611-1.33985 0.355469-0.58416 0.299627-1.09017 0.759968-1.49023 1.302734-0.39989 0.542348-0.69931 1.163-0.91602 1.808594-0.15675 0.468438-0.26418 0.948194-0.35351 1.431641-0.0125-0.04516-0.0177-0.09182-0.0312-0.136719-0.15715-0.520602-0.38873-1.018065-0.68555-1.472656-0.014 0.177226-0.0366 0.351384-0.0488 0.529297-0.001 0.0727-0.0147 0.144224-0.0176 0.216796 0.12732 0.275898 0.23887 0.559303 0.31836 0.851563 0.009 0.03151 0.0115 0.06406 0.0195 0.0957-0.12743-0.08842-0.25939-0.210052-0.39062-0.330078-0.0107 0.08819-0.007 0.177872-0.0215 0.265625-0.0113 0.06903-0.0299 0.136409-0.043 0.205078 0.19602 0.149973 0.38144 0.25128 0.54296 0.291016 0.13695 0.793807 0.11983 1.615797-0.0332 2.410156-0.18745 0.972383-0.5681 1.904187-1.05859 2.773437-0.97962 1.740421-2.40687 3.204186-3.82422 4.689454-1.42359 1.4808-2.87078 3.029643-3.8711 4.923828-0.56097 1.074906-0.94156 2.234359-1.16015 3.425781 0.0648 0.748721 0.19265 1.49134 0.39453 2.210937 0.19598 0.70036 0.45842 1.380242 0.77344 2.035159-0.4659-2.417531-0.19544-5.001745 0.88672-7.218752 0.8508-1.766648 2.20703-3.296272 3.57617-4.820313 1.37535-1.519591 2.79607-3.080709 3.78125-4.941406 0.49191-0.931298 0.86341-1.937344 1.03515-2.984375 0.0597-0.363348 0.0854-0.730807 0.0918-1.099609 0.0755-1.101677 0.16938-2.195225 0.48438-3.21875 0.18941-0.617666 0.45257-1.20944 0.8125-1.726563 0.35971-0.516653 0.81623-0.960765 1.3496-1.253906 0.43969-0.241678 0.93399-0.374658 1.42774-0.375-0.0651-0.06982-0.1343-0.151347-0.20898-0.244141zm-7.48438 0.28125c0.0111 0.336736 0.0555 0.680628 0.14062 1.025391-0.46539-0.153044-0.95199-0.237101-1.4414-0.222657-0.27359 0.245757-0.60726 0.434766-1.0293 0.492188-0.34667 0.05081-0.63707 0.07225-0.89648 0.08008-0.44882 0.239171-0.81569 0.568402-1.07032 1.06836-0.28994 0.701909-0.95988 2.314114-0.82421 3.054687 1.32864-1.907256 1.26554-0.832953 3.79101-1.203125 1.11694-0.151969 1.61611-1.222026 2.01563-1.841797 0.38056 0.772787 0.86243 1.446969 1.33007 1.939453 0.0285-0.167463 0.056-0.334831 0.0723-0.503906-0.42195-0.491017-0.82841-1.092293-1.14258-1.759766 0.0651-0.0592 0.13053-0.107308 0.19922-0.115234 0.0802-0.0093 0.16509 0.02073 0.25781 0.101562 0.26861 0.233961 0.49728 0.507684 0.70508 0.796876-0.011-0.227272-0.0334-0.453317-0.0684-0.677735-0.0544-0.05633-0.111-0.110305-0.16797-0.164062-0.23001-0.09962-0.49486-0.320491-0.76757-0.59375-0.17315-0.101342-0.35195-0.193614-0.53516-0.275391-0.0499-0.166358-0.0824-0.332871-0.11524-0.498047-0.15932-0.219902-0.30644-0.452321-0.45311-0.703127zm9.06055 0.140625c-0.22518 0.503252-0.56992 1.23777-0.90039 1.458985 0.14072-0.665748 0.11771-0.925876-0.0215-1.140626-0.108 0.463287-0.39236 1.168236 0.008 1.789063 0.86867 1.377795 1.32582 0.874824 1.01368 2.351563 0.38821-0.259867 0.83676-1.29058 1.0332-1.738282 0.26243-0.746681-0.0405-1.392812-0.48828-2.158203-0.18179-0.227524-0.40414-0.41008-0.64453-0.5625zm238.07031 3.443359c2.96722 12.43692-6.90849 27.556508-12.91797 39.205078 0.33541 1.90508 0.65527 2.96431 0.74414 3.22461 1.55821-3.17927 3.24816-6.28956 5.10352-9.2832 5.79027-10.875659 11.41856-23.131811 7.07031-33.146488zm23.66211 9.248047c-2.41234 1.080937-4.81782 2.19069-7.11524 3.542969-3.80056 2.238502-7.31751 4.985843-10.50781 8.080078-2.05704 1.998411-3.98052 4.121544-5.78515 6.343754-5.39415 8.35331-9.15214 17.74096-12.01758 27.35937 2.63484 8.2755 4.2954 16.86844 4.94922 25.55469 0.20624-0.27515 0.42888-0.53767 0.64062-0.8086-0.80917-7.3866-2.34091-14.68264-4.58984-21.74609 3.83746-12.88119 9.27184-25.35112 18.09961-35.472655 2.83511-3.256875 6.02668-6.228673 9.57617-8.746094 2.13733-1.517263 4.43785-2.826099 6.75-4.107422zm-36.73242 3.214844c-4.04825 7.956419-3.15693 26.309837-3.41797 26.964847-1.42192-4.28001-5.44967-8.06154-7.69141-13.31836 1.71808 6.90608 7.01356 11.268 8.69141 16.31836 0.18294-0.45906-0.19287-9.60566 0.95508-17.7793 0.15048-3.470911 0.57407-7.525686 1.46289-12.185547zm-41.73047 66.253907c-1.76939 8.66903-5.59392 16.8529-10.89844 23.86133-5.30531 7.00786-12.14786 12.88663-19.89844 16.88281-7.7491 3.99895-16.38735 6.13992-25.05664 6.39844-4.46195 0.13153-8.92876-0.24876-13.28711-1.11524-4.85955-0.68243-9.64911-1.92644-14.21484-3.7832-13.5478-5.52235-25.00068-16.01756-31.91016-29.0625-1.41775-2.68002-2.63112-5.46298-3.66015-8.31445 1.20341 3.90646 2.74943 7.70254 4.66015 11.31445 6.90948 13.04494 18.36236 23.54015 31.91016 29.0625 8.43241 3.42924 17.61901 4.83584 26.625 4.29297 9.00614-0.53994 17.87007-3.03495 25.71875-7.38867 7.84723-4.35649 14.61692-10.53168 19.77344-17.79297 5.15731-7.26072 8.73312-15.63668 10.23828-24.35547zm-237.21875 24.07227c5.88376 21.48701-14.70058 43.15497-28.50977 60.08789-0.1317 0.79301-0.25008 1.54103-0.32812 2.14453 0.73374-0.0589 1.46744-0.12791 2.19922-0.21485 14.44036-17.56775 35.27779-40.01324 26.63867-62.01757zm304.64453 9.57031c-7.8713 0.0532-15.72058 1.78441-22.85547 4.99609-3.06647 11.85701-7.90817 23.24804-14.19727 33.74024-9.68147 16.18585-22.66844 30.3751-38.01953 41.48828-0.0831 0.0599-0.16865 0.11598-0.25195 0.17578 1.27632 0.26971 2.54143 0.58681 3.79883 0.93164 14.24173-10.81377 26.33183-24.31376 35.47265-39.5957 6.28909-10.4922 11.1308-21.88323 14.19727-33.74024 8.15416-3.67049 17.24183-5.40801 26.22852-4.91601 16.99543 0.86361 33.16971 9.71221 45.98047 21.57812 4.23778 3.94059 8.24612 8.3085 12.84374 12.14063 4.59276 3.84774 9.92095 7.12324 15.89258 8.4082 2.98951 0.63671 6.11252 0.73351 9.12696 0.14062 3.0169-0.59338 5.90348-1.90831 8.24804-3.90625 2.34647-2.00055 4.10407-4.69703 4.85352-7.68359 0.72019-2.87686 0.44342-5.98825-0.8418-8.64258 0.29326 1.52115 0.30499 3.09918 0.0469 4.63477 0.0445 1.24369-0.0936 2.49459-0.42774 3.68554-0.75157 2.68571-2.4372 5.08497-4.60547 6.83204-2.17065 1.75009-4.84043 2.85875-7.5957 3.32226-2.758 0.46407-5.61607 0.2787-8.34961-0.38281-2.45154-0.58731-4.77794-1.58037-6.99414-2.82227-3.76868-1.64101-7.2344-3.9728-10.35352-6.58593-4.59762-3.83213-8.60597-8.20004-12.84374-12.14063-12.81076-11.86591-28.98504-20.71451-45.98047-21.57812-1.12334-0.0615-2.24858-0.0877-3.37305-0.0801zm94.26953 5.94922c-0.48072 0.17892-0.93485 0.43458-1.33203 0.76171-0.82218 0.67764-1.4107 1.61797-1.71875 2.63868-0.13914 0.46095-0.2171 0.93704-0.25195 1.41601 0.15344 0.40497 0.34 0.79788 0.54492 1.18164-0.1056-0.82711-0.0793-1.67178 0.13867-2.47265 0.25844-0.95027 0.77632-1.84291 1.51953-2.49024 0.74172-0.64664 0.95038 1.93723 2.73242 2.17969 2.52547 0.37017 2.46236-0.70415 3.79102 1.20313 0.13564-0.74058-0.53426-2.35278-0.82422-3.05469-0.048-0.0942-0.10468-0.17491-0.16016-0.25781 0.006 0.11548 0.001 0.22049-0.0156 0.3125-1.32866-1.90727-1.26555-0.83296-3.79102-1.20313-0.23919-0.0325-0.44521-0.11141-0.63281-0.21484zm-3.23828 6.44336c0.006 0.0376 0.006 0.0758 0.0117 0.11328 0.17173 1.04703 0.54322 2.05308 1.03515 2.98437 0.98514 1.8607 2.40784 3.42182 3.78321 4.94141 1.3295 1.47994 2.63798 2.96947 3.49219 4.67187-0.17662-0.98672-0.4761-1.95031-0.91602-2.85156-0.0946-0.19633-0.21591-0.37952-0.32227-0.57031-0.53921-0.6212-1.09564-1.22349-1.65625-1.80664-1.41737-1.48527-2.84457-2.94903-3.82422-4.68946-0.18835-0.33384-0.35461-0.67824-0.50585-1.02929-0.38065-0.53322-0.74142-1.0817-1.05079-1.66602-0.0168-0.0319-0.0303-0.0656-0.0469-0.0976zm-414.14258 2.51757c-6.53912 8.21641-12.442 27.80926-14.44141 34.13086 0.17141 1.28046 0.28713 2.54316 0.30079 3.79492 0.14982-0.002 0.2994-0.005 0.44921-0.008 0.7652-2.3743 2.37003-7.70469 4.51758-13.71679 1.67069-6.16782 4.4597-14.31046 9.17383-24.20118zm80.98242 2.76368c-7.39817 0.0735-14.97735 2.25744-21.95117 5.37695-7.30775 3.33969-14.10179 7.80501-20.31836 12.9707-6.09875 5.08407-11.95031 11.13118-19.24804 16.15039-5.78558 3.93183-12.2195 6.84868-18.95704 8.71094 1.5082 0.64464 3.01469 1.27301 4.52149 1.9082 5.45549-1.83941 10.66773-4.37897 15.43555-7.61914 7.29773-5.01921 13.14929-11.06632 19.24804-16.15039 6.21657-5.16569 13.01061-9.63101 20.31836-12.9707 10.14374-4.53746 21.56785-7.09534 31.85352-4.05859 7.80946 2.24759 14.9584 7.73672 18.33984 15.13867 0.14377 0.31227 0.27769 0.63007 0.4082 0.94922-0.35973-1.35851-0.82599-2.6846-1.4082-3.94922-3.38144-7.40195-10.53038-12.89108-18.33984-15.13867-3.21427-0.94899-6.53954-1.35176-9.90235-1.31836zm33.56836 18.08398c1.71436 6.29237 1.26431 13.1411-1.60156 18.98633-1.70879 3.45679-4.24065 6.48726-7.36133 8.73047-0.92626 0.66521-1.90717 1.24663-2.92187 1.75976-2.14151 1.27279-4.53961 2.13565-7.01367 2.46289-3.04229 0.40436-6.22078-0.002-9.07032-1.20117-0.92479-0.31486-1.8261-0.69568-2.69336-1.14648-3.37552-1.75719-6.18329-4.53305-7.91797-7.88477-0.17542-0.3395-0.33204-0.68738-0.48437-1.03711 0.32674 1.39611 0.8224 2.75596 1.48437 4.03711 1.73468 3.35172 4.54245 6.12758 7.91797 7.88477 3.3747 1.75417 7.25991 2.48752 11.07227 2.13476 3.80996-0.35452 7.50352-1.76659 10.62695-4.00976 3.12068-2.24321 5.65254-5.27368 7.36133-8.73047 3.32909-6.79 3.40216-14.93411 0.60156-21.98633zm-30.90429 1.98242c-1.00644 0.76203-1.97911 1.56983-2.90625 2.3418-2.42603 2.02502-4.19771 4.81341-5.07813 7.8789-0.14463 2.50187 0.34841 5.03186 1.37305 7.30079-0.40715-1.79288-0.51523-3.65838-0.25977-5.48438 0.46652-3.35327 2.12535-6.58371 4.66992-8.88281 3.65807-1.73317 2.73354 0.97875 9.98633 3.00781 2.96548 1.06093 10.29497-3.13894 12.49414 0.70703-0.73286-1.41124-1.8033-2.99393-3.06836-4.48828-3.11531-0.76752-8.10392 1.61192-10.42578 0.78125-4.13634-1.15719-5.60131-2.51192-6.78515-3.16211zm-222.83204 11.99219c-18.66244 0.1022-37.32789 2.4894-55.38867 7.00195-52.213503 14.29291-81.308516 59.8884-125.03656 81.82388l-0.5364459 3.57722h2.7148434l-1.3239214-0.36694c28.025149-40.23663 72.87453-67.71551 125.18208-82.03416 36.12155-9.0251 74.66327-9.55361 110.75781-0.28906 15.03306 3.81631 29.97362 9.35581 45.07813 15.31641 15.1257 5.99204 30.40028 12.47254 46.31641 18.20507 32.39617 11.6718 66.30052 19.61497 100.76562 22.41407 24.15644 1.97681 48.7659 1.13965 72.7793-3.75586 18.36131-3.72599 36.3742-10.07904 52.81054-19.39063 0.14852-0.007 0.29675-0.0179 0.44532-0.0234 9.1127-0.32258 18.38168 1.50865 26.55859 5.56836 6.84809 3.34698 13.29147 8.42618 20.54883 12.92383 7.38623 4.59267 15.34415 8.34552 23.7207 10.85938 11.66596 3.59656 24.85511 4.39875 36.41797-0.59571 8.84794-3.88113 16.0649-11.41972 18.91016-20.64062 1.84848-6.04153 1.63586-12.67673-0.70703-18.48047 1.3521 5.02493 1.24385 10.45754-0.29297 15.48047-2.84526 9.2209-10.06222 16.75949-18.91016 20.64062-11.56286 4.99446-24.75201 4.19227-36.41797 0.59571-8.37655-2.51386-16.33447-6.26671-23.7207-10.85938-7.25736-4.49765-13.70074-9.57685-20.54883-12.92383-8.17691-4.05971-17.44589-5.89094-26.55859-5.56836-0.14857 0.006-0.29679 0.0164-0.44532 0.0234-16.43635 9.31159-34.44923 15.66464-52.81054 19.39063-24.0134 4.89551-48.62286 5.73267-72.7793 3.75586-34.4651-2.7991-68.36945-10.74227-100.76562-22.41407-15.91613-5.73253-31.19071-12.21303-46.31641-18.20507-15.10451-5.9606-30.04507-11.5001-45.07813-15.31641-18.04727-4.63228-36.70669-6.81509-55.36914-6.71289zm478.94727 17.39844c-3.8286 0.0221-7.62178 1.13099-10.80859 3.20703-3.18734 2.07911-5.71106 5.11765-7.10938 8.62304-0.0166 0.0418-0.0286 0.0851-0.0449 0.12696v0.002c-0.64193 2.44305-0.70192 5.05635-0.10547 7.52539 0.22068 0.91659 0.54092 1.81106 0.93555 2.67383-0.69573-3.20058-0.31484-6.61632 1.0039-9.57617 1.36195-3.06313 3.72628-5.66182 6.57813-7.36328 2.85265-1.70473 6.21952-2.52653 9.51562-2.41407 3.29858 0.11044 6.55768 1.16052 9.33008 2.91602 2.7753 1.75531 5.08654 4.23948 6.70508 7.08203 0.40274 0.70116 0.76208 1.42643 1.07617 2.16992-0.46327-1.80784-1.14735-3.55287-2.07617-5.16992-1.61854-2.84255-3.92978-5.32672-6.70508-7.08203-2.12575-1.34604-4.53873-2.27259-7.03515-2.68359-0.41938-0.0232-0.83948-0.0393-1.25977-0.0371zm-18.72266 22.03515c0.0633 0.27857 0.11939 0.55903 0.19727 0.83399 1.02158 3.59767 3.29791 6.7976 6.35352 8.87695 3.80664 2.58361 9.07177 5.6127 13.39062 4.29492 4.31807-1.32051 7.59305-6.95757 9.24023-11.07031-0.71288 1.59033-2.10863 2.17629-3.79101 2.375-1.70536 2.60211-3.88763 4.91195-6.44922 5.69531-2.7657 0.84388-5.91587-0.0997-8.82617-1.5625-0.92534 0.27791-1.87336 0.18219-2.94336-0.61133-1.30494-0.96498-2.42558-2.16123-3.33594-3.49804-1.62235-1.48483-2.93205-3.30987-3.83594-5.33399z" transform="translate(49.0625,-159.09375)" filter="url(#filter20315)" fill="#577c25"/>
  </g>
  <rect id="Vine" opacity=".1" style="color:#000000" height="337.35529" width="2002.179" y="-10.725312" x="2.0219553" stroke-width="0" fill="none"/>
 </g>
 <g id="layer2" transform="translate(-1.1524484,10.725312)">
  <rect id="frame1" opacity=".1" style="color:#000000" height="333.43729" width="2e3" stroke="#000" y="-798.0722" x="325.06824" stroke-width="3.9180002" fill="none"/>
  <g id="g21355" transform="matrix(-.07051319 .04184252 .04704037 .06515205 374.95466 -567.73753)">
   <path id="path21357" d="m437.8944 182.68405c0 72.99718-77.66321 101.61697-176.7857 101.61697s-182.35376-28.61979-182.35376-101.61697c-0.000004-72.99719 80.44724-132.24128 179.56973-132.24128s179.56973 59.24409 179.56973 132.24128z" transform="matrix(.93753591 .00829926 .01033542 .96443122 25.019708 .48808522)" fill="url(#radialGradient21370)"/>
   <path id="path21359" style="color-rendering:auto;text-decoration-color:#000000;color:#000000;isolation:auto;mix-blend-mode:normal;shape-rendering:auto;solid-color:#000000;block-progression:tb;text-decoration-line:none;text-decoration-style:solid;image-rendering:auto;white-space:normal;text-indent:0;text-transform:none" d="m337.25195-467.54102c-2.21985-0.0473-4.56499 0.31477-6.85742 1.12891-3.47601 1.23448-6.21017 3.29738-7.89648 5.69141-0.0639 0.069-0.13519 0.13464-0.19532 0.20508-0.0432 0.0509-0.07 0.11189-0.0781 0.17773-0.003 0.004-0.007 0.008-0.01 0.0117-1.65482 2.5637-2.10645 5.49553-0.89648 8.14453 1.07657 2.35695 3.10567 3.68907 5.60547 4.17383 0.27432 1.24383 0.68571 2.03998 1.40625 3.24609 0.60693 1.0466 2.21521 0.22159 1.58008-0.81055-0.58498-0.97919-0.87521-1.50172-1.08008-2.22656 1.25127 0.0433 2.58743-0.0738 3.98242-0.32422 0.37191 1.14291 0.84644 1.86043 1.6582 2.94336 0.69081 0.94119 2.22643 0.0634 1.51368-0.86523-0.8-1.06723-1.12895-1.5027-1.41993-2.45703 1.08475-0.26923 2.19256-0.60018 3.31836-1 0.50049-0.17775 0.98907-0.36601 1.46875-0.5586 0.26525 1.08959 0.57924 1.61027 1.4043 2.98828 0.25062 0.43203 0.81732 0.6014 1.25781 0.375 0.44049-0.22639 0.58519-0.75984 0.32227-1.18554-0.93287-1.55807-1.17609-2.00332-1.28711-2.79883-0.004-0.0369-0.0265-0.0662-0.0352-0.10156 0.68875-0.32143 1.35071-0.65828 1.97071-1.01368 1.36732-0.9056 2.66842-1.81119 3.61328-2.71679 0.13029-0.13583 0.24175-0.27833 0.36132-0.41797 0.27656 1.01306 0.086 1.52975 0.76563 3.25391 0.41235 1.14011 2.10571 0.68503 1.69336-0.45508-0.6264-1.73238-0.76961-2.10414-0.6543-4.10938 0.006-0.0912-0.002-0.18416-0.0254-0.27539-0.0281-0.40308-0.11145-0.80418-0.24023-1.20117 0.0444-0.16561 0.0742-0.33348 0.10351-0.50195 0.22097 0.50258 0.87816 0.71288 1.36719 0.4375 1.55127-0.85465 1.95401-1.07373 3.75586-1.49805 1.21057-0.26912 0.67988-1.95458-0.52149-1.65625-0.95171 0.22412-1.6199 0.42725-2.24414 0.68359-0.62423 0.25635-1.20584 0.56503-1.98828 0.9961-0.11426 0.062-0.21156 0.14669-0.28515 0.24804 0.0244-0.86928-0.1437-1.76827-0.56446-2.68945-1.20997-2.649-3.84081-4.48752-7.04882-5.32422-1.20301-0.31376-2.4884-0.48918-3.82032-0.51758zm0.0254 0.81641c1.26199 0.0266 2.47431 0.19283 3.59961 0.48633 0.44302 0.071 0.15766 0.3334 0.23438 0.37109-0.0876 0.2911 0.11436 0.56701 0.29101 0.83985 0.26124 0.40347 0.76082 0.68278 1.27149 0.82031 0.51067 0.13752 1.06492 0.1564 1.58594 0.0449 0.17671-0.0378 0.32629-0.12176 0.40039-0.24805 0.0174-0.0297 0.0163-0.0653 0.0254-0.0976 1.1599 0.82737 2.07144 1.86473 2.63281 3.09375 0.36291 0.79451 0.5156 1.5533 0.50976 2.28711-1.23938-1.93379-3.60161-3.61956-6.6914-4.75391-3.20763-1.17761-7.07662-1.27646-10.56445-0.62695-0.87196 0.16237-1.72059 0.37056-2.5293 0.62304-0.70832 0.22115-1.38014 0.4796-2.01563 0.76563 1.33108-1.0193 2.91619-1.89052 4.71485-2.5293 0.70762-0.25131 1.4197-0.44544 2.13086-0.60742 0.14514 0.36669 0.44306 0.63567 0.77539 0.78125 0.37951 0.16625 0.81896 0.21001 1.26562 0.125 0.44667-0.085 0.82856-0.28452 1.09766-0.57422 0.19286-0.20762 0.32886-0.48232 0.35351-0.78711 0.30538-0.01 0.61173-0.02 0.91211-0.0137zm-2.53906 2.65625c2.15913-0.0228 4.29447 0.27574 6.12891 0.94922 2.9828 1.09507 5.16644 2.71252 6.21875 4.43555 0.20921 0.34255 0.36436 0.68936 0.48633 1.03906-0.0532 0.15695-0.10657 0.31433-0.17579 0.46875-0.25796 0.12994-0.42069 0.3843-0.43359 0.67773-0.003 0.046 0.00035 0.0762-0.002 0.1211-0.28353 0.44366-0.62188 0.878-1.0293 1.30273-5.76877 5.38874-18.9866 7.52371-23.55469 3.07813-0.0856-0.15529-0.17739-0.3032-0.2539-0.47071-1.07936-2.36304-0.69885-5.0029 0.83984-7.39648 0.0536-0.0247 0.0994-0.0592 0.13477-0.10156 1.48715-1.74228 4.44949-3.10663 7.78906-3.72852 1.25234-0.23321 2.55609-0.36131 3.85156-0.375zm-3.87305 1.27539c-0.32071 0.0252-0.66071 0.10262-1.00195 0.24219-0.68248 0.27914-1.19267 0.73737-1.46484 1.19922-0.27218 0.46185-0.33534 0.94558-0.16016 1.375 0.17519 0.42941 0.56085 0.73214 1.07813 0.87109 0.51728 0.13896 1.20032 0.10922 1.88281-0.16992 0.68248-0.27914 1.19071-0.73737 1.46289-1.19922 0.27217-0.46185 0.33534-0.94558 0.16016-1.375-0.17519-0.42941-0.5589-0.73214-1.07618-0.87109-0.25864-0.0695-0.56014-0.0975-0.88086-0.0723zm8.55079 1.01367c-0.14313 0.008-0.29243 0.0281-0.44336 0.0605-0.60374 0.12985-1.09413 0.43072-1.39063 0.76367-0.29649 0.33295-0.42848 0.71203-0.36523 1.07813 0.0632 0.36609 0.31109 0.66153 0.69726 0.84765s0.94315 0.26267 1.54688 0.13282c0.60373-0.12986 1.09413-0.43268 1.39062-0.76563 0.2965-0.33295 0.43044-0.71008 0.36719-1.07617-0.0632-0.36609-0.31305-0.66154-0.69922-0.84766-0.28963-0.13959-0.67415-0.21802-1.10351-0.19336zm-3.4375 5.45313c-0.35261-0.053-0.80352 0.003-1.20118 0.22265-0.39765 0.21969-0.62564 0.5379-0.69531 0.82422-0.0697 0.28632-0.004 0.56287 0.1875 0.79297 0.19185 0.2301 0.48138 0.38056 0.83399 0.4336 0.3526 0.053 0.80351-0.001 1.20117-0.22071 0.39765-0.21968 0.62564-0.53985 0.69531-0.82617 0.0697-0.28632 0.004-0.56092-0.1875-0.79101-0.19185-0.2301-0.48137-0.38252-0.83398-0.43555zm-8.43555 0.0957c-0.38053 0.0232-0.78692 0.13781-1.14649 0.36524-0.47941 0.30323-0.74754 0.7264-0.8164 1.11718-0.0689 0.39079 0.0429 0.77068 0.32812 1.08008 0.28521 0.3094 0.69669 0.49702 1.16992 0.54492 0.47324 0.0479 1.03621-0.0542 1.51563-0.35742 0.47942-0.30324 0.7495-0.7264 0.81836-1.11719 0.0689-0.39078-0.0429-0.77067-0.32813-1.08007-0.2852-0.30941-0.69863-0.49898-1.17187-0.54688-0.11831-0.012-0.2423-0.0136-0.36914-0.006z" transform="matrix(-11.131109,4.1682263,5.1038582,11.778701,6327.7762,4165.2738)"/>
   <ellipse id="ellipse21361" stroke-linejoin="round" stroke-linecap="round" rx="7.3080707" transform="matrix(7.0211848,5.074561,-3.4286369,4.4073699,1480.305,-2616.4419)" stroke="#000" ry="9.4164762" cy="557.15338" cx="77.604752" stroke-width=".24126793" fill="url(#radialGradient21372)"/>
  </g>
  <rect id="frame2" opacity=".1" style="color:#000000" transform="rotate(-11.659899)" height="333.43729" width="2e3" stroke="#000" y="-677.5614" x="340.34695" stroke-width="3.9180002" fill="none"/>
  <rect id="frame4" opacity=".1" style="color:#000000" transform="matrix(.83694705 -.54728388 .54728388 .83694704 0 0)" height="333.43729" width="2e3" stroke="#000" y="-495.89951" x="304.34399" stroke-width="3.9180002" fill="none"/>
  <rect id="frame5" height="333.43729" stroke="#000" stroke-width="3.9180002" fill="none" style="color:#000000" transform="rotate(-13.971296)" width="2e3" opacity=".1" y="-677.9635" x="156.92796"/>
  <rect id="frame6" opacity=".1" style="color:#000000" transform="rotate(-.39878757)" height="333.43729" width="2e3" stroke="#000" y="-749.28156" x=".56838995" stroke-width="3.9180002" fill="none"/>
  <rect id="frame7" opacity=".1" style="color:#000000" transform="matrix(.90828839 -.4183446 .41834459 .90828839 0 0)" height="333.43729" width="2e3" stroke="#000" y="-542.18085" x="156.17885" stroke-width="3.9180002" fill="none"/>
  <rect id="frame3a" opacity=".1" style="color:#000000" transform="matrix(.85422968 -.51989581 .51989583 .85422967 0 0)" height="333.43729" width="2e3" stroke="#000" y="-490.30811" x="403.00488" stroke-width="3.9180002" fill="none"/>
  <rect id="frame3" opacity=".1" style="color:#000000" transform="matrix(.7789959 -.62702901 .62702903 .77899589 722.31024 -219.2737)" height="333.43729" width="2e3" stroke="#000" y="-694.8681" x="-297.81461" stroke-width="3.9180002" fill="none"/>
 </g>
 <script id="sozi-script" ns1:version="13.11-30213629">/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */
/**
 * Create or augment a namespace.
 *
 * &lt;p&gt;A typical use of this function is:&lt;/p&gt;
 *
 * &lt;pre&gt;
 * namespace(this, &quot;a.b.c&quot;, function (exports, globals) {
 *     exports.foo = function (x) {
 *         ...
 *     };
 * });
 * &lt;/pre&gt;
 *
 * &lt;p&gt;where &lt;code&gt;this&lt;/code&gt; is the global object.&lt;/p&gt;
 *
 * &lt;p&gt;In this example, function &lt;code&gt;foo&lt;/code&gt; is exported and can be
 * called as &lt;code&gt;a.b.c.foo(someValue)&lt;/code&gt;.&lt;/p&gt;
 *
 * @memberOf _global_
 * @param globals The global object
 * @param {String} path The dot-separated path to the namespace
 * @param {Function} body A function to execute in the context of the namespace
 */
function namespace(globals, path, body) {
    &quot;use strict&quot;;
    // Start name lookup in the global object
	var current = globals;
	// For each name in the given path
	path.split(&quot;.&quot;).forEach(function (name) {
	    // If the current path element does not exist
	    // in the current namespace, create a new sub-namespace
		if (typeof current[name] === &quot;undefined&quot;) {
			current[name] = {};
		}
		// Move to the namespace for the current path element
		current = current[name];
	});
	// Execute the given function in the last namespace
	if (body) {
	    body(current, globals);
	}
	return current;
}
/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */
/**
 * @name sozi.events
 * @namespace A simple event system for Sozi.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.events&quot;, function (exports) {
    /** @lends sozi.events */
    &quot;use strict&quot;;
    /**
     * A registry of callback functions for each event type.
     *
     * &lt;p&gt;Call {@link sozi.events.listen} to add a new listener.&lt;/p&gt;
     */
    var listenerRegistry = {};
    /**
     * Adds a listener for a given event type.
     *
     * @memberOf sozi.events
     * @name listen
     * @function
     * @param {String} key The identifier of the event type to listen
     * @param {Function} handler The function to call when a corresponding event is fired
     */
    exports.listen = function (key, handler) {
        if (!listenerRegistry.hasOwnProperty(key)) {
            listenerRegistry[key] = [];
        }
        listenerRegistry[key].push(handler);
    };
    /**
     * Fire an event of a given type.
     *
     * &lt;p&gt;All event handlers added for the given event type are
     * executed.&lt;/p&gt;
     *
     * &lt;p&gt;Additional arguments provided to this function are passed
     * to the event handlers.&lt;/p&gt;
     *
     * @memberOf sozi.events
     * @name fire
     * @function
     * @param {String} key The identifier of the event type to fire
     */
    exports.fire = function (key) {
        var args = Array.prototype.slice.call(arguments, 1);
        if (listenerRegistry.hasOwnProperty(key)) {
            listenerRegistry[key].forEach(function (listener) {
                listener.apply(null, args);
            });
        }
    };
});
/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */
/**
 * @name sozi.proto
 * @namespace Helpers for prototype inheritance.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.proto&quot;, function (exports) {
    &quot;use strict&quot;;
    exports.Object = {
        installConstructors: function () {
            function InstanceConstructor() {}
            InstanceConstructor.prototype = this;
            this.instance = function () {
                var result = new InstanceConstructor();
                result.construct.apply(result, arguments);
                return result;
            };
            this.subtype = function (anObject) {
                var result = new InstanceConstructor();
                result.augment(anObject);
                result.installConstructors();
                return result;
            };
        },
        construct: function () {},
        augment: function (anObject) {
            for (var attr in anObject) {
                if (anObject.hasOwnProperty(attr)) {
                    this[attr] = anObject[attr];
                }
            }
            return this;
        },
        bind: function (aFunction) {
            var self = this;
            return function () {
                return aFunction.apply(self, arguments);
            }
        }
    };
    // Bootstrap the root object
    exports.Object.installConstructors();
});
/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */
/**
 * @name sozi.actions
 * @namespace Callback functions for DOM event handlers
 * @depend namespace.js
 */
namespace(this, &quot;sozi.actions&quot;, function (exports, window) {
    /** @lends sozi.actions */
    &quot;use strict&quot;;
    // Module aliases
    var player = namespace(window, &quot;sozi.player&quot;);
    var display = namespace(window, &quot;sozi.display&quot;);
    // The global document object
    var document = window.document;
    // Constants: mouse button numbers
    var DRAG_BUTTON = 0;    // Left button
    var TOC_BUTTON = 1;     // Middle button
    // Constants: increments for zooming and rotating,
    // threshold for dragging
    var SCALE_FACTOR = 1.05;
    var ROTATE_STEP = 5;
    var DRAG_THRESHOLD_PX = 5;
    /**
     * The status of the current drag operation.
     *
     * @type Boolean
     */
    var mouseDragged = false;
    /**
     * The X coordinate of the mouse on the latest &quot;down&quot; or &quot;drag&quot; event.
     *
     * @type Number
     */
    var mouseLastX = 0;
    /**
     * The Y coordinate of the mouse on the latest &quot;down&quot; or &quot;drag&quot; event.
     *
     * @type Number
     */
    var mouseLastY = 0;
    /**
     * Zooms the display in the given direction.
     *
     * &lt;p&gt;Only the sign of &lt;code&gt;direction&lt;/code&gt; is used:&lt;/p&gt;
     * &lt;ul&gt;
     *  &lt;li&gt;zoom in when &lt;code&gt;direction &gt; 0&lt;/code&gt;&lt;/li&gt;
     *  &lt;li&gt;zoom out when &lt;code&gt;direction &lt;= 0&lt;/code&gt;&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * &lt;p&gt;The scaling is centered around point (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;).&lt;/p&gt;
     *
     * @param {Number} direction The direction of the scaling operation
     * @param {Number} x The X coordinate of the scaling center
     * @param {Number} y The Y coordinate of the scaling center
     */
    function zoom(direction, x, y) {
        player.stop();
        display.viewPorts[&quot;player&quot;].zoom(direction &gt; 0 ? SCALE_FACTOR : 1 / SCALE_FACTOR, x, y);
    }
    /**
     * Rotate the display in the given direction.
     *
     * &lt;p&gt;Only the sign of &lt;code&gt;direction&lt;/code&gt; is used:&lt;/p&gt;
     * &lt;ul&gt;
     *  &lt;li&gt;rotate anticlockwise when direction &gt; 0&lt;/li&gt;
     *  &lt;li&gt;rotate clockwise when direction &lt;= 0&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @param {Number} direction The direction of the rotation
     */
    function rotate(direction) {
        player.stop();
        display.viewPorts[&quot;player&quot;].rotate(direction &gt; 0 ? ROTATE_STEP : -ROTATE_STEP);
    }
    /**
     * Show/hide the frame list.
     *
     * &lt;p&gt;The presentation stops when the frame list is showed,
     * and restarts when the frame list is hidden.&lt;/p&gt;
     */
    function toggleFrameList() {
        if (sozi.framelist.isVisible()) {
            sozi.framelist.hide();
            player.restart();
        } else {
            player.stop();
            sozi.framelist.show();
        }
    }
    function isPlayerEvent(evt) {
        return display.viewPorts[&quot;player&quot;].contains(evt.clientX, evt.clientY);
    }
    /**
     * Event handler: mouse down.
     *
     * &lt;p&gt;When the left button is pressed, we register the current coordinates
     * in case the mouse will be dragged. Handler {@link sozi.actions-onMouseDrag} is set until
     * the button is released ({@link sozi.actions-onMouseUp}).&lt;/p&gt;
     *
     * &lt;p&gt;When the middle button is pressed, the table of contents is shown or hidden.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onMouseDown(evt) {
        if (!isPlayerEvent(evt)) {
            return;
        }
        if (evt.button === DRAG_BUTTON) {
            document.documentElement.addEventListener(&quot;mousemove&quot;, onMouseDrag, false);
            mouseDragged = false;
            mouseLastX = evt.clientX;
            mouseLastY = evt.clientY;
        } else if (evt.button === TOC_BUTTON) {
            toggleFrameList();
        }
        evt.stopPropagation();
        evt.preventDefault();
    }
    /**
     * Event handler: mouse move.
     *
     * &lt;p&gt;If the left mouse button is down, then the mouse move is a drag action.
     * This method computes the displacement since the button was pressed or
     * since the last move, and updates the reference coordinates for the next move.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onMouseDrag(evt) {
        if (!isPlayerEvent(evt)) {
            return;
        }
        player.stop();
        // The drag action is confirmed when one of the mouse coordinates
        // has moved past the threshold
        if (!mouseDragged &amp;&amp; (Math.abs(evt.clientX - mouseLastX) &gt; DRAG_THRESHOLD_PX ||
                              Math.abs(evt.clientY - mouseLastY) &gt; DRAG_THRESHOLD_PX)) {
            mouseDragged = true;
        }
        if (mouseDragged) {
            sozi.events.fire(&quot;sozi.player.cleanup&quot;);
            display.viewPorts[&quot;player&quot;].drag(evt.clientX - mouseLastX, evt.clientY - mouseLastY);
            mouseLastX = evt.clientX;
            mouseLastY = evt.clientY;
        }
        evt.stopPropagation();
    }
    /**
     * Event handler: mouse up.
     *
     * &lt;p&gt;Releasing the left button removes the {@link sozi.actions-onMouseDrag} handler.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onMouseUp(evt) {
        if (!isPlayerEvent(evt)) {
            return;
        }
        if (evt.button === DRAG_BUTTON) {
            document.documentElement.removeEventListener(&quot;mousemove&quot;, onMouseDrag, false);
        }
        evt.stopPropagation();
        evt.preventDefault();
    }
    /**
     * Event handler: context menu (i.e right click).
     *
     * &lt;p&gt;Right click goes one frame back.&lt;/p&gt;
     *
     * &lt;p&gt;There is no &quot;click&quot; event for the right mouse button and the menu
     * can&apos;t be disabled in {@link sozi.actions-onMouseDown}.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onContextMenu(evt) {
        if (!isPlayerEvent(evt)) {
            return;
        }
        player.moveToPrevious();
        evt.stopPropagation();
        evt.preventDefault();
    }
    /**
     * Event handler: mouse click.
     *
     * &lt;p&gt;Left-click moves the presentation to the next frame.&lt;/p&gt;
     *
     * &lt;p&gt;No &quot;click&quot; event is generated for the middle button in Firefox.
     * See {@link sozi.actions-onMouseDown} for middle click handling.&lt;/p&gt;
     *
     * &lt;p&gt;Dragging the mouse produces a &quot;click&quot; event when the button is released.
     * If flag {@link sozi.actions-mouseDragged} was set by {@link sozi.actions-onMouseDrag},
     * then the click event is the result of a drag action.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onClick(evt) {
        if (!isPlayerEvent(evt)) {
            return;
        }
        if (!mouseDragged &amp;&amp; evt.button !== TOC_BUTTON) {
            player.moveToNext();
        }
        evt.stopPropagation();
        evt.preventDefault();
    }
    /**
     * Event handler: mouse wheel.
     *
     * &lt;p&gt;Rolling the mouse wheel stops the presentation and zooms the current display.&lt;/p&gt;
     *
     * FIXME shift key does not work in Opera
     *
     * @param {Event} evt The DOM event object
     */
    function onWheel(evt) {
        if (!isPlayerEvent(evt)) {
            return;
        }
        if (!evt) {
            evt = window.event;
        }
        var delta = 0;
        if (evt.wheelDelta) { // IE and Opera
            delta = evt.wheelDelta;
        }
        else if (evt.detail) { // Mozilla
            delta = -evt.detail;
        }
        if (delta !== 0) {
            if (evt.shiftKey) {
                rotate(delta);
            }
            else {
                zoom(delta, evt.clientX, evt.clientY);
            }
        }
        evt.stopPropagation();
        evt.preventDefault();
    }
    /**
     * Event handler: key press.
     *
     * &lt;p&gt;Keyboard handling is split into two methods:
     * {@link sozi.actions-onKeyPress} and {@link sozi.actions-onKeyDown}
     * in order to get the same behavior across browsers.&lt;/p&gt;
     *
     * &lt;p&gt;This method handles character keys &quot;+&quot;, &quot;-&quot;, &quot;=&quot;, &quot;F&quot; and &quot;T&quot;.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onKeyPress(evt) {
        // Keys with modifiers are ignored
        if (evt.altKey || evt.ctrlKey || evt.metaKey) {
            return;
        }
        switch (evt.charCode || evt.which) {
        case 43: // +
            zoom(1, window.innerWidth / 2, window.innerHeight / 2);
            break;
        case 45: // -
            zoom(-1, window.innerWidth / 2, window.innerHeight / 2);
            break;
        case 61: // =
            player.moveToCurrent();
            break;
        case 70: // F
        case 102: // f
            player.showAll();
            break;
        case 84: // T
        case 116: // t
            toggleFrameList();
            break;
        case 82: // R
            rotate(-1);
            break;
        case 114: // r
            rotate(1);
            break;
        default:
            return;
        }
        evt.stopPropagation();
        evt.preventDefault();
    }
    /**
     * Event handler: key down.
     *
     * &lt;p&gt;Keyboard handling is split into two methods:
     * {@link sozi.actions-onKeyPress} and {@link sozi.actions-onKeyDown}
     * in order to get the same behavior across browsers.&lt;/p&gt;
     *
     * &lt;p&gt;This method handles navigation keys (arrows, page up/down, home, end)
     * and the space and enter keys.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onKeyDown(evt) {
        // Keys with Alt/Ctrl/Meta modifiers are ignored
        if (evt.altKey || evt.ctrlKey || evt.metaKey) {
            return;
        }
        switch (evt.keyCode) {
            case 36: // Home
                if (evt.shiftKey) {
                    player.jumpToFirst();
                }
                else {
                    player.moveToFirst();
                }
                break;
            case 35: // End
                if (evt.shiftKey) {
                    player.jumpToLast();
                }
                else {
                    player.moveToLast();
                }
                break;
            case 38: // Arrow up
            case 33: // Page up
            case 37: // Arrow left
                if (evt.shiftKey) {
                    player.jumpToPrevious();
                }
                else {
                    player.moveToPrevious();
                }
                break;
            case 40: // Arrow down
            case 34: // Page down
            case 39: // Arrow right
            case 13: // Enter
            case 32: // Space
                if (evt.shiftKey) {
                    player.jumpToNext();
                }
                else {
                    player.moveToNext();
                }
                break;
            default:
                // Ignore other keys and propagate the event
                return;
        }
        // Stop event propagation for supported keys
        evt.stopPropagation();
        // In some versions of Chrome/Chromium, preventDefault() inhibits the &quot;keypress&quot; event
        evt.preventDefault();
    }
    /**
     * Dummy event handler: stop event propagation.
     *
     * @param {Event} evt The DOM event object
     */
    function stopEvent(evt) {
        evt.stopPropagation();
    }
    /**
     * Event handler: document load.
     *
     * &lt;p&gt;This function sets up all other event handlers for the player.&lt;/p&gt;
     */
    function onDisplayReady() {
        // Prevent event propagation when clicking on a link
        // FIXME does not work in Firefox when the &lt;a&gt; is referenced through a &lt;use&gt;
        var links = document.getElementsByTagName(&quot;a&quot;);
        // for (var i = 0; i &lt; links.length; i += 1) {
           // links[i].addEventListener(&quot;click&quot;, stopEvent, false);
           // links[i].addEventListener(&quot;contextmenu&quot;, stopEvent, false);
        // }
        // Mouse events are constrained to the player viewport
        // see isPlayerEvent()
        // TODO also use shift-click as an alternative for middle-click
        var svgRoot = document.documentElement;
        // svgRoot.addEventListener(&quot;click&quot;, onClick, false);
        // svgRoot.addEventListener(&quot;mousedown&quot;, onMouseDown, false);
        // svgRoot.addEventListener(&quot;mouseup&quot;, onMouseUp, false);
        // svgRoot.addEventListener(&quot;contextmenu&quot;, onContextMenu, false);
        // svgRoot.addEventListener(&quot;DOMMouseScroll&quot;, onWheel, false); // Mozilla
        // window.onmousewheel = onWheel;
        // Keyboard events are global to the SVG document
        // svgRoot.addEventListener(&quot;keypress&quot;, onKeyPress, false);
        // svgRoot.addEventListener(&quot;keydown&quot;, onKeyDown, false);
    }
    sozi.events.listen(&quot;sozi.display.ready&quot;, onDisplayReady); // @depend events.js
});
/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */
/**
 * @name sozi.animation
 * @namespace A general-purpose animation controller.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.animation&quot;, function (exports, window) {
    /** @lends sozi.animation */
    &quot;use strict&quot;;
    /**
     * The browser-specific function to request an animation frame.
     *
     * @function
     */
    var requestAnimationFrame =
	    window.requestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            window.oRequestAnimationFrame;
    var getCurrentTime = function () {
        return window.performance &amp;&amp; window.performance.now ?
            window.performance.now() :
            Date.now();
    };
    exports.setAnimationFrameHandlers = function (requestAnimationFrameFunction, getCurrentTimeFunction) {
        requestAnimationFrame = requestAnimationFrameFunction;
        getCurrentTime = getCurrentTimeFunction;
    };
    /**
     * The default time step.
     *
     * &lt;p&gt;For browsers that do not support animation frames.&lt;/p&gt;
     *
     * @constant
     * @type Number
     */
    var TIME_STEP_MS = 40;
    /**
     * The handle provided by &lt;code&gt;setInterval()&lt;/code&gt;.
     *
     * &lt;p&gt;For browsers that do not support animation frames.&lt;/p&gt;
     */
    var timer;
    /**
     * The list of running animators.
     *
     * @type Array
     */
    var animatorList = [];
    /**
     * The main animation loop.
     *
     * &lt;p&gt;This function is called periodically and triggers the
     * animation steps in all running animators.&lt;/p&gt;
     *
     * &lt;p&gt;If all animators are removed from the list of running animators,
     * then the periodic calling is disabled.&lt;/p&gt;
     *
     * &lt;p&gt;This function can be called either through {@link sozi.animation-requestAnimationFrame}
     * if the browser supports it, or through &lt;code&gt;setInterval()&lt;/code&gt;.&lt;/p&gt;
     */
    function loop() {
        if (animatorList.length &gt; 0) {
            // If there is at least one animator,
            // and if the browser provides animation frames,
            // schedule this function to be called again in the next frame.
            if (requestAnimationFrame) {
                requestAnimationFrame(loop);
            }
            // Step all animators
            animatorList.forEach(function (animator) {
                // TODO use timestamp argument:
                // browser compatibility issue with Date.now()
                // and performance.now() timestamps.
                animator.step(getCurrentTime());
            });
        }
        else {
            // If all animators have been removed,
            // and if this function is called periodically
            // through setInterval, disable the periodic calling.
            if (!requestAnimationFrame) {
                window.clearInterval(timer);
            }
        }
    }
    /**
     * Start the animation loop.
     *
     * &lt;p&gt;This function delegates the periodic update of all animators
     * to the {@link sozi.animation-loop} function, either through {@link sozi.animation-requestAnimationFrame}
     * if the browser supports it, or through &lt;code&gt;setInterval()&lt;/code&gt;.&lt;/p&gt;
     */
    function start() {
        if (requestAnimationFrame) {
            requestAnimationFrame(loop);
        }
        else {
            timer = window.setInterval(function () {
                loop(getCurrentTime());
            }, TIME_STEP_MS);
        }
    }
    /**
     * Add a new animator object to the list of running animators.
     *
     * &lt;p&gt;If the animator list was empty before calling this function,
     * then the animation loop is started.&lt;/p&gt;
     *
     * @param {sozi.animation.Animator} animator The animator object to add.
     */
    function addAnimator(animator) {
        animatorList.push(animator);
        if (animatorList.length === 1) {
            start();
        }
    }
    /**
     * Remove the given animator from the list of running animators.
     *
     * @param {sozi.animation.Animator} animator The animator object to add.
     */
    function removeAnimator(animator) {
        animatorList.splice(animatorList.indexOf(animator), 1);
    }
    /**
     * @class
     *
     * An animator provides the logic for animating other objects.
     *
     * &lt;p&gt;The main purpose of an animator is to schedule the update
     * operations in the animated objects.&lt;/p&gt;
     *
     * @memberOf sozi.animation
     * @name Animator
     * @depend proto.js
     */
    exports.Animator = sozi.proto.Object.subtype({
        /** @lends sozi.animation.Animator */
        /**
         * Construct a new animator.
         */
        construct: function () {
            /**
             * The animation duration, in milliseconds.
             * @type Number
             */
            this.durationMs = 0;
            /**
             * A &quot;payload&quot; object that can be used by {@link sozi.animation.Animator.onStep}
             * and {@link sozi.animation.Animator.onDone}.
             */
            this.data = null;
            /**
             * The start time of the animation.
             * @type Number
             */
            this.initialTime = 0;
            /**
             * The current state of this animator.
             * @type Boolean
             */
            this.started = false;
        },
        /**
         * Start the current animator.
         *
         * &lt;p&gt;The current animator is added to the list of running animators
         * and is put in the &quot;started&quot; state.
         * It will be removed from the list automatically when the given duration
         * has elapsed.&lt;/p&gt;
         *
         * &lt;p&gt;Method {@link sozi.animation.Animator.onStep} is called once before starting the animation.&lt;/p&gt;
         *
         * @param {Number} durationMs The animation duration, in milliseconds
         * @param data Some data that can be used in {@link sozi.animation.Animator.onStep}
         * and {@link sozi.animation.Animator.onDone}
         */
        start: function (durationMs, data) {
            this.durationMs = durationMs;
            this.data = data;
            this.initialTime = getCurrentTime();
            this.onStep(0);
            if (!this.started) {
                this.started = true;
                addAnimator(this);
            }
        },
        /**
         * Stop the current animator.
         *
         * &lt;p&gt;The current animator is removed from the list of running animators
         * and is put in the &quot;stopped&quot; state.&lt;/p&gt;
         */
        stop: function () {
            if (this.started) {
                removeAnimator(this);
                this.started = false;
            }
        },
        /**
         * Perform one animation step.
         *
         * &lt;p&gt;This function is called automatically by the {@link sozi.animation-loop} function.
         * It calls {@link sozi.animation.Animator.onStep}.
         * If the animation duration has elapsed, {@link sozi.animation.Animator.onDone} is called.&lt;/p&gt;
         *
         * @param {Number} currentTime The current time
         */
        step: function (currentTime) {
            var elapsedTime = currentTime - this.initialTime;
            if (elapsedTime &gt;= this.durationMs) {
                this.stop();
                this.onStep(1);
                this.onDone();
            } else {
                this.onStep(elapsedTime / this.durationMs);
            }
        },
        /**
         * This method is called automatically on each animation step.
         *
         * &lt;p&gt;The default implementation does nothing. Override it in a
         * subclass or instance to provide your own implementation.&lt;p&gt;
         *
         * @param {Number} progress The elapsed fraction of the total duration (comprised between 0 and 1 included).
         */
        onStep: function (progress) {
            // Do nothing
        },
        /**
         * This method is called automatically when the animation ends.
         *
         * &lt;p&gt;The default implementation does nothing. Override it in a
         * subclass or instance to provide your own implementation.&lt;p&gt;
         */
        onDone: function () {
            // Do nothing
        }
    });
    /*
     * The acceleration profiles.
     *
     * Each profile is a function that operates in the interval [0, 1]
     * and produces a result in the same interval.
     *
     * These functions are meant to be called in {@link sozi.animation.Animator.onStep}
     * to transform the progress indicator according to the desired
     * acceleration effect.
     */
    exports.profiles = {
        &quot;linear&quot;: function (x) {
            return x;
        },
        &quot;accelerate&quot;: function (x) {
            return Math.pow(x, 3);
        },
        &quot;strong-accelerate&quot;: function (x) {
            return Math.pow(x, 5);
        },
        &quot;decelerate&quot;: function (x) {
            return 1 - Math.pow(1 - x, 3);
        },
        &quot;strong-decelerate&quot;: function (x) {
            return 1 - Math.pow(1 - x, 5);
        },
        &quot;accelerate-decelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = Math.pow(2 * xs, 3) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        },
        &quot;strong-accelerate-decelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = Math.pow(2 * xs, 5) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        },
        &quot;decelerate-accelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = (1 - Math.pow(1 - 2 * xs, 2)) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        },
        &quot;strong-decelerate-accelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = (1 - Math.pow(1 - 2 * xs, 3)) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        },
        &quot;immediate-beginning&quot;: function (x) {
            return 1;
        },
        &quot;immediate-end&quot;: function (x) {
            return x === 1 ? 1 : 0;
        },
        &quot;immediate-middle&quot;: function (x) {
            return x &gt;= 0.5 ? 1 : 0;
        }
    };
});
/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */
/**
 * @name sozi.display
 * @namespace Display management.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.display&quot;, function (exports, window) {
    &quot;use strict&quot;;
    // Constant: the Sozi namespace
    var SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;
    var XLINK_NS = &quot;http://www.w3.org/1999/xlink&quot;;
    // The global document object
    var document = window.document;
    // The initial bounding box of the whole document,
    // assigned in onDocumentReady()
    var initialBBox;
    var lastWindowWidth;
    var lastWindowHeight;
    exports.viewPorts = {};
    var primaryViewport;
    /**
     * @depend proto.js
     */
    exports.CameraState = sozi.proto.Object.subtype({
        construct : function () {
            // Center coordinates
            this.cx = this.cy = 0;
            // Dimensions
            this.width = this.height = 1;
            // Rotation angle, in degrees
            this.angle = 0;
            // Clipping
            this.clipped = true;
            // Transition zoom
            this.transitionZoomPercent = 0;
            // Transition profile
            this.transitionProfile = sozi.animation.profiles.linear;
            // Transition path
            this.transitionPath = null;
        },
        setCenter: function (cx, cy) {
            this.cx = cx;
            this.cy = cy;
            return this;
        },
        setSize: function (width, height) {
            this.width = width;
            this.height = height;
            return this;
        },
        setClipped: function (clipped) {
            this.clipped = clipped;
            return this;
        },
        /*
         * Set the angle of the current camera state.
         * The angle of the current state is normalized
         * in the interval [-180 ; 180]
         */
        setAngle: function (angle) {
            this.angle = (angle + 180) % 360 - 180;
            return this;
        },
        setRawAngle: function (angle) {
            this.angle = angle;
            return this;
        },
        setTransitionZoomPercent: function (zoomPercent) {
            this.transitionZoomPercent = zoomPercent;
            return this;
        },
        setTransitionProfile: function (profile) {
            this.transitionProfile = profile;
            return this;
        },
        setTransitionPath: function (svgPath) {
            this.transitionPath = svgPath;
            return this;
        },
        /*
         * Set the current camera&apos;s properties to the given SVG element.
         *
         * If the element is a rectangle, the properties of the frames are based
         * on the geometrical properties of the rectangle.
         * Otherwise, the properties of the frame are based on the bounding box
         * of the given element.
         *
         * Parameters:
         *    - svgElement: an element from the SVG DOM
         */
        setAtElement: function (svgElement) {
            // Read the raw bounding box of the given SVG element
            var x, y, w, h;
            if (svgElement.nodeName === &quot;rect&quot;) {
                x = svgElement.x.baseVal.value;
                y = svgElement.y.baseVal.value;
                w = svgElement.width.baseVal.value;
                h = svgElement.height.baseVal.value;
            } else {
                var b = svgElement.getBBox();
                x = b.x;
                y = b.y;
                w = b.width;
                h = b.height;
            }
            // Compute the raw coordinates of the center
            // of the given SVG element
            var c = document.documentElement.createSVGPoint();
            c.x = x + w / 2;
            c.y = y + h / 2;
            // Compute the coordinates of the center of the given SVG element
            // after its current transformation
            var matrix = svgElement.getCTM();
            c = c.matrixTransform(matrix);
            // Compute the scaling factor applied to the given SVG element
            var scale = Math.sqrt(matrix.a * matrix.a + matrix.b * matrix.b);
            // Update the camera to match the bounding box information of the
            // given SVG element after its current transformation
            return this.setCenter(c.x, c.y)
                .setSize(w * scale, h * scale)
                .setAngle(Math.atan2(matrix.b, matrix.a) * 180 / Math.PI);
        },
        setAtState: function (other) {
            return this.setCenter(other.cx, other.cy)
                .setSize(other.width, other.height)
                .setAngle(other.angle)
                .setClipped(other.clipped)
                .setTransitionZoomPercent(other.transitionZoomPercent)
                .setTransitionProfile(other.transitionProfile)
                .setTransitionPath(other.transitionPath);
        },
        interpolatableAttributes: [&quot;width&quot;, &quot;height&quot;, &quot;angle&quot;],
        interpolate: function (initialState, finalState, ratio, useTransitionPath, reverseTransitionPath) {
            var remaining = 1 - ratio;
            for (var i = 0; i &lt; this.interpolatableAttributes.length; i += 1) {
                var attr = this.interpolatableAttributes[i];
                this[attr] = finalState[attr] * ratio + initialState[attr] * remaining;
            }
            var svgPath = reverseTransitionPath ? initialState.transitionPath : finalState.transitionPath;
            if (useTransitionPath &amp;&amp; svgPath) {
                var pathLength = svgPath.getTotalLength();
                if (reverseTransitionPath) {
                    var startPoint = svgPath.getPointAtLength(pathLength);
                    var endPoint = svgPath.getPointAtLength(0);
                    var currentPoint = svgPath.getPointAtLength(pathLength * remaining);
                }
                else {
                    var startPoint = svgPath.getPointAtLength(0);
                    var endPoint = svgPath.getPointAtLength(pathLength);
                    var currentPoint = svgPath.getPointAtLength(pathLength * ratio);
                }
                this.cx = currentPoint.x + (finalState.cx - endPoint.x) * ratio + (initialState.cx - startPoint.x) * remaining;
                this.cy = currentPoint.y + (finalState.cy - endPoint.y) * ratio + (initialState.cy - startPoint.y) * remaining;
            }
            else {
                this.cx = finalState.cx * ratio + initialState.cx * remaining;
                this.cy = finalState.cy * ratio + initialState.cy * remaining;
            }
        }
    });
    exports.Camera = exports.CameraState.subtype({
        construct: function (viewPort, idLayer) {
            exports.CameraState.construct.call(this);
            this.viewPort = viewPort;
            // Clipping rectangle
            this.svgClipRect = document.createElementNS(SVG_NS, &quot;rect&quot;);
            // Clipping path
            var svgClipPath = document.createElementNS(SVG_NS, &quot;clipPath&quot;);
            svgClipPath.setAttribute(&quot;id&quot;, &quot;sozi-clip-path-&quot; + viewPort.id + &quot;-&quot; + idLayer);
            svgClipPath.appendChild(this.svgClipRect);
            viewPort.svgGroup.appendChild(svgClipPath);
            // The group that will support the clipping operation
            var svgClippedGroup = document.createElementNS(SVG_NS, &quot;g&quot;);
            svgClippedGroup.setAttribute(&quot;clip-path&quot;, &quot;url(#sozi-clip-path-&quot; + viewPort.id + &quot;-&quot; + idLayer + &quot;)&quot;);
            viewPort.svgGroup.appendChild(svgClippedGroup);
            if (viewPort.isPrimary) {
                // This group will support transformations
                // we keep the layer group clean since it can be referenced
                // from &lt;use&gt; elements
                this.svgLayer = document.createElementNS(SVG_NS, &quot;g&quot;);
                this.svgLayer.appendChild(document.getElementById(idLayer));
            }
            else {
                // A &lt;use&gt; element referencing the target layer
                this.svgLayer = document.createElementNS(SVG_NS, &quot;use&quot;);
                this.svgLayer.setAttributeNS(XLINK_NS, &quot;href&quot;, &quot;#&quot; + idLayer);
            }
            svgClippedGroup.appendChild(this.svgLayer);
        },
        setAtState: function (other) {
            return exports.CameraState.setAtState.call(this, other).update();
        },
        getScale: function () {
            return Math.min(this.viewPort.width / this.width, this.viewPort.height / this.height);
        },
        rotate: function (angle) {
            return this.setAngle(this.angle + angle).update();
        },
        zoom: function (factor, x, y) {
            return this.setSize(this.width / factor, this.height / factor)
                       .drag(
                            (1 - factor) * (x - this.viewPort.width / 2),
                            (1 - factor) * (y - this.viewPort.height / 2)
                        );
        },
        drag: function (deltaX, deltaY) {
            var scale = this.getScale();
            var angleRad = this.angle * Math.PI / 180;
            var si = Math.sin(angleRad);
            var co = Math.cos(angleRad);
            return this.setCenter(
                    this.cx - (deltaX * co - deltaY * si) / scale,
                    this.cy - (deltaX * si + deltaY * co) / scale
                ).setClipped(false).update();
        },
        update: function () {
            var scale = this.getScale();
            // Compute the size and location of the frame on the screen
            var width = this.width  * scale;
            var height = this.height * scale;
            var x = (this.viewPort.width - width) / 2;
            var y = (this.viewPort.height - height) / 2;
            // Adjust the location and size of the clipping rectangle and the frame rectangle
            this.svgClipRect.setAttribute(&quot;x&quot;, this.clipped ? x : 0);
            this.svgClipRect.setAttribute(&quot;y&quot;, this.clipped ? y : 0);
            this.svgClipRect.setAttribute(&quot;width&quot;,  this.clipped ? width  : this.viewPort.width);
            this.svgClipRect.setAttribute(&quot;height&quot;, this.clipped ? height : this.viewPort.height);
            // Compute and apply the geometrical transformation to the layer group
            var translateX = -this.cx + this.width / 2  + x / scale;
            var translateY = -this.cy + this.height / 2 + y / scale;
            this.svgLayer.setAttribute(&quot;transform&quot;,
                &quot;scale(&quot; + scale + &quot;)&quot; +
                &quot;translate(&quot; + translateX + &quot;,&quot; + translateY + &quot;)&quot; +
                &quot;rotate(&quot; + (-this.angle) + &apos;,&apos; + this.cx + &quot;,&quot; + this.cy + &quot;)&quot;
            );
            return this;
        }
    });
    /**
     * @depend proto.js
     */
    exports.ViewPort = sozi.proto.Object.subtype({
        construct: function (id, idLayerList, primary) {
            this.id = id;
            exports.viewPorts[id] = this;
            this.isPrimary = !!primary;
            if (this.isPrimary) {
                if (primaryViewport) {
                    throw &quot;Failed to create a primary viewport. A primary viewport already exists.&quot;;
                }
                else {
                    primaryViewport = this;
                }
            }
            // TODO add a clip path for the viewport
            this.svgGroup = document.createElementNS(SVG_NS, &quot;g&quot;);
            this.svgGroup.setAttribute(&quot;class&quot;, &quot;sozi-viewport&quot;);
            this.svgGroup.setAttribute(&quot;id&quot;, &quot;sozi-viewport-&quot; + id);
            document.documentElement.appendChild(this.svgGroup);
            this.setLocation(0, 0).setSize(window.innerWidth, window.innerHeight);
            // Create a camera for each layer
            this.cameras = {};
            idLayerList.forEach(function (idLayer) {
                this.cameras[idLayer] = exports.Camera.instance(this, idLayer);
            }, this);
        },
        setSize: function (width, height) {
            this.width = width;
            this.height = height;
            return this;
        },
        setLocation: function (x, y) {
            this.x = x;
            this.y = y;
            return this;
        },
        contains: function (x, y) {
            return x &gt;= this.x &amp;&amp; x &lt; this.x + this.width &amp;&amp;
                   y &gt;= this.y &amp;&amp; y &lt; this.y + this.height;
        },
        /*
         * Returns the geometrical properties of the SVG document
         *
         * Returns:
         *    - The default size, translation and rotation for the document&apos;s bounding box
         */
        getDocumentState: function () {
            // This object defines the bounding box of the whole document
            var camera = exports.CameraState.instance()
                .setCenter(initialBBox.x + initialBBox.width / 2,
                           initialBBox.y + initialBBox.height / 2)
                .setSize(initialBBox.width, initialBBox.height)
                .setClipped(false);
            // Copy the document&apos;s bounding box to all layers
            var result = {};
            for (var idLayer in this.cameras) {
                result[idLayer] = camera;
            }
            return result;
        },
        /*
         * Apply geometrical transformations to the image according to the current
         * geometrical attributes of this Display.
         *
         * This method is called automatically when the window is resized.
         */
        update: function () {
            this.svgGroup.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + this.x + &quot;,&quot; + this.y + &quot;)&quot;);
            for (var idLayer in this.cameras) {
                this.cameras[idLayer].update();
            }
            return this;
        },
        /*
         * Transform the SVG document to show the given frame.
         *
         * Parameters:
         *    - frame: the frame to show
         */
        showFrame: function (frame) {
            for (var idLayer in frame.states) {
                this.cameras[idLayer].setAtState(frame.states[idLayer]);
            }
            return this;
        },
        /*
         * Apply an additional translation to the SVG document based on onscreen coordinates.
         *
         * Parameters:
         *    - deltaX: the horizontal displacement, in pixels
         *    - deltaY: the vertical displacement, in pixels
         */
        drag: function (deltaX, deltaY) {
            for (var idLayer in this.cameras) {
                this.cameras[idLayer].drag(deltaX, deltaY);
            }
            return this;
        },
        /*
         * Zooms the display with the given factor.
         *
         * The zoom is centered around (x, y) with respect to the center of the display area.
         */
        zoom: function (factor, x, y) {
            for (var idLayer in this.cameras) {
                this.cameras[idLayer].zoom(factor, x, y);
            }
            return this;
        },
        /*
         * Rotate the display with the given angle.
         *
         * The rotation is centered around the center of the display area.
         */
        rotate: function (angle) {
            for (var idLayer in this.cameras) {
                this.cameras[idLayer].rotate(angle);
            }
            return this;
        },
        /**
         * The default handler for window resize events.
         *
         * @param widthRatio The horizontal resize ratio
         * @param heightRatio The vertical resize ratio
         */
        onWindowResize: function (widthRatio, heightRatio) {
            this.setLocation(this.x * widthRatio, this.y * heightRatio)
                .setSize(this.width * widthRatio, this.height * heightRatio)
                .update();
        }
    });
    /*
     * Initializes the current Display.
     *
     * This method prepares the DOM representation of the current SVG document.
     * All the image is embedded into a global &quot;g&quot; element on which transformations will be applied.
     * A clipping rectangle is added.
     *
     * This method must be called when the document is ready to be manipulated.
     */
    function onDocumentReady() {
        var svgRoot = document.documentElement; // TODO check SVG tag
        // Save the initial bounding box of the document
        // and force its dimensions to the browser window
        initialBBox = svgRoot.getBBox();
        lastWindowWidth = window.innerWidth;
        lastWindowHeight = window.innerHeight;
        svgRoot.setAttribute(&quot;width&quot;, lastWindowWidth);
        svgRoot.setAttribute(&quot;height&quot;, lastWindowHeight);
        sozi.events.fire(&quot;sozi.display.ready&quot;);
    }
    /*
     * Resizes the SVG document to fit the browser window.
     *
     * This method calls onWindowResize on all registered viewports.
     */
    function resize() {
        var svgRoot = document.documentElement;
        svgRoot.setAttribute(&quot;width&quot;, window.innerWidth);
        svgRoot.setAttribute(&quot;height&quot;, window.innerHeight);
        for (var vp in exports.viewPorts) {
            exports.viewPorts[vp].onWindowResize(window.innerWidth / lastWindowWidth, window.innerHeight / lastWindowHeight);
        }
        lastWindowWidth = window.innerWidth;
        lastWindowHeight = window.innerHeight;
    }
    sozi.events.listen(&quot;sozi.document.ready&quot;, onDocumentReady); // @depend events.js
    window.addEventListener(&quot;resize&quot;, resize, false);
});
/*
* Sozi - A presentation tool using the SVG standard
*
* Copyright (C) 2010-2013 Guillaume Savaton
*
* This program is dual licensed under the terms of the MIT license
* or the GNU General Public License (GPL) version 3.
* A copy of both licenses is provided in the doc/ folder of the
* official release of Sozi.
*
* See http://sozi.baierouge.fr/wiki/en:license for details.
*/
/**
 * @name sozi.document
 * @namespace Document analysis.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.document&quot;, function (exports, window) {
    &quot;use strict&quot;;
    // An alias to the global document object
    var document = window.document;
    // Constant: the Sozi namespace
    var SOZI_NS = &quot;http://sozi.baierouge.fr&quot;;
    // Constant: the default frame properties, if missing in the SVG document
    var DEFAULTS = {
        &quot;title&quot;: &quot;Untitled&quot;,
        &quot;sequence&quot;: &quot;0&quot;,
        &quot;hide&quot;: &quot;true&quot;,
        &quot;clip&quot;: &quot;true&quot;,
        &quot;show-in-frame-list&quot;: &quot;true&quot;,
        &quot;timeout-enable&quot;: &quot;false&quot;,
        &quot;timeout-ms&quot;: &quot;5000&quot;,
        &quot;transition-duration-ms&quot;: &quot;1000&quot;,
        &quot;transition-zoom-percent&quot;: &quot;0&quot;,
        &quot;transition-profile&quot;: &quot;linear&quot;,
        &quot;transition-path-hide&quot;: &quot;true&quot;
    };
    var DRAWABLE_TAGS = [ &quot;g&quot;, &quot;image&quot;, &quot;path&quot;, &quot;rect&quot;, &quot;circle&quot;,
        &quot;ellipse&quot;, &quot;line&quot;, &quot;polyline&quot;, &quot;polygon&quot;, &quot;text&quot;, &quot;clippath&quot; ];
    // The definitions of all valid frames in the current document
    exports.frames = [];
    // The list of layer ids managed by Sozi
    exports.idLayerList = [];
    /*
    * Returns the value of an attribute of a given Sozi SVG element.
    *
    * If the attribute is empty or does not exist,
    * then a default value is returned (See DEFAULTS).
    */
    function readAttribute(soziElement, attr) {
        return soziElement.getAttributeNS(SOZI_NS, attr) || DEFAULTS[attr];
    }
    function readStateForLayer(frame, idLayer, soziElement) {
        var state = frame.states[idLayer] =
            frame.states[idLayer] || sozi.display.CameraState.instance();
        if (typeof state.transitionZoomPercent === &quot;undefined&quot; || soziElement.hasAttributeNS(SOZI_NS, &quot;transition-zoom-percent&quot;)) {
            state.setTransitionZoomPercent(parseInt(readAttribute(soziElement, &quot;transition-zoom-percent&quot;), 10));
        }
        if (typeof state.transitionProfile === &quot;undefined&quot; || soziElement.hasAttributeNS(SOZI_NS, &quot;transition-profile&quot;)) {
            state.setTransitionProfile(sozi.animation.profiles[readAttribute(soziElement, &quot;transition-profile&quot;)]);
        }
        if (typeof state.transitionPath === &quot;undefined&quot; || soziElement.hasAttributeNS(SOZI_NS, &quot;transition-path&quot;)) {
            var svgPath = document.getElementById(soziElement.getAttributeNS(SOZI_NS, &quot;transition-path&quot;));
            if (svgPath &amp;&amp; svgPath.nodeName === &quot;path&quot;) {
                state.setTransitionPath(svgPath);
                if (readAttribute(soziElement, &quot;transition-path-hide&quot;) === &quot;true&quot;) {
                    svgPath.style.visibility = &quot;hidden&quot;;
                }
            }
        }
        if (soziElement.hasAttributeNS(SOZI_NS, &quot;refid&quot;)) {
            var svgElement = document.getElementById(soziElement.getAttributeNS(SOZI_NS, &quot;refid&quot;));
            if (svgElement) {
                state.setAtElement(svgElement);
                if (readAttribute(soziElement, &quot;hide&quot;) === &quot;true&quot;) {
                    svgElement.style.visibility = &quot;hidden&quot;;
                }
            }
        }
        if (soziElement.hasAttributeNS(SOZI_NS, &quot;clip&quot;)) {
            state.setClipped(readAttribute(soziElement, &quot;clip&quot;) === &quot;true&quot;);
        }
    }
    /*
    * Builds the list of frames from the current document.
    *
    * This method collects all elements with tag &quot;sozi:frame&quot; and
    * retrieves their geometrical and animation attributes.
    * SVG elements that should be hidden during the presentation are hidden.
    *
    * The resulting list is available in frames, sorted by frame indices.
    */
    function readFrames() {
        // Collect all group ids referenced in &lt;layer&gt; elements
        var idLayerRefList = [];
        var soziLayerList = document.getElementsByTagNameNS(SOZI_NS, &quot;layer&quot;);
        for (var i = 0; i &lt; soziLayerList.length; i += 1) {
            var idLayer = soziLayerList[i].getAttributeNS(SOZI_NS, &quot;group&quot;);
            if (idLayer &amp;&amp; idLayerRefList.indexOf(idLayer) === -1) {
                idLayerRefList.push(idLayer);
            }
        }
        // Reorganize the document, grouping objects that do not belong
        // to a group referenced in &lt;layer&gt; elements
        var svgRoot = document.documentElement;
        var SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;
        // Create the first wrapper group
        var svgWrapper = document.createElementNS(SVG_NS, &quot;g&quot;);
        // For each child of the root SVG element
        var svgElementList = Array.prototype.slice.call(svgRoot.childNodes);
        svgElementList.forEach(function (svgElement, index) {
            if (!svgElement.getAttribute) {
                // Remove text elements
                svgRoot.removeChild(svgElement);
            }
            else if (idLayerRefList.indexOf(svgElement.getAttribute(&quot;id&quot;)) !== -1) {
                // If the current element is a referenced layer ...
                if (svgWrapper.firstChild) {
                    // ... and if there were other non-referenced elements before it,
                    // append the wrapper group to the &lt;defs&gt; element
                    svgWrapper.setAttribute(&quot;id&quot;, &quot;sozi-wrapper-&quot; + index);
                    exports.idLayerList.push(&quot;sozi-wrapper-&quot; + index);
                    svgRoot.insertBefore(svgWrapper, svgElement);
                    // Prepare a new wrapper element
                    svgWrapper = document.createElementNS(SVG_NS, &quot;g&quot;);
                }
                // ... append the current element to the &lt;defs&gt; element
                exports.idLayerList.push(svgElement.getAttribute(&quot;id&quot;));
            }
            else if (DRAWABLE_TAGS.indexOf(svgElement.localName.toLowerCase()) !== -1) {
                // If the current element is not a referenced layer
                // and is drawable, move it to the current wrapper element
                svgRoot.removeChild(svgElement);
                svgWrapper.appendChild(svgElement);
            }
        });
        // Append last wrapper if needed
        if (svgWrapper.firstChild) {
            svgWrapper.setAttribute(&quot;id&quot;, &quot;sozi-wrapper-&quot; + svgElementList.length);
            exports.idLayerList.push(&quot;sozi-wrapper-&quot; + svgElementList.length);
            svgRoot.appendChild(svgWrapper);
        }
        // Analyze &lt;frame&gt; elements sorted by sequence number
        var soziFrameList = Array.prototype.slice.call(document.getElementsByTagNameNS(SOZI_NS, &quot;frame&quot;));
        soziFrameList.sort(
            function (a, b) {
                var seqA = parseInt(readAttribute(a, &quot;sequence&quot;), 10);
                var seqB = parseInt(readAttribute(b, &quot;sequence&quot;), 10)
                return seqA - seqB;
            }
        );
        soziFrameList.forEach(function (soziFrame, indexFrame) {
            var newFrame = {
                id: soziFrame.getAttribute(&quot;id&quot;),
                title: readAttribute(soziFrame, &quot;title&quot;),
                showInFrameList: readAttribute(soziFrame, &quot;show-in-frame-list&quot;) === &quot;true&quot;,
                sequence: parseInt(readAttribute(soziFrame, &quot;sequence&quot;), 10),
                timeoutEnable: readAttribute(soziFrame, &quot;timeout-enable&quot;) === &quot;true&quot;,
                timeoutMs: parseInt(readAttribute(soziFrame, &quot;timeout-ms&quot;), 10),
                transitionDurationMs: parseInt(readAttribute(soziFrame, &quot;transition-duration-ms&quot;), 10),
                states: {}
            };
            // Get the default properties for all layers, either from
            // the current &lt;frame&gt; element or from the corresponding
            // layer in the previous frame.
            // Those properties can later be overriden by &lt;layer&gt; elements
            exports.idLayerList.forEach(function (idLayer) {
                if (indexFrame === 0 || idLayer.search(&quot;sozi-wrapper-[0-9]+&quot;) !== -1) {
                    // In the first frame, or in wrapper layers,
                    // read layer attributes from the &lt;frame&gt; element
                    readStateForLayer(newFrame, idLayer, soziFrame);
                }
                else {
                    // After the first frame, in referenced layers,
                    // copy attributes from the corresponding layer in the previous frame
                    var currentState = newFrame.states[idLayer] = sozi.display.CameraState.instance();
                    var previousState = exports.frames[exports.frames.length - 1].states[idLayer];
                    currentState.setAtState(previousState);
                }
            });
            // Collect and analyze &lt;layer&gt; elements in the current &lt;frame&gt; element
            var soziLayerList = Array.prototype.slice.call(soziFrame.getElementsByTagNameNS(SOZI_NS, &quot;layer&quot;));
            soziLayerList.forEach(function (soziLayer) {
                var idLayer = soziLayer.getAttributeNS(SOZI_NS, &quot;group&quot;);
                if (idLayer &amp;&amp; exports.idLayerList.indexOf(idLayer) !== -1) {
                    readStateForLayer(newFrame, idLayer, soziLayer);
                }
            });
            // If the &lt;frame&gt; element has at least one valid layer,
            // add it to the frame list
            for (var idLayer in newFrame.states) {
                if (newFrame.states.hasOwnProperty(idLayer)) {
                    exports.frames.push(newFrame);
                    break;
                }
            }
        });
    }
    /**
     * Return the frame with the given id.
     *
     * @return The index of the frame with the given id. -1 if not found.
     */
    exports.getFrameIndexForId = function (idFrame) {
        for (var indexFrame = 0; indexFrame &lt; exports.frames.length; indexFrame += 1) {
            if (exports.frames[indexFrame].id === idFrame) {
                return indexFrame;
            }
        }
        return - 1;
    };
    /*
     * Event handler: document load.
     *
     * This function reads the frames from the document and fires
     * the &quot;documentready&quot; event.
     *
     * @depend events.js
     */
    function onLoad() {
        document.documentElement.removeAttribute(&quot;viewBox&quot;);
        readFrames();
        sozi.events.fire(&quot;sozi.document.ready&quot;);
    }
    window.addEventListener(&quot;load&quot;, onLoad, false);
});
/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */
/**
 * @name sozi.framelist
 * @namespace Show the frame list.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.framelist&quot;, function (exports, window) {
    &quot;use strict&quot;;
    // An alias to the global document object
	var document = window.document;
    // Constant: the margin around the text of the frame list
    var MARGIN = 5;
	// The SVG group that will contain the frame list
    var svgTocGroup;
    // The SVG group that will contain the frame titles
    var svgTitlesGroup;
    // The current height of the frame list,
    // computed during the initialization
    var tocHeight = 0;
    // The X coordinate of the frame list in its hidden state
    var translateXHidden;
    // The X coordinate of the frame list when it is completely visible
    var translateXVisible;
    // The initial X coordinate of the frame list before starting an animation.
    // This variable is set before showing/hiding the frame list.
    var translateXStart;
    // The final X coordinate of the frame list for the starting animation.
    // This variable is set before showing/hiding the frame list.
    var translateXEnd;
    // The current X coordinate of the frame list for the running animation.
    // This variable is updated on each animation step.
    var translateX;
    // The animator object that will manage animations of the frame list
    var animator;
    // Constant: the duration of the showing/hiding animation, in milliseconds
    var ANIMATION_TIME_MS = 300;
    // Constant: the acceleration profile of the showing/hiding animation
    var ANIMATION_PROFILE = &quot;decelerate&quot;;
    // Constant: the SVG namespace
    var SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;
	function onMouseOut(evt) {
        var rel = evt.relatedTarget,
            svgRoot = document.documentElement;
        while (rel &amp;&amp; rel !== svgTocGroup &amp;&amp; rel !== svgRoot) {
            rel = rel.parentNode;
        }
        if (rel !== svgTocGroup) {
            exports.hide();
            sozi.player.restart();
            evt.stopPropagation();
        }
    }
	function onClickArrowUp(evt) {
        var ty = svgTitlesGroup.getCTM().f;
        if (ty &lt;= -window.innerHeight / 2) {
            ty += window.innerHeight / 2;
        } else if (ty &lt; 0) {
            ty = 0;
        }
        svgTitlesGroup.setAttribute(&quot;transform&quot;, &quot;translate(0,&quot; + ty + &quot;)&quot;);
        evt.stopPropagation();
	}
	function onClickArrowDown(evt) {
        var ty = svgTitlesGroup.getCTM().f;
        if (ty + tocHeight &gt;= window.innerHeight * 3 / 2) {
            ty -= window.innerHeight / 2;
        } else if (ty + tocHeight &gt; window.innerHeight + 2 * MARGIN) {
            ty = window.innerHeight - tocHeight - 4 * MARGIN;
        }
        svgTitlesGroup.setAttribute(&quot;transform&quot;, &quot;translate(0,&quot; + ty + &quot;)&quot;);
        evt.stopPropagation();
    }
    /*
     * Create a function that responds to clicks on frame list entries.
     */
    function makeClickHandler(index) {
        return function (evt) {
            sozi.player.previewFrame(index);
            evt.stopPropagation();
        };
    }
    /*
     * The default event handler, to prevent event propagation
     * through the frame list.
     */
    function defaultEventHandler(evt) {
	    evt.stopPropagation();
    }
    /*
     * Adds a table of contents to the document.
     *
     * The table of contents is a rectangular region with the list of frame titles.
     * Clicking on a title moves the presentation to the corresponding frame.
     *
     * The table of contents is hidden by default.
     */
    function onPlayerReady() {
        var tocWidth = 0;
    }
	/*
	 * Highlight the current frame title in the frame list.
	 *
	 * This handler is called on each frame change,
	 * even when the frame list is hidden.
	 */
    function onFrameChange(index) {
        var currentElementList = &apos;muh&apos;
    }
    /*
     * Makes the table of contents visible.
     */
    exports.show = function () {
        // Bring frame list to front
        translateXStart = translateX;
    };
    /*
     * Makes the table of contents invisible.
     */
    exports.hide = function () {
        translateXStart = translateX;
    };
    /*
     * Returns true if the table of contents is visible, false otherwise.
     */
    exports.isVisible = function () {
        return translateXEnd === translateXVisible;
    };
    // @depend events.js
	sozi.events.listen(&quot;sozi.player.ready&quot;, onPlayerReady);
	sozi.events.listen(&quot;sozi.player.cleanup&quot;, exports.hide);
	sozi.events.listen(&quot;sozi.player.framechange&quot;, onFrameChange);
});
/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */
/**
 * @name sozi.framenumber
 * @namespace Show the frame number.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.framenumber&quot;, function (exports, window) {
    &quot;use strict&quot;;
    var document = window.document; 
});
/*
* Sozi - A presentation tool using the SVG standard
*
* Copyright (C) 2010-2013 Guillaume Savaton
*
* This program is dual licensed under the terms of the MIT license
* or the GNU General Public License (GPL) version 3.
* A copy of both licenses is provided in the doc/ folder of the
* official release of Sozi.
*
* See http://sozi.baierouge.fr/wiki/en:license for details.
*/
/**
 * @name sozi.links
 * @namespace Links fix for Webkit.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.links&quot;, function (exports, window) {
    &quot;use strict&quot;;
    var SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;
    var XLINK_NS = &quot;http://www.w3.org/1999/xlink&quot;;
    function getClickHandler(index) {
        return function (evt) {
            sozi.player.moveToFrame(index);
            evt.preventDefault();
            evt.stopPropagation();
        };
    }
    /*
     * Event handler: document ready.
     *
     * This function adds an event listener to each internal link.
     * Clicking on a link that targets a frame of this document
     * will call sozi.player.moveToFrame().
     */
    function onDocumentReady() {
        var links = window.document.getElementsByTagNameNS(SVG_NS, &quot;a&quot;);
        for (var i = 0; i &lt; links.length; i += 1) {
            var href = links[i].getAttributeNS(XLINK_NS, &quot;href&quot;);
            if (href &amp;&amp; href[0] === &quot;#&quot;) {
                links[i].addEventListener(&quot;click&quot;, getClickHandler(sozi.location.getFrameIndexForHash(href)), false);
            }
        }
    }
    sozi.events.listen(&quot;sozi.document.ready&quot;, onDocumentReady); // @depend events.js
});
/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */
/**
 * @name sozi.location
 * @namespace Manage the URL in the address bar of the browser window.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.location&quot;, function (exports, window) {
    &quot;use strict&quot;;
    var changedFromWithin = false;
    /*
     * Returns the frame index corresponding to the URL hash.
     *
     * This is a shortcut for sozi.location.getFrameIndexForHash(window.location.hash)
     */
    exports.getFrameIndex = function () {
        return exports.getFrameIndexForHash(window.location.hash);
    };
    /*
     * Returns the frame index corresponding to the given URL hash.
     *
     * The URL hash can be either a frame index or a frame id.
     * In the URL, the frame index starts a 1.
     * This method converts it into a 0-based index.
     *
     * If the URL hash is not a positive integer, then 0 is returned.
     * It the URL hash is an integer greater than the last frame index, then
     * the last frame index is returned.
     */
    exports.getFrameIndexForHash = function (hash) {
        var indexOrId = hash ? hash.slice(1) : &quot;1&quot;;
        var index;
        if (/^[0-9]+$/.test(indexOrId)) {
            index = parseInt(indexOrId, 10) - 1;
        }
        else {
            index = sozi.document.getFrameIndexForId(indexOrId);
        }
        if (index &lt; 0) {
            return 0;
        }
        else if (index &gt;= sozi.document.frames.length) {
            return sozi.document.frames.length - 1;
        }
        else {
            return index;
        }
    };
    /*
     * Event handler: hash change.
     *
     * This function is called when the URL hash is changed.
     * If the hash was changed manually in the address bar, and if it corresponds to
     * a valid frame number, then the presentation moves to that frame.
     *
     * The hashchange event can be triggered externally, by the user modifying the URL,
     * or internally, by the script modifying window.location.hash.
     */
    function onHashChange() {
        var index = exports.getFrameIndex();
        if (!changedFromWithin) {
            sozi.player.moveToFrame(index);
        }
        changedFromWithin = false;
    }
    /*
     * Event handler: frame change.
     *
     * This function is called when the presentation has reached a new frame.
     * The URL hash is set to the current frame id.
     */
    function onFrameChange(index) {
        changedFromWithin = true;
        window.location.hash = &quot;#&quot; + sozi.document.frames[index].id;
    }
    window.addEventListener(&quot;hashchange&quot;, onHashChange, false);
    sozi.events.listen(&quot;sozi.player.framechange&quot;, onFrameChange); // @depend events.js
});
/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */
/**
 * @name sozi.player
 * @namespace Presentation player.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.player&quot;, function (exports, window) {
    &quot;use strict&quot;;
    var viewPort;
    // The animator object used to animate transitions
    var animator;
    // The handle returned by setTimeout() for frame timeout
    var nextFrameTimeout;
    // Constants: default animation properties
    // for out-of-sequence transitions
    var DEFAULT_DURATION_MS = 500;
    var DEFAULT_ZOOM_PERCENT = -10;
    var DEFAULT_PROFILE = &quot;linear&quot;;
    // The source frame index for the current transition
    var sourceFrameIndex = 0;
    // The index of the visible frame
    exports.currentFrameIndex = 0;
    // The state of the presentation.
    // If false, no automatic transition will be fired.
    var playing = false;
    // The state of the current frame.
    // If true, an automatic transition will be fired after the current timeout.
    var waiting = false;
    /*
     * Starts waiting before moving to the next frame.
     *
     * It the current frame has a timeout set, this method
     * will register a timer to move to the next frame automatically
     * after the specified time.
     *
     * If the current frame is the last, the presentation will
     * move to the first frame.
     */
    function waitTimeout() {
        if (sozi.document.frames[exports.currentFrameIndex].timeoutEnable) {
            waiting = true;
            var index = (exports.currentFrameIndex + 1) % sozi.document.frames.length;
            nextFrameTimeout = window.setTimeout(function () {
                    exports.moveToFrame(index);
                },
                sozi.document.frames[exports.currentFrameIndex].timeoutMs
            );
        }
    }
    /*
     * Starts the presentation from the given frame index (0-based).
     *
     * This method sets the &quot;playing&quot; flag, shows the desired frame
     * and calls waitTimeout.
     */
    exports.startFromIndex = function (index) {
        playing = true;
        waiting = false;
        sourceFrameIndex = index;
        exports.currentFrameIndex = index;
        viewPort.showFrame(sozi.document.frames[index]);
        waitTimeout();
    };
    exports.restart = function () {
        exports.startFromIndex(exports.currentFrameIndex);
    };
    /*
     * Stops the presentation.
     *
     * This method clears the &quot;playing&quot;.
     * If the presentation was in &quot;waiting&quot; mode due to a timeout
     * in the current frame, then it stops waiting.
     * The current animation is stopped in its current state.
     */
    exports.stop = function () {
        animator.stop();
        if (waiting) {
            window.clearTimeout(nextFrameTimeout);
            waiting = false;
        }
        playing = false;
        sourceFrameIndex = exports.currentFrameIndex;
    };
    function getZoomData(zoomPercent, s0, s1) {
        var result = {
            ss: ((zoomPercent &lt; 0) ? Math.max(s0, s1) : Math.min(s0, s1)) * (100 - zoomPercent) / 100,
            ts: 0.5,
            k: 0
        };
        if (zoomPercent !== 0) {
            var a = s0 - s1;
            var b = s0 - result.ss;
            var c = s1 - result.ss;
            if (a !== 0) {
                var d = Math.sqrt(b * c);
                var u = (b - d) / a;
                var v = (b + d) / a;
                result.ts = (u &gt; 0 &amp;&amp; u &lt;= 1) ? u : v;
            }
            result.k = b / result.ts / result.ts;
        }
        return result;
    }
    /*
     * Jump to a frame with the given index (0-based).
     *
     * This method does not animate the transition from the current
     * state of the display to the desired frame.
     *
     * The presentation is stopped: if a timeout has been set for the
     * target frame, it will be ignored.
     *
     * The URL hash is set to the given frame index (1-based).
     */
    exports.jumpToFrame = function (index) {
        exports.stop();
        sozi.events.fire(&quot;sozi.player.cleanup&quot;);
        sourceFrameIndex = index;
        exports.currentFrameIndex = index;
        viewPort.showFrame(sozi.document.frames[index]);
        sozi.events.fire(&quot;sozi.player.framechange&quot;, index);
    };
    /*
     * Returns an associative array where keys are layer names
     * and values are objects in the form { initialState: finalState: profile: zoomWidth: zoomHeight:}
     */
    exports.getAnimationData = function (initialState, finalState, zoomPercent, profile, useTransitionPath, reverseTransitionPath) {
        var data = {};
        for (var idLayer in initialState) {
            data[idLayer] = {
                initialState: sozi.display.CameraState.instance(),
                finalState: sozi.display.CameraState.instance(),
                useTransitionPath: useTransitionPath,
                reverseTransitionPath: reverseTransitionPath
            };
            data[idLayer].profile = profile || finalState[idLayer].transitionProfile;
            data[idLayer].initialState.setAtState(initialState[idLayer]);
            // If the current layer is referenced in final state, copy the final properties
            // else, copy initial state to final state for the current layer.
            if (finalState.hasOwnProperty(idLayer)) {
                data[idLayer].finalState.setAtState(finalState[idLayer]);
            }
            else {
                data[idLayer].finalState.setAtState(initialState[idLayer]);
            }
            // Keep the smallest angle difference between initial state and final state
            // TODO this should be handled in the interpolation function
            if (data[idLayer].finalState.angle - data[idLayer].initialState.angle &gt; 180) {
                data[idLayer].finalState.setRawAngle(data[idLayer].finalState.angle - 360);
            }
            else if (data[idLayer].finalState.angle - data[idLayer].initialState.angle &lt; -180) {
                data[idLayer].initialState.setRawAngle(data[idLayer].initialState.angle - 360);
            }
            var zp = zoomPercent || finalState[idLayer].transitionZoomPercent;
            if (zp &amp;&amp; finalState.hasOwnProperty(idLayer)) {
                data[idLayer].zoomWidth = getZoomData(zp,
                    initialState[idLayer].width,
                    finalState[idLayer].width);
                data[idLayer].zoomHeight = getZoomData(zp,
                    initialState[idLayer].height,
                    finalState[idLayer].height);
            }
        }
        return data;
    };
    exports.previewFrame = function (index) {
        exports.currentFrameIndex = index;
        animator.start(DEFAULT_DURATION_MS,
            exports.getAnimationData(viewPort.cameras, sozi.document.frames[index].states,
                DEFAULT_ZOOM_PERCENT, sozi.animation.profiles[DEFAULT_PROFILE]),
                false, false);
        sozi.events.fire(&quot;sozi.player.framechange&quot;, index);
    };
    /*
     * Moves to a frame with the given index (0-based).
     *
     * This method animates the transition from the current
     * state of the display to the desired frame.
     *
     * If the given frame index corresponds to the next frame in the list,
     * the transition properties of the next frame are used.
     * Otherwise, default transition properties are used.
     */
    exports.moveToFrame = function (index) {
        if (waiting) {
            window.clearTimeout(nextFrameTimeout);
            waiting = false;
        }
        var durationMs, zoomPercent, profile, useTransitionPath, reverseTransitionPath;
        if (index === (exports.currentFrameIndex - 1) % sozi.document.frames.length) {
            durationMs = sozi.document.frames[exports.currentFrameIndex].transitionDurationMs;
            zoomPercent = undefined; // Set for each layer
            profile = undefined; // Set for each layer
            useTransitionPath = true;
            reverseTransitionPath = true;
        }
        else if (index === (exports.currentFrameIndex + 1) % sozi.document.frames.length) {
            durationMs = sozi.document.frames[index].transitionDurationMs;
            zoomPercent = undefined; // Set for each layer
            profile = undefined; // Set for each layer
            useTransitionPath = true;
            reverseTransitionPath = false;
        }
        else {
            durationMs = DEFAULT_DURATION_MS;
            zoomPercent = DEFAULT_ZOOM_PERCENT;
            profile = sozi.animation.profiles[DEFAULT_PROFILE];
            useTransitionPath = false;
            reverseTransitionPath = false;
        }
        sozi.events.fire(&quot;sozi.player.cleanup&quot;);
        playing = true;
        exports.currentFrameIndex = index;
        animator.start(durationMs, exports.getAnimationData(
            viewPort.cameras, sozi.document.frames[index].states,
            zoomPercent, profile,
            useTransitionPath, reverseTransitionPath));
        sozi.events.fire(&quot;sozi.player.framechange&quot;, index);
    };
    /**
     * Jumps to the first frame of the presentation.
     */
    exports.jumpToFirst = function () {
        exports.jumpToFrame(0);
    };
    /**
     * Moves to the first frame of the presentation.
     */
    exports.moveToFirst = function () {
        exports.moveToFrame(0);
    };
    /**
     * Jumps to the previous frame.
     */
    exports.jumpToPrevious = function () {
        var index = exports.currentFrameIndex;
        if (!animator.started || sourceFrameIndex &lt;= exports.currentFrameIndex) {
            index -= 1;
        }
        if (index &gt;= 0) {
            exports.jumpToFrame(index);
        }
    };
    /*
     * Moves to the previous frame.
     */
    exports.moveToPrevious = function () {
        for (var index = exports.currentFrameIndex - 1; index &gt;= 0; index -= 1) {
            var frame = sozi.document.frames[index];
            if (!frame.timeoutEnable || frame.timeoutMs !== 0) {
                exports.moveToFrame(index);
                break;
            }
        }
    };
    /**
     * Jumps to the next frame.
     */
    exports.jumpToNext = function () {
        var index = exports.currentFrameIndex;
        if (!animator.started || sourceFrameIndex &gt;= exports.currentFrameIndex) {
            index += 1;
        }
        if (index &lt; sozi.document.frames.length) {
            exports.jumpToFrame(index);
        }
    };
    /**
     * Moves to the next frame.
     */
    exports.moveToNext = function () {
        if (exports.currentFrameIndex &lt; sozi.document.frames.length - 1 || sozi.document.frames[exports.currentFrameIndex].timeoutEnable) {
            exports.moveToFrame((exports.currentFrameIndex + 1) % sozi.document.frames.length);
        }
    };
    /**
     * Jumps to the last frame of the presentation.
     */
    exports.jumpToLast = function () {
        exports.jumpToFrame(sozi.document.frames.length - 1);
    };
    /**
     * Moves to the last frame of the presentation.
     */
    exports.moveToLast = function () {
        exports.moveToFrame(sozi.document.frames.length - 1);
    };
    /*
     * Restores the current frame.
     *
     * This method restores the display to fit the current frame,
     * e.g. after the display has been zoomed or dragged.
     */
    exports.moveToCurrent = function () {
        exports.moveToFrame(exports.currentFrameIndex);
    };
    /*
     * Shows all the document in the browser window.
     */
    exports.showAll = function () {
        exports.stop();
        sozi.events.fire(&quot;sozi.player.cleanup&quot;);
        animator.start(DEFAULT_DURATION_MS,
            exports.getAnimationData(viewPort.cameras, viewPort.getDocumentState(),
                DEFAULT_ZOOM_PERCENT, sozi.animation.profiles[DEFAULT_PROFILE],
                false, false
            )
        );
    };
    /*
     * Event handler: display ready.
     */
    function onDisplayReady() {
        viewPort = sozi.display.ViewPort.instance(&quot;player&quot;, sozi.document.idLayerList, true);
        exports.startFromIndex(sozi.location.getFrameIndex());
        // Hack to fix the blank screen bug in Chrome/Chromium
        // See https://github.com/senshu/Sozi/issues/109
        window.setTimeout(viewPort.bind(viewPort.update), 1);
        sozi.events.fire(&quot;sozi.player.ready&quot;);
    }
    // TODO move the zoom code to display.js
    exports.onAnimationStep = function (progress, data) {
        for (var idLayer in data) {
            var camera = viewPort.cameras[idLayer];
            camera.interpolate(
                data[idLayer].initialState,
                data[idLayer].finalState,
                data[idLayer].profile(progress),
                data[idLayer].useTransitionPath,
                data[idLayer].reverseTransitionPath
            );
            var ps;
            if (data[idLayer].zoomWidth &amp;&amp; data[idLayer].zoomWidth.k !== 0) {
                ps = progress - data[idLayer].zoomWidth.ts;
                camera.width = data[idLayer].zoomWidth.k * ps * ps + data[idLayer].zoomWidth.ss;
            }
            if (data[idLayer].zoomHeight &amp;&amp; data[idLayer].zoomHeight.k !== 0) {
                ps = progress - data[idLayer].zoomHeight.ts;
                camera.height = data[idLayer].zoomHeight.k * ps * ps + data[idLayer].zoomHeight.ss;
            }
            camera.setClipped(data[idLayer].finalState.clipped);
        }
        viewPort.update();
    };
    /**
     * @depend animation.js
     */
    animator = sozi.animation.Animator.instance().augment({
        /*
         * Event handler: animation step.
         *
         * This method is called periodically by animator after the animation
         * has been started, and until the animation time is elapsed.
         *
         * Parameter data provides the following information:
         *    - initialState and finalState contain the geometrical properties of the display
         *      at the start and end of the animation.
         *    - profile is a reference to the speed profile function to use.
         *    - zoomWidth and zoomHeight are the parameters of the zooming polynomial if the current
         *      animation has a non-zero zooming effect.
         *
         * Parameter progress is a float number between 0 (start of the animation)
         * and 1 (end of the animation).
         */
        onStep: function (progress) {
            exports.onAnimationStep(progress, this.data);
        },
        /*
         * Event handler: animation done.
         *
         * This method is called by animator when the current animation is finished.
         *
         * If the animation was a transition in the normal course of the presentation,
         * then we call the waitTimeout method to process the timeout property of the current frame.
         */
        onDone: function () {
            for (var idLayer in this.data) {
                viewPort.cameras[idLayer].setAtState(this.data[idLayer].finalState);
            }
            viewPort.update();
            sourceFrameIndex = exports.currentFrameIndex;
            if (playing) {
                waitTimeout();
            }
        }
    });
    sozi.events.listen(&quot;sozi.display.ready&quot;, onDisplayReady); // @depend events.js
});
/*
    @depend framenumber.js
    @depend framelist.js
    @depend actions.js
    @depend player.js
    @depend display.js
    @depend document.js
    @depend location.js
    @depend links.js
*/</script>
 <style id="sozi-style" ns1:version="13.11-30213629">/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */
#sozi-toc text {
   fill: #eff;
   font-family: Verdana, sans-serif;
   font-size: 12pt;
}
#sozi-toc text:hover {
   fill: #0cf;
   cursor: pointer;
}
#sozi-toc text.sozi-toc-current {
   fill: #fa4;
}
#sozi-toc-background {
   stroke: #222;
   stroke-opacity: 0.1;
   stroke-width: 10;
   fill: #222;
   fill-opacity: 0.9;
}
.sozi-toc-arrow {
   fill: #eff;
   fill-opacity: 0.75;
   stroke: none;
}
.sozi-toc-arrow:hover {
   fill: #0cf;
}
#sozi-framenumber circle {
   stroke: #222;
   stroke-opacity: 0.1;
   stroke-width: 4;
   fill: #222;
   fill-opacity: 0.9;
}
#sozi-framenumber text {
   fill: #eff;
   font-family: Verdana, sans-serif;
   font-size: 12pt;
}</style>
 <ns1:frame id="6" ns1:transition-zoom-percent="0.0" ns1:show-in-frame-list="false" ns1:transition-profile="linear" ns1:transition-duration-ms="799" ns1:title="Bug_6" ns1:timeout-enable="true" ns1:transition-path-hide="true" ns1:timeout-ms="0.0" ns1:refid="frame6" ns1:clip="true" ns1:sequence="7" ns1:hide="true">
  <ns1:layer ns1:transition-zoom-percent="0.0" ns1:transition-profile="linear" ns1:group="layer3" ns1:transition-path-hide="true" ns1:refid="clouds_6" ns1:clip="true" ns1:hide="true"/>
 </ns1:frame>
 <ns1:frame id="4" ns1:transition-zoom-percent="0.0" ns1:show-in-frame-list="false" ns1:transition-profile="linear" ns1:transition-duration-ms="1200.0" ns1:title="Bug_4" ns1:timeout-enable="true" ns1:transition-path-hide="true" ns1:timeout-ms="0.0" ns1:refid="frame4" ns1:clip="true" ns1:sequence="5" ns1:hide="true">
  <ns1:layer ns1:transition-zoom-percent="0.0" ns1:transition-profile="linear" ns1:group="layer3" ns1:transition-path-hide="true" ns1:refid="clouds_4" ns1:clip="true" ns1:hide="true"/>
 </ns1:frame>
 <ns1:frame id="f2" ns1:transition-zoom-percent="0.0" ns1:show-in-frame-list="false" ns1:transition-profile="linear" ns1:transition-duration-ms="1500.0" ns1:title="Bug_2" ns1:timeout-enable="true" ns1:transition-path-hide="true" ns1:timeout-ms="0.0" ns1:refid="frame2" ns1:clip="true" ns1:sequence="2" ns1:hide="true">
  <ns1:layer ns1:transition-zoom-percent="0.0" ns1:transition-profile="linear" ns1:group="layer3" ns1:transition-path-hide="true" ns1:refid="clouds_2" ns1:clip="true" ns1:hide="true"/>
 </ns1:frame>
 <ns1:frame id="7" ns1:transition-zoom-percent="0.0" ns1:show-in-frame-list="false" ns1:transition-profile="linear" ns1:transition-duration-ms="1200.0" ns1:title="Bug_7" ns1:timeout-enable="true" ns1:transition-path-hide="true" ns1:timeout-ms="0.0" ns1:refid="frame7" ns1:clip="true" ns1:sequence="8" ns1:hide="true">
  <ns1:layer ns1:transition-zoom-percent="0.0" ns1:transition-profile="linear" ns1:group="layer3" ns1:transition-path-hide="true" ns1:refid="clouds_7" ns1:clip="true" ns1:hide="true"/>
 </ns1:frame>
 <ns1:frame id="5" ns1:transition-zoom-percent="0.0" ns1:show-in-frame-list="false" ns1:transition-profile="linear" ns1:transition-duration-ms="1000.0" ns1:title="Bug_5" ns1:timeout-enable="true" ns1:transition-path-hide="true" ns1:timeout-ms="0.0" ns1:refid="frame5" ns1:clip="true" ns1:sequence="6" ns1:hide="true">
  <ns1:layer ns1:transition-zoom-percent="0.0" ns1:transition-profile="linear" ns1:group="layer3" ns1:transition-path-hide="true" ns1:refid="clouds_5" ns1:clip="true" ns1:hide="true"/>
 </ns1:frame>
 <ns1:frame id="3" ns1:transition-zoom-percent="0.0" ns1:show-in-frame-list="false" ns1:transition-profile="linear" ns1:transition-duration-ms="700.0" ns1:title="Bug_3" ns1:timeout-enable="true" ns1:transition-path-hide="true" ns1:timeout-ms="0.0" ns1:refid="frame3" ns1:clip="true" ns1:sequence="4" ns1:hide="true">
  <ns1:layer ns1:transition-zoom-percent="0.0" ns1:transition-profile="linear" ns1:group="layer3" ns1:transition-path-hide="true" ns1:refid="clouds_3" ns1:clip="true" ns1:hide="true"/>
 </ns1:frame>
 <ns1:frame id="1" ns1:transition-zoom-percent="0.0" ns1:show-in-frame-list="false" ns1:transition-profile="linear" ns1:transition-duration-ms="0.0" ns1:title="Bug_1" ns1:timeout-enable="true" ns1:transition-path-hide="true" ns1:timeout-ms="1000.0" ns1:refid="frame1" ns1:clip="true" ns1:sequence="1" ns1:hide="true">
  <ns1:layer ns1:transition-zoom-percent="0.0" ns1:transition-profile="linear" ns1:group="layer1" ns1:transition-path-hide="true" ns1:refid="baseframe" ns1:clip="true" ns1:hide="true"/>
  <ns1:layer ns1:transition-zoom-percent="0.0" ns1:transition-profile="linear" ns1:group="layer4" ns1:transition-path-hide="true" ns1:refid="Vine" ns1:clip="true" ns1:hide="true"/>
  <ns1:layer ns1:transition-zoom-percent="0.0" ns1:transition-profile="linear" ns1:group="layer3" ns1:transition-path-hide="true" ns1:refid="clouds_1" ns1:clip="true" ns1:hide="true"/>
 </ns1:frame>
 <ns1:frame id="frame5113" ns1:transition-zoom-percent="0.0" ns1:show-in-frame-list="false" ns1:transition-profile="linear" ns1:transition-duration-ms="70000.0" ns1:title="Bug_8" ns1:timeout-enable="false" ns1:transition-path-hide="true" ns1:timeout-ms="0.0" ns1:refid="frame7" ns1:clip="true" ns1:sequence="9" ns1:hide="true">
  <ns1:layer ns1:transition-zoom-percent="0.0" ns1:transition-profile="linear" ns1:group="layer3" ns1:transition-path-hide="true" ns1:refid="clouds_8" ns1:clip="true" ns1:hide="true"/>
 </ns1:frame>
 <ns1:frame id="frame8072" ns1:transition-zoom-percent="0.0" ns1:transition-path-hide="true" ns1:title="Bug_3a" ns1:transition-duration-ms="1500.0" ns1:transition-profile="linear" ns1:timeout-enable="true" ns1:show-in-frame-list="false" ns1:timeout-ms="0.0" ns1:refid="frame3a" ns1:clip="true" ns1:sequence="3" ns1:hide="true">
  <ns1:layer ns1:transition-zoom-percent="0.0" ns1:transition-profile="linear" ns1:group="layer3" ns1:transition-path-hide="true" ns1:refid="clouds_3a" ns1:clip="true" ns1:hide="true"/>
 </ns1:frame>
</svg>
